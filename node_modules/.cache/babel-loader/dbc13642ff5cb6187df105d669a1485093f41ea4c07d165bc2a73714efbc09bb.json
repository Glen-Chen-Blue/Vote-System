{"ast":null,"code":"// Copyright 2020-2022 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\n// import { AccountBuilder, ExplorerUrl, Storage } from '@iota/identity-wasm';\nconst identity = require('@iota/identity-wasm/node');\n\n/**\n * This example shows a basic introduction on how to create a basic DID Document and upload it to the Tangle\n * using the Account.\n */\n// async function createIdentity(storage?: Storage) {\nasync function createIdentity() {\n  // The creation step generates a keypair, builds an identity\n  // and publishes it to the IOTA mainnet.\n  // let builder = new AccountBuilder({\n  //     storage,\n  // });\n  const builder = new identity.AccountBuilder();\n  const account = await builder.createIdentity();\n\n  // Retrieve the DID of the newly created identity.\n  const did = account.did();\n\n  // Print the DID of the created Identity.\n  console.log(did.toString());\n\n  // Print the local state of the DID Document\n  console.log(account.document());\n\n  // Print the Explorer URL for the DID.\n  console.log(`Explorer Url:`, identity.ExplorerUrl.mainnet().resolverUrl(did));\n}\nexport { createIdentity };","map":{"version":3,"names":["identity","require","createIdentity","builder","AccountBuilder","account","did","console","log","toString","document","ExplorerUrl","mainnet","resolverUrl"],"sources":["/Users/tsaixinying/Desktop/network_lab/Vote-System/src/component/iota.js"],"sourcesContent":["// Copyright 2020-2022 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\n// import { AccountBuilder, ExplorerUrl, Storage } from '@iota/identity-wasm';\nconst identity = require('@iota/identity-wasm/node')\n\n/**\n * This example shows a basic introduction on how to create a basic DID Document and upload it to the Tangle\n * using the Account.\n */\n// async function createIdentity(storage?: Storage) {\nasync function createIdentity(){\n\n    // The creation step generates a keypair, builds an identity\n    // and publishes it to the IOTA mainnet.\n    // let builder = new AccountBuilder({\n    //     storage,\n    // });\n    const builder = new identity.AccountBuilder();\n    const account = await builder.createIdentity();\n\n    // Retrieve the DID of the newly created identity.\n    const did = account.did();\n\n    // Print the DID of the created Identity.\n    console.log(did.toString())\n\n    // Print the local state of the DID Document\n    console.log(account.document());\n\n    // Print the Explorer URL for the DID.\n    console.log(`Explorer Url:`, identity.ExplorerUrl.mainnet().resolverUrl(did));\n}\n\nexport { createIdentity };"],"mappings":"AAAA;AACA;;AAEA;AACA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,0BAA0B,CAAC;;AAEpD;AACA;AACA;AACA;AACA;AACA,eAAeC,cAAcA,CAAA,EAAE;EAE3B;EACA;EACA;EACA;EACA;EACA,MAAMC,OAAO,GAAG,IAAIH,QAAQ,CAACI,cAAc,CAAC,CAAC;EAC7C,MAAMC,OAAO,GAAG,MAAMF,OAAO,CAACD,cAAc,CAAC,CAAC;;EAE9C;EACA,MAAMI,GAAG,GAAGD,OAAO,CAACC,GAAG,CAAC,CAAC;;EAEzB;EACAC,OAAO,CAACC,GAAG,CAACF,GAAG,CAACG,QAAQ,CAAC,CAAC,CAAC;;EAE3B;EACAF,OAAO,CAACC,GAAG,CAACH,OAAO,CAACK,QAAQ,CAAC,CAAC,CAAC;;EAE/B;EACAH,OAAO,CAACC,GAAG,CAAE,eAAc,EAAER,QAAQ,CAACW,WAAW,CAACC,OAAO,CAAC,CAAC,CAACC,WAAW,CAACP,GAAG,CAAC,CAAC;AACjF;AAEA,SAASJ,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}