{"ast":null,"code":"if (!globalThis.fetch) {\n  const fetch = require('node-fetch');\n  globalThis.Headers = fetch.Headers;\n  globalThis.Request = fetch.Request;\n  globalThis.Response = fetch.Response;\n  globalThis.fetch = fetch;\n}\nlet imports = {};\nimports['__wbindgen_placeholder__'] = module.exports;\nlet wasm;\nconst {\n  TextDecoder,\n  TextEncoder,\n  inspect\n} = require(`util`);\nconst heap = new Array(32).fill(undefined);\nheap.push(undefined, null, true, false);\nfunction getObject(idx) {\n  return heap[idx];\n}\nlet heap_next = heap.length;\nfunction dropObject(idx) {\n  if (idx < 36) return;\n  heap[idx] = heap_next;\n  heap_next = idx;\n}\nfunction takeObject(idx) {\n  const ret = getObject(idx);\n  dropObject(idx);\n  return ret;\n}\nlet cachedTextDecoder = new TextDecoder('utf-8', {\n  ignoreBOM: true,\n  fatal: true\n});\ncachedTextDecoder.decode();\nlet cachedUint8Memory0;\nfunction getUint8Memory0() {\n  if (cachedUint8Memory0.byteLength === 0) {\n    cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n  }\n  return cachedUint8Memory0;\n}\nfunction getStringFromWasm0(ptr, len) {\n  return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\nfunction addHeapObject(obj) {\n  if (heap_next === heap.length) heap.push(heap.length + 1);\n  const idx = heap_next;\n  heap_next = heap[idx];\n  heap[idx] = obj;\n  return idx;\n}\nlet WASM_VECTOR_LEN = 0;\nlet cachedTextEncoder = new TextEncoder('utf-8');\nconst encodeString = typeof cachedTextEncoder.encodeInto === 'function' ? function (arg, view) {\n  return cachedTextEncoder.encodeInto(arg, view);\n} : function (arg, view) {\n  const buf = cachedTextEncoder.encode(arg);\n  view.set(buf);\n  return {\n    read: arg.length,\n    written: buf.length\n  };\n};\nfunction passStringToWasm0(arg, malloc, realloc) {\n  if (realloc === undefined) {\n    const buf = cachedTextEncoder.encode(arg);\n    const ptr = malloc(buf.length);\n    getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n    WASM_VECTOR_LEN = buf.length;\n    return ptr;\n  }\n  let len = arg.length;\n  let ptr = malloc(len);\n  const mem = getUint8Memory0();\n  let offset = 0;\n  for (; offset < len; offset++) {\n    const code = arg.charCodeAt(offset);\n    if (code > 0x7F) break;\n    mem[ptr + offset] = code;\n  }\n  if (offset !== len) {\n    if (offset !== 0) {\n      arg = arg.slice(offset);\n    }\n    ptr = realloc(ptr, len, len = offset + arg.length * 3);\n    const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n    const ret = encodeString(arg, view);\n    offset += ret.written;\n  }\n  WASM_VECTOR_LEN = offset;\n  return ptr;\n}\nlet cachedInt32Memory0;\nfunction getInt32Memory0() {\n  if (cachedInt32Memory0.byteLength === 0) {\n    cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n  }\n  return cachedInt32Memory0;\n}\nfunction isLikeNone(x) {\n  return x === undefined || x === null;\n}\nfunction debugString(val) {\n  // primitive types\n  const type = typeof val;\n  if (type == 'number' || type == 'boolean' || val == null) {\n    return `${val}`;\n  }\n  if (type == 'string') {\n    return `\"${val}\"`;\n  }\n  if (type == 'symbol') {\n    const description = val.description;\n    if (description == null) {\n      return 'Symbol';\n    } else {\n      return `Symbol(${description})`;\n    }\n  }\n  if (type == 'function') {\n    const name = val.name;\n    if (typeof name == 'string' && name.length > 0) {\n      return `Function(${name})`;\n    } else {\n      return 'Function';\n    }\n  }\n  // objects\n  if (Array.isArray(val)) {\n    const length = val.length;\n    let debug = '[';\n    if (length > 0) {\n      debug += debugString(val[0]);\n    }\n    for (let i = 1; i < length; i++) {\n      debug += ', ' + debugString(val[i]);\n    }\n    debug += ']';\n    return debug;\n  }\n  // Test for built-in\n  const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n  let className;\n  if (builtInMatches.length > 1) {\n    className = builtInMatches[1];\n  } else {\n    // Failed to match the standard '[object ClassName]'\n    return toString.call(val);\n  }\n  if (className == 'Object') {\n    // we're a user defined class or Object\n    // JSON.stringify avoids problems with cycles, and is generally much\n    // easier than looping through ownProperties of `val`.\n    try {\n      return 'Object(' + JSON.stringify(val) + ')';\n    } catch (_) {\n      return 'Object';\n    }\n  }\n  // errors\n  if (val instanceof Error) {\n    return `${val.name}: ${val.message}\\n${val.stack}`;\n  }\n  // TODO we could test for more things here, like `Set`s and `Map`s.\n  return className;\n}\nconst CLOSURE_DTORS = new FinalizationRegistry(state => {\n  wasm.__wbindgen_export_2.get(state.dtor)(state.a, state.b);\n});\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n  const state = {\n    a: arg0,\n    b: arg1,\n    cnt: 1,\n    dtor\n  };\n  const real = function () {\n    // First up with a closure we increment the internal reference\n    // count. This ensures that the Rust closure environment won't\n    // be deallocated while we're invoking it.\n    state.cnt++;\n    const a = state.a;\n    state.a = 0;\n    try {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return f(a, state.b, ...args);\n    } finally {\n      if (--state.cnt === 0) {\n        wasm.__wbindgen_export_2.get(state.dtor)(a, state.b);\n        CLOSURE_DTORS.unregister(state);\n      } else {\n        state.a = a;\n      }\n    }\n  };\n  real.original = state;\n  CLOSURE_DTORS.register(real, state, state);\n  return real;\n}\nfunction __wbg_adapter_34(arg0, arg1, arg2) {\n  wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hdcd0b8367bd8bfe2(arg0, arg1, addHeapObject(arg2));\n}\nfunction __wbg_adapter_37(arg0, arg1) {\n  wasm._dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h4fe003293c171f86(arg0, arg1);\n}\nfunction passArray8ToWasm0(arg, malloc) {\n  const ptr = malloc(arg.length * 1);\n  getUint8Memory0().set(arg, ptr / 1);\n  WASM_VECTOR_LEN = arg.length;\n  return ptr;\n}\nlet stack_pointer = 32;\nfunction addBorrowedObject(obj) {\n  if (stack_pointer == 1) throw new Error('out of js stack');\n  heap[--stack_pointer] = obj;\n  return stack_pointer;\n}\nfunction _assertClass(instance, klass) {\n  if (!(instance instanceof klass)) {\n    throw new Error(`expected instance of ${klass.name}`);\n  }\n  return instance.ptr;\n}\nfunction getArrayU8FromWasm0(ptr, len) {\n  return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* Initializes the console error panic hook for better error messages\n*/\nmodule.exports.start = function () {\n  wasm.start();\n};\nfunction handleError(f, args) {\n  try {\n    return f.apply(this, args);\n  } catch (e) {\n    wasm.__wbindgen_exn_store(addHeapObject(e));\n  }\n}\nfunction notDefined(what) {\n  return () => {\n    throw new Error(`${what} is not defined`);\n  };\n}\nfunction __wbg_adapter_655(arg0, arg1, arg2, arg3) {\n  wasm.wasm_bindgen__convert__closures__invoke2_mut__hd12e749677640a32(arg0, arg1, addHeapObject(arg2), addHeapObject(arg3));\n}\n\n/**\n*/\nmodule.exports.DIDMessageEncoding = Object.freeze({\n  Json: 0,\n  \"0\": \"Json\",\n  JsonBrotli: 1,\n  \"1\": \"JsonBrotli\"\n});\n/**\n* Controls validation behaviour when checking whether or not a credential has been revoked by its\n* [`credentialStatus`](https://www.w3.org/TR/vc-data-model/#status).\n*/\nmodule.exports.StatusCheck = Object.freeze({\n  /**\n  * Validate the status if supported, reject any unsupported\n  * [`credentialStatus`](https://www.w3.org/TR/vc-data-model/#status) types.\n  *\n  * Only `RevocationBitmap2022` is currently supported.\n  *\n  * This is the default.\n  */\n  Strict: 0,\n  \"0\": \"Strict\",\n  /**\n  * Validate the status if supported, skip any unsupported\n  * [`credentialStatus`](https://www.w3.org/TR/vc-data-model/#status) types.\n  */\n  SkipUnsupported: 1,\n  \"1\": \"SkipUnsupported\",\n  /**\n  * Skip all status checks.\n  */\n  SkipAll: 2,\n  \"2\": \"SkipAll\"\n});\n/**\n* Declares how credential subjects must relate to the presentation holder during validation.\n* See `PresentationValidationOptions::subject_holder_relationship`.\n*\n* See also the [Subject-Holder Relationship](https://www.w3.org/TR/vc-data-model/#subject-holder-relationships) section of the specification.\n*/\nmodule.exports.SubjectHolderRelationship = Object.freeze({\n  /**\n  * The holder must always match the subject on all credentials, regardless of their [`nonTransferable`](https://www.w3.org/TR/vc-data-model/#nontransferable-property) property.\n  * This variant is the default used if no other variant is specified when constructing a new\n  * `PresentationValidationOptions`.\n  */\n  AlwaysSubject: 0,\n  \"0\": \"AlwaysSubject\",\n  /**\n  * The holder must match the subject only for credentials where the [`nonTransferable`](https://www.w3.org/TR/vc-data-model/#nontransferable-property) property is `true`.\n  */\n  SubjectOnNonTransferable: 1,\n  \"1\": \"SubjectOnNonTransferable\",\n  /**\n  * The holder is not required to have any kind of relationship to any credential subject.\n  */\n  Any: 2,\n  \"2\": \"Any\"\n});\n/**\n* Declares when validation should return if an error occurs.\n*/\nmodule.exports.FailFast = Object.freeze({\n  /**\n  * Return all errors that occur during validation.\n  */\n  AllErrors: 0,\n  \"0\": \"AllErrors\",\n  /**\n  * Return after the first error occurs.\n  */\n  FirstError: 1,\n  \"1\": \"FirstError\"\n});\n/**\n*/\nmodule.exports.KeyType = Object.freeze({\n  Ed25519: 1,\n  \"1\": \"Ed25519\",\n  X25519: 2,\n  \"2\": \"X25519\"\n});\n/**\n*/\nmodule.exports.MethodRelationship = Object.freeze({\n  Authentication: 0,\n  \"0\": \"Authentication\",\n  AssertionMethod: 1,\n  \"1\": \"AssertionMethod\",\n  KeyAgreement: 2,\n  \"2\": \"KeyAgreement\",\n  CapabilityDelegation: 3,\n  \"3\": \"CapabilityDelegation\",\n  CapabilityInvocation: 4,\n  \"4\": \"CapabilityInvocation\"\n});\nconst AccountFinalization = new FinalizationRegistry(ptr => wasm.__wbg_account_free(ptr));\n/**\n* An account manages one identity.\n*\n* It handles private keys, writing to storage and\n* publishing to the Tangle.\n*/\nclass Account {\n  static __wrap(ptr) {\n    const obj = Object.create(Account.prototype);\n    obj.ptr = ptr;\n    AccountFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    AccountFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_account_free(ptr);\n  }\n  /**\n  * Attach one or more verification relationships to a method.\n  *\n  * Note: the method must exist and be in the set of verification methods;\n  * it cannot be an embedded method.\n  * @param {AttachMethodRelationshipOptions} options\n  * @returns {Promise<void>}\n  */\n  attachMethodRelationships(options) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.account_attachMethodRelationships(retptr, this.ptr, addBorrowedObject(options));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Adds a new verification method to the DID document.\n  * @param {CreateMethodOptions} options\n  * @returns {Promise<void>}\n  */\n  createMethod(options) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.account_createMethod(retptr, this.ptr, addBorrowedObject(options));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Detaches the given relationship from the given method, if the method exists.\n  * @param {DetachMethodRelationshipOptions} options\n  * @returns {Promise<void>}\n  */\n  detachMethodRelationships(options) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.account_detachMethodRelationships(retptr, this.ptr, addBorrowedObject(options));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Returns the {@link DID} of the managed identity.\n  * @returns {DID}\n  */\n  did() {\n    const ret = wasm.account_did(this.ptr);\n    return DID.__wrap(ret);\n  }\n  /**\n  * Returns whether auto-publish is enabled.\n  * @returns {boolean}\n  */\n  autopublish() {\n    const ret = wasm.account_autopublish(this.ptr);\n    return ret !== 0;\n  }\n  /**\n  * Returns the auto-save configuration value.\n  * @returns {AutoSave}\n  */\n  autosave() {\n    const ret = wasm.account_autosave(this.ptr);\n    return AutoSave.__wrap(ret);\n  }\n  /**\n  * Returns a copy of the document managed by the `Account`.\n  *\n  * Note: the returned document only has a valid signature after publishing an integration chain update.\n  * In general, for use cases where the signature is required, it is advisable to resolve the\n  * document from the Tangle.\n  * @returns {Document}\n  */\n  document() {\n    const ret = wasm.account_document(this.ptr);\n    return Document.__wrap(ret);\n  }\n  /**\n  * Resolves the DID Document associated with this `Account` from the Tangle.\n  * @returns {Promise<ResolvedDocument>}\n  */\n  resolveIdentity() {\n    const ret = wasm.account_resolveIdentity(this.ptr);\n    return takeObject(ret);\n  }\n  /**\n  * Removes the identity from the local storage entirely.\n  *\n  * Note: This will remove all associated document updates and key material - recovery is NOT POSSIBLE!\n  * @returns {Promise<void>}\n  */\n  deleteIdentity() {\n    const ptr = this.__destroy_into_raw();\n    const ret = wasm.account_deleteIdentity(ptr);\n    return takeObject(ret);\n  }\n  /**\n  * Push all unpublished changes to the tangle in a single message.\n  * @param {PublishOptions | undefined} publish_options\n  * @returns {Promise<void>}\n  */\n  publish(publish_options) {\n    const ret = wasm.account_publish(this.ptr, isLikeNone(publish_options) ? 0 : addHeapObject(publish_options));\n    return takeObject(ret);\n  }\n  /**\n  * Signs a {@link Credential} with the key specified by `fragment`.\n  * @param {string} fragment\n  * @param {Credential} credential\n  * @param {ProofOptions} options\n  * @returns {Promise<Credential>}\n  */\n  createSignedCredential(fragment, credential, options) {\n    const ptr0 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    _assertClass(credential, Credential);\n    _assertClass(options, ProofOptions);\n    const ret = wasm.account_createSignedCredential(this.ptr, ptr0, len0, credential.ptr, options.ptr);\n    return takeObject(ret);\n  }\n  /**\n  * Signs a {@link Document} with the key specified by `fragment`.\n  * @param {string} fragment\n  * @param {Document} document\n  * @param {ProofOptions} options\n  * @returns {Promise<Document>}\n  */\n  createSignedDocument(fragment, document, options) {\n    const ptr0 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    _assertClass(document, Document);\n    _assertClass(options, ProofOptions);\n    const ret = wasm.account_createSignedDocument(this.ptr, ptr0, len0, document.ptr, options.ptr);\n    return takeObject(ret);\n  }\n  /**\n  * Signs a {@link Presentation} the key specified by `fragment`.\n  * @param {string} fragment\n  * @param {Presentation} presentation\n  * @param {ProofOptions} options\n  * @returns {Promise<Presentation>}\n  */\n  createSignedPresentation(fragment, presentation, options) {\n    const ptr0 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    _assertClass(presentation, Presentation);\n    _assertClass(options, ProofOptions);\n    const ret = wasm.account_createSignedPresentation(this.ptr, ptr0, len0, presentation.ptr, options.ptr);\n    return takeObject(ret);\n  }\n  /**\n  * Signs arbitrary `data` with the key specified by `fragment`.\n  * @param {string} fragment\n  * @param {any} data\n  * @param {ProofOptions} options\n  * @returns {Promise<any>}\n  */\n  createSignedData(fragment, data, options) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      const ptr0 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      const len0 = WASM_VECTOR_LEN;\n      _assertClass(options, ProofOptions);\n      wasm.account_createSignedData(retptr, this.ptr, ptr0, len0, addBorrowedObject(data), options.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Overwrites the {@link Document} this account manages, **without doing any validation**.\n  *\n  * ### WARNING\n  *\n  * This method is dangerous and can easily corrupt the internal state,\n  * potentially making the identity unusable. Only call this if you fully\n  * understand the implications!\n  * @param {Document} document\n  * @returns {Promise<void>}\n  */\n  updateDocumentUnchecked(document) {\n    _assertClass(document, Document);\n    const ret = wasm.account_updateDocumentUnchecked(this.ptr, document.ptr);\n    return takeObject(ret);\n  }\n  /**\n  * Fetches the latest changes from the tangle and **overwrites** the local document.\n  *\n  * If a DID is managed from distributed accounts, this should be called before making changes\n  * to the identity, to avoid publishing updates that would be ignored.\n  * @returns {Promise<void>}\n  */\n  fetchDocument() {\n    const ret = wasm.account_fetchDocument(this.ptr);\n    return takeObject(ret);\n  }\n  /**\n  * If the document has a `RevocationBitmap` service identified by `fragment`,\n  * revoke all credentials with a `revocationBitmapIndex` in `credentialIndices`.\n  * @param {string} fragment\n  * @param {number | number[]} credentialIndices\n  * @returns {Promise<void>}\n  */\n  revokeCredentials(fragment, credentialIndices) {\n    const ptr0 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = wasm.account_revokeCredentials(this.ptr, ptr0, len0, addHeapObject(credentialIndices));\n    return takeObject(ret);\n  }\n  /**\n  * If the document has a `RevocationBitmap` service identified by `fragment`,\n  * unrevoke all credentials with a `revocationBitmapIndex` in `credentialIndices`.\n  * @param {string} fragment\n  * @param {number | number[]} credentialIndices\n  * @returns {Promise<void>}\n  */\n  unrevokeCredentials(fragment, credentialIndices) {\n    const ptr0 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = wasm.account_unrevokeCredentials(this.ptr, ptr0, len0, addHeapObject(credentialIndices));\n    return takeObject(ret);\n  }\n  /**\n  * Encrypts the given `plaintext` with the specified `encryption_algorithm` and `cek_algorithm`.\n  *\n  * Returns an [`EncryptedData`] instance.\n  * @param {Uint8Array} plaintext\n  * @param {Uint8Array} associated_data\n  * @param {EncryptionAlgorithm} encryption_algorithm\n  * @param {CekAlgorithm} cek_algorithm\n  * @param {Uint8Array} public_key\n  * @returns {Promise<EncryptedData>}\n  */\n  encryptData(plaintext, associated_data, encryption_algorithm, cek_algorithm, public_key) {\n    const ptr0 = passArray8ToWasm0(plaintext, wasm.__wbindgen_malloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ptr1 = passArray8ToWasm0(associated_data, wasm.__wbindgen_malloc);\n    const len1 = WASM_VECTOR_LEN;\n    _assertClass(encryption_algorithm, EncryptionAlgorithm);\n    _assertClass(cek_algorithm, CekAlgorithm);\n    const ptr2 = passArray8ToWasm0(public_key, wasm.__wbindgen_malloc);\n    const len2 = WASM_VECTOR_LEN;\n    const ret = wasm.account_encryptData(this.ptr, ptr0, len0, ptr1, len1, encryption_algorithm.ptr, cek_algorithm.ptr, ptr2, len2);\n    return takeObject(ret);\n  }\n  /**\n  * Decrypts the given `data` with the key identified by `fragment` using the given `encryption_algorithm` and\n  * `cek_algorithm`.\n  *\n  * Returns the decrypted text.\n  * @param {EncryptedData} data\n  * @param {EncryptionAlgorithm} encryption_algorithm\n  * @param {CekAlgorithm} cek_algorithm\n  * @param {string} fragment\n  * @returns {Promise<Uint8Array>}\n  */\n  decryptData(data, encryption_algorithm, cek_algorithm, fragment) {\n    _assertClass(data, EncryptedData);\n    _assertClass(encryption_algorithm, EncryptionAlgorithm);\n    _assertClass(cek_algorithm, CekAlgorithm);\n    const ptr0 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = wasm.account_decryptData(this.ptr, data.ptr, encryption_algorithm.ptr, cek_algorithm.ptr, ptr0, len0);\n    return takeObject(ret);\n  }\n  /**\n  * Sets the `alsoKnownAs` property in the DID document.\n  * @param {SetAlsoKnownAsOptions} options\n  * @returns {Promise<void>}\n  */\n  setAlsoKnownAs(options) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.account_setAlsoKnownAs(retptr, this.ptr, addBorrowedObject(options));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Deletes a verification method if the method exists.\n  * @param {DeleteMethodOptions} options\n  * @returns {Promise<void>}\n  */\n  deleteMethod(options) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.account_deleteMethod(retptr, this.ptr, addBorrowedObject(options));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Deletes a Service if it exists.\n  * @param {DeleteServiceOptions} options\n  * @returns {Promise<void>}\n  */\n  deleteService(options) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.account_deleteService(retptr, this.ptr, addBorrowedObject(options));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Sets the controllers of the DID document.\n  * @param {SetControllerOptions} options\n  * @returns {Promise<void>}\n  */\n  setController(options) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.account_setController(retptr, this.ptr, addBorrowedObject(options));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Adds a new Service to the DID Document.\n  * @param {CreateServiceOptions} options\n  * @returns {Promise<void>}\n  */\n  createService(options) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.account_createService(retptr, this.ptr, addBorrowedObject(options));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n}\nmodule.exports.Account = Account;\nconst AccountBuilderFinalization = new FinalizationRegistry(ptr => wasm.__wbg_accountbuilder_free(ptr));\n/**\n* An [`Account`] builder for easy account configuration.\n*\n* To reduce memory usage, accounts created from the same builder share the same `Storage`\n* used to store identities, and the same {@link Client} used to publish identities to the Tangle.\n*\n* The configuration on the other hand is cloned, and therefore unique for each built account.\n* This means a builder can be reconfigured in-between account creations, without affecting\n* the configuration of previously built accounts.\n*/\nclass AccountBuilder {\n  static __wrap(ptr) {\n    const obj = Object.create(AccountBuilder.prototype);\n    obj.ptr = ptr;\n    AccountBuilderFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    AccountBuilderFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_accountbuilder_free(ptr);\n  }\n  /**\n  * Creates a new `AccountBuilder`.\n  * @param {AccountBuilderOptions | undefined} options\n  */\n  constructor(options) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.accountbuilder_new(retptr, isLikeNone(options) ? 0 : addHeapObject(options));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return AccountBuilder.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Loads an existing identity with the specified `did` using the current builder configuration.\n  * The identity must exist in the configured `Storage`.\n  * @param {DID} did\n  * @returns {Promise<Account>}\n  */\n  loadIdentity(did) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      _assertClass(did, DID);\n      wasm.accountbuilder_loadIdentity(retptr, this.ptr, did.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Creates a new identity based on the builder configuration and returns\n  * an {@link Account} object to manage it.\n  *\n  * The identity is stored locally in the `Storage`. The DID network is automatically determined\n  * by the {@link Client} used to publish it.\n  *\n  * @See {@link IdentitySetup} to customize the identity creation.\n  * @param {IdentitySetup | undefined} identity_setup\n  * @returns {Promise<Account>}\n  */\n  createIdentity(identity_setup) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.accountbuilder_createIdentity(retptr, this.ptr, isLikeNone(identity_setup) ? 0 : addHeapObject(identity_setup));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n}\nmodule.exports.AccountBuilder = AccountBuilder;\nconst AgreementInfoFinalization = new FinalizationRegistry(ptr => wasm.__wbg_agreementinfo_free(ptr));\n/**\n* Agreement information used as the input for the concat KDF.\n*/\nclass AgreementInfo {\n  static __wrap(ptr) {\n    const obj = Object.create(AgreementInfo.prototype);\n    obj.ptr = ptr;\n    AgreementInfoFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  toJSON() {\n    return {};\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  [inspect.custom]() {\n    return Object.assign(Object.create({\n      constructor: this.constructor\n    }), this.toJSON());\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    AgreementInfoFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_agreementinfo_free(ptr);\n  }\n  /**\n  * Creates an `AgreementInfo` Object.\n  * @param {Uint8Array} apu\n  * @param {Uint8Array} apv\n  * @param {Uint8Array} pub_info\n  * @param {Uint8Array} priv_info\n  */\n  constructor(apu, apv, pub_info, priv_info) {\n    const ptr0 = passArray8ToWasm0(apu, wasm.__wbindgen_malloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ptr1 = passArray8ToWasm0(apv, wasm.__wbindgen_malloc);\n    const len1 = WASM_VECTOR_LEN;\n    const ptr2 = passArray8ToWasm0(pub_info, wasm.__wbindgen_malloc);\n    const len2 = WASM_VECTOR_LEN;\n    const ptr3 = passArray8ToWasm0(priv_info, wasm.__wbindgen_malloc);\n    const len3 = WASM_VECTOR_LEN;\n    const ret = wasm.agreementinfo_new(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);\n    return AgreementInfo.__wrap(ret);\n  }\n  /**\n  * Returns a copy of `apu'\n  * @returns {Uint8Array}\n  */\n  apu() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.agreementinfo_apu(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n      wasm.__wbindgen_free(r0, r1 * 1);\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns a copy of `apv'\n  * @returns {Uint8Array}\n  */\n  apv() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.agreementinfo_apv(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n      wasm.__wbindgen_free(r0, r1 * 1);\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns a copy of `pubInfo'\n  * @returns {Uint8Array}\n  */\n  pubInfo() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.agreementinfo_pubInfo(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n      wasm.__wbindgen_free(r0, r1 * 1);\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns a copy of `privInfo'\n  * @returns {Uint8Array}\n  */\n  privInfo() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.agreementinfo_privInfo(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n      wasm.__wbindgen_free(r0, r1 * 1);\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Serializes `AgreementInfo` as a JSON object.\n  * @returns {any}\n  */\n  toJSON() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.agreementinfo_toJSON(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Deserializes `AgreementInfo` from a JSON object.\n  * @param {any} json_value\n  * @returns {AgreementInfo}\n  */\n  static fromJSON(json_value) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.agreementinfo_fromJSON(retptr, addHeapObject(json_value));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return AgreementInfo.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n}\nmodule.exports.AgreementInfo = AgreementInfo;\nconst AutoSaveFinalization = new FinalizationRegistry(ptr => wasm.__wbg_autosave_free(ptr));\n/**\n*/\nclass AutoSave {\n  static __wrap(ptr) {\n    const obj = Object.create(AutoSave.prototype);\n    obj.ptr = ptr;\n    AutoSaveFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  toJSON() {\n    return {};\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  [inspect.custom]() {\n    return Object.assign(Object.create({\n      constructor: this.constructor\n    }), this.toJSON());\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    AutoSaveFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_autosave_free(ptr);\n  }\n  /**\n  * Never save.\n  * @returns {AutoSave}\n  */\n  static never() {\n    const ret = wasm.autosave_never();\n    return AutoSave.__wrap(ret);\n  }\n  /**\n  * Save after every action.\n  * @returns {AutoSave}\n  */\n  static every() {\n    const ret = wasm.autosave_every();\n    return AutoSave.__wrap(ret);\n  }\n  /**\n  * Save after every N actions.\n  * @param {number} number_of_actions\n  * @returns {AutoSave}\n  */\n  static batch(number_of_actions) {\n    const ret = wasm.autosave_batch(number_of_actions);\n    return AutoSave.__wrap(ret);\n  }\n  /**\n  * Serializes `AutoSave` as a JSON object.\n  * @returns {any}\n  */\n  toJSON() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.autosave_toJSON(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Deserializes `AutoSave` from a JSON object.\n  * @param {any} json_value\n  * @returns {AutoSave}\n  */\n  static fromJSON(json_value) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.autosave_fromJSON(retptr, addHeapObject(json_value));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return AutoSave.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n}\nmodule.exports.AutoSave = AutoSave;\nconst CekAlgorithmFinalization = new FinalizationRegistry(ptr => wasm.__wbg_cekalgorithm_free(ptr));\n/**\n* Supported algorithms used to determine and potentially encrypt the content encryption key (CEK).\n*/\nclass CekAlgorithm {\n  static __wrap(ptr) {\n    const obj = Object.create(CekAlgorithm.prototype);\n    obj.ptr = ptr;\n    CekAlgorithmFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  toJSON() {\n    return {};\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  [inspect.custom]() {\n    return Object.assign(Object.create({\n      constructor: this.constructor\n    }), this.toJSON());\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    CekAlgorithmFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_cekalgorithm_free(ptr);\n  }\n  /**\n  * Elliptic Curve Diffie-Hellman Ephemeral Static key agreement using Concat KDF.\n  * @param {AgreementInfo} agreement\n  * @returns {CekAlgorithm}\n  */\n  static EcdhEs(agreement) {\n    _assertClass(agreement, AgreementInfo);\n    const ret = wasm.cekalgorithm_EcdhEs(agreement.ptr);\n    return CekAlgorithm.__wrap(ret);\n  }\n  /**\n  * Elliptic Curve Diffie-Hellman Ephemeral Static key agreement using Concat KDF.\n  * @param {AgreementInfo} agreement\n  * @returns {CekAlgorithm}\n  */\n  static EcdhEsA256Kw(agreement) {\n    _assertClass(agreement, AgreementInfo);\n    const ret = wasm.cekalgorithm_EcdhEsA256Kw(agreement.ptr);\n    return CekAlgorithm.__wrap(ret);\n  }\n  /**\n  * Serializes `CekAlgorithm` as a JSON object.\n  * @returns {any}\n  */\n  toJSON() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.cekalgorithm_toJSON(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Deserializes `CekAlgorithm` from a JSON object.\n  * @param {any} json_value\n  * @returns {CekAlgorithm}\n  */\n  static fromJSON(json_value) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.cekalgorithm_fromJSON(retptr, addHeapObject(json_value));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return CekAlgorithm.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n}\nmodule.exports.CekAlgorithm = CekAlgorithm;\nconst ChainStateFinalization = new FinalizationRegistry(ptr => wasm.__wbg_chainstate_free(ptr));\n/**\n*/\nclass ChainState {\n  static __wrap(ptr) {\n    const obj = Object.create(ChainState.prototype);\n    obj.ptr = ptr;\n    ChainStateFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  toJSON() {\n    return {};\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  [inspect.custom]() {\n    return Object.assign(Object.create({\n      constructor: this.constructor\n    }), this.toJSON());\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    ChainStateFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_chainstate_free(ptr);\n  }\n  /**\n  * Serializes a `ChainState` object as a JSON object.\n  * @returns {any}\n  */\n  toJSON() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.chainstate_toJSON(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Deserializes a JSON object as `ChainState`.\n  * @param {any} json_value\n  * @returns {ChainState}\n  */\n  static fromJSON(json_value) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.chainstate_fromJSON(retptr, addHeapObject(json_value));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return ChainState.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n}\nmodule.exports.ChainState = ChainState;\nconst ClientFinalization = new FinalizationRegistry(ptr => wasm.__wbg_client_free(ptr));\n/**\n*/\nclass Client {\n  static __wrap(ptr) {\n    const obj = Object.create(Client.prototype);\n    obj.ptr = ptr;\n    ClientFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    ClientFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_client_free(ptr);\n  }\n  /**\n  * Creates a new `Client` with default settings.\n  */\n  constructor() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.client_new(retptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return Client.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Creates a new `Client` with the given settings.\n  * @param {IClientConfig} config\n  * @returns {Promise<Client>}\n  */\n  static fromConfig(config) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.client_fromConfig(retptr, addHeapObject(config));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns the `Client` Tangle network.\n  * @returns {Network}\n  */\n  network() {\n    const ret = wasm.client_network(this.ptr);\n    return Network.__wrap(ret);\n  }\n  /**\n  * Publishes a {@link Document} to the Tangle.\n  * @param {Document} document\n  * @returns {Promise<Receipt>}\n  */\n  publishDocument(document) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      _assertClass(document, Document);\n      wasm.client_publishDocument(retptr, this.ptr, document.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Publishes a `DiffMessage` to the Tangle.\n  *\n  * @deprecated since 0.5.0, diff chain features are slated for removal.\n  * @param {string} message_id\n  * @param {DiffMessage} diff\n  * @returns {Promise<Receipt>}\n  */\n  publishDiff(message_id, diff) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      const ptr0 = passStringToWasm0(message_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      const len0 = WASM_VECTOR_LEN;\n      _assertClass(diff, DiffMessage);\n      wasm.client_publishDiff(retptr, this.ptr, ptr0, len0, diff.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Publishes arbitrary JSON data to the specified index on the Tangle.\n  * @param {string} index\n  * @param {any} data\n  * @returns {Promise<Receipt>}\n  */\n  publishJSON(index, data) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      const ptr0 = passStringToWasm0(index, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      const len0 = WASM_VECTOR_LEN;\n      wasm.client_publishJSON(retptr, this.ptr, ptr0, len0, addBorrowedObject(data));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Publishes arbitrary JSON data to the specified index on the Tangle.\n  * Retries (promotes or reattaches) the message until it’s included (referenced by a milestone).\n  * Default interval is 5 seconds and max attempts is 40.\n  * @param {string} index\n  * @param {any} data\n  * @param {number | undefined} interval\n  * @param {number | undefined} max_attempts\n  * @returns {Promise<any>}\n  */\n  publishJsonWithRetry(index, data, interval, max_attempts) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      const ptr0 = passStringToWasm0(index, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      const len0 = WASM_VECTOR_LEN;\n      wasm.client_publishJsonWithRetry(retptr, this.ptr, ptr0, len0, addBorrowedObject(data), !isLikeNone(interval), isLikeNone(interval) ? 0 : interval, !isLikeNone(max_attempts), isLikeNone(max_attempts) ? 0 : max_attempts);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Checks if a message is confirmed by a milestone.\n  * @param {string} messageId\n  * @returns {Promise<boolean>}\n  */\n  isMessageIncluded(messageId) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      const ptr0 = passStringToWasm0(messageId, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      const len0 = WASM_VECTOR_LEN;\n      wasm.client_isMessageIncluded(retptr, this.ptr, ptr0, len0);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Fetch the DID document specified by the given `DID`.\n  * @param {DID | string} did\n  * @returns {Promise<ResolvedDocument>}\n  */\n  resolve(did) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.client_resolve(retptr, this.ptr, addHeapObject(did));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns the message history of the given DID.\n  * @param {DID | string} did\n  * @returns {Promise<DocumentHistory>}\n  */\n  resolveHistory(did) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.client_resolveHistory(retptr, this.ptr, addHeapObject(did));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns the `DiffChainHistory` of a diff chain starting from a document on the\n  * integration chain.\n  *\n  * NOTE: the document must have been published to the tangle and have a valid message id and\n  * capability invocation method.\n  *\n  * @deprecated since 0.5.0, diff chain features are slated for removal.\n  * @param {ResolvedDocument} document\n  * @returns {Promise<DiffChainHistory>}\n  */\n  resolveDiffHistory(document) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      _assertClass(document, ResolvedDocument);\n      wasm.client_resolveDiffHistory(retptr, this.ptr, document.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n}\nmodule.exports.Client = Client;\nconst CredentialFinalization = new FinalizationRegistry(ptr => wasm.__wbg_credential_free(ptr));\n/**\n*/\nclass Credential {\n  static __wrap(ptr) {\n    const obj = Object.create(Credential.prototype);\n    obj.ptr = ptr;\n    CredentialFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  toJSON() {\n    return {};\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  [inspect.custom]() {\n    return Object.assign(Object.create({\n      constructor: this.constructor\n    }), this.toJSON());\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    CredentialFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_credential_free(ptr);\n  }\n  /**\n  * Returns the base JSON-LD context.\n  * @returns {string}\n  */\n  static BaseContext() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.credential_BaseContext(retptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      var r3 = getInt32Memory0()[retptr / 4 + 3];\n      var ptr0 = r0;\n      var len0 = r1;\n      if (r3) {\n        ptr0 = 0;\n        len0 = 0;\n        throw takeObject(r2);\n      }\n      return getStringFromWasm0(ptr0, len0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      wasm.__wbindgen_free(ptr0, len0);\n    }\n  }\n  /**\n  * Returns the base type.\n  * @returns {string}\n  */\n  static BaseType() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.credential_BaseType(retptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * Constructs a new `Credential`.\n  * @param {ICredential} values\n  */\n  constructor(values) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.credential_new(retptr, addHeapObject(values));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return Credential.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns a copy of the JSON-LD context(s) applicable to the `Credential`.\n  * @returns {Array<string | Record<string, any>>}\n  */\n  context() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.credential_context(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns a copy of the unique `URI` identifying the `Credential` .\n  * @returns {string | undefined}\n  */\n  id() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.credential_id(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      let v0;\n      if (r0 !== 0) {\n        v0 = getStringFromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n      }\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns a copy of the URIs defining the type of the `Credential`.\n  * @returns {Array<string>}\n  */\n  type() {\n    const ret = wasm.credential_type(this.ptr);\n    return takeObject(ret);\n  }\n  /**\n  * Returns a copy of the `Credential` subject(s).\n  * @returns {Array<Subject>}\n  */\n  credentialSubject() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.credential_credentialSubject(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns a copy of the issuer of the `Credential`.\n  * @returns {string | Issuer}\n  */\n  issuer() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.credential_issuer(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns a copy of the timestamp of when the `Credential` becomes valid.\n  * @returns {Timestamp}\n  */\n  issuanceDate() {\n    const ret = wasm.credential_issuanceDate(this.ptr);\n    return Timestamp.__wrap(ret);\n  }\n  /**\n  * Returns a copy of the timestamp of when the `Credential` should no longer be considered valid.\n  * @returns {Timestamp | undefined}\n  */\n  expirationDate() {\n    const ret = wasm.credential_expirationDate(this.ptr);\n    return ret === 0 ? undefined : Timestamp.__wrap(ret);\n  }\n  /**\n  * Returns a copy of the information used to determine the current status of the `Credential`.\n  * @returns {Array<Status>}\n  */\n  credentialStatus() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.credential_credentialStatus(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns a copy of the information used to assist in the enforcement of a specific `Credential` structure.\n  * @returns {Array<Schema>}\n  */\n  credentialSchema() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.credential_credentialSchema(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns a copy of the service(s) used to refresh an expired `Credential`.\n  * @returns {Array<RefreshService>}\n  */\n  refreshService() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.credential_refreshService(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns a copy of the terms-of-use specified by the `Credential` issuer.\n  * @returns {Array<Policy>}\n  */\n  termsOfUse() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.credential_termsOfUse(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns a copy of the human-readable evidence used to support the claims within the `Credential`.\n  * @returns {Array<Evidence>}\n  */\n  evidence() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.credential_evidence(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns whether or not the `Credential` must only be contained within a {@link Presentation}\n  * with a proof issued from the `Credential` subject.\n  * @returns {boolean | undefined}\n  */\n  nonTransferable() {\n    const ret = wasm.credential_nonTransferable(this.ptr);\n    return ret === 0xFFFFFF ? undefined : ret !== 0;\n  }\n  /**\n  * Returns a copy of the proof used to verify the `Credential`.\n  * @returns {Proof | undefined}\n  */\n  proof() {\n    const ret = wasm.credential_proof(this.ptr);\n    return ret === 0 ? undefined : Proof.__wrap(ret);\n  }\n  /**\n  * Returns a copy of the miscellaneous properties on the `Credential`.\n  * @returns {Map<string, any>}\n  */\n  properties() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.credential_properties(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Serializes a `Credential` to a JSON object.\n  * @returns {any}\n  */\n  toJSON() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.credential_toJSON(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Deserializes a `Credential` from a JSON object.\n  * @param {any} json\n  * @returns {Credential}\n  */\n  static fromJSON(json) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.credential_fromJSON(retptr, addBorrowedObject(json));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return Credential.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Deep clones the object.\n  * @returns {Credential}\n  */\n  clone() {\n    const ret = wasm.credential_clone(this.ptr);\n    return Credential.__wrap(ret);\n  }\n}\nmodule.exports.Credential = Credential;\nconst CredentialValidationOptionsFinalization = new FinalizationRegistry(ptr => wasm.__wbg_credentialvalidationoptions_free(ptr));\n/**\n* Options to declare validation criteria when validating credentials.\n*/\nclass CredentialValidationOptions {\n  static __wrap(ptr) {\n    const obj = Object.create(CredentialValidationOptions.prototype);\n    obj.ptr = ptr;\n    CredentialValidationOptionsFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    CredentialValidationOptionsFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_credentialvalidationoptions_free(ptr);\n  }\n  /**\n  * Creates a new `CredentialValidationOptions` from the given fields.\n  *\n  * Throws an error if any of the options are invalid.\n  * @param {ICredentialValidationOptions} options\n  */\n  constructor(options) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.credentialvalidationoptions_new(retptr, addHeapObject(options));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return CredentialValidationOptions.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Creates a new `CredentialValidationOptions` with defaults.\n  * @returns {CredentialValidationOptions}\n  */\n  static default() {\n    const ret = wasm.credentialvalidationoptions_default();\n    return CredentialValidationOptions.__wrap(ret);\n  }\n  /**\n  * Serializes a `CredentialValidationOptions` as a JSON object.\n  * @returns {any}\n  */\n  toJSON() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.credentialvalidationoptions_toJSON(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Deserializes a `CredentialValidationOptions` from a JSON object.\n  * @param {any} json\n  * @returns {CredentialValidationOptions}\n  */\n  static fromJSON(json) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.credentialvalidationoptions_fromJSON(retptr, addBorrowedObject(json));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return CredentialValidationOptions.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Deep clones the object.\n  * @returns {CredentialValidationOptions}\n  */\n  clone() {\n    const ret = wasm.credentialvalidationoptions_clone(this.ptr);\n    return CredentialValidationOptions.__wrap(ret);\n  }\n}\nmodule.exports.CredentialValidationOptions = CredentialValidationOptions;\nconst CredentialValidatorFinalization = new FinalizationRegistry(ptr => wasm.__wbg_credentialvalidator_free(ptr));\n/**\n*/\nclass CredentialValidator {\n  toJSON() {\n    return {};\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  [inspect.custom]() {\n    return Object.assign(Object.create({\n      constructor: this.constructor\n    }), this.toJSON());\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    CredentialValidatorFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_credentialvalidator_free(ptr);\n  }\n  /**\n  * Validates a `Credential`.\n  *\n  * The following properties are validated according to `options`:\n  * - the issuer's signature,\n  * - the expiration date,\n  * - the issuance date,\n  * - the semantic structure.\n  *\n  * ### Warning\n  * The lack of an error returned from this method is in of itself not enough to conclude that the credential can be\n  * trusted. This section contains more information on additional checks that should be carried out before and after\n  * calling this method.\n  *\n  * #### The state of the issuer's DID Document\n  * The caller must ensure that `issuer` represents an up-to-date DID Document. The convenience method\n  * `Resolver::resolveCredentialIssuer` can help extract the latest available state of the issuer's DID Document.\n  *\n  * #### Properties that are not validated\n  *  There are many properties defined in [The Verifiable Credentials Data Model](https://www.w3.org/TR/vc-data-model/) that are **not** validated, such as:\n  * `credentialStatus`, `type`, `credentialSchema`, `refreshService`, **and more**.\n  * These should be manually checked after validation, according to your requirements.\n  *\n  * ### Errors\n  * An error is returned whenever a validated condition is not satisfied.\n  * @param {Credential} credential\n  * @param {Document | ResolvedDocument} issuer\n  * @param {CredentialValidationOptions} options\n  * @param {number} fail_fast\n  */\n  static validate(credential, issuer, options, fail_fast) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      _assertClass(credential, Credential);\n      _assertClass(options, CredentialValidationOptions);\n      wasm.credentialvalidator_validate(retptr, credential.ptr, addBorrowedObject(issuer), options.ptr, fail_fast);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      if (r1) {\n        throw takeObject(r0);\n      }\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Validates the semantic structure of the `Credential`.\n  *\n  * ### Warning\n  * This does not validate against the credential's schema nor the structure of the subject claims.\n  * @param {Credential} credential\n  */\n  static checkStructure(credential) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      _assertClass(credential, Credential);\n      wasm.credentialvalidator_checkStructure(retptr, credential.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      if (r1) {\n        throw takeObject(r0);\n      }\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Validate that the credential expires on or after the specified timestamp.\n  * @param {Credential} credential\n  * @param {Timestamp} timestamp\n  */\n  static checkExpiresOnOrAfter(credential, timestamp) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      _assertClass(credential, Credential);\n      _assertClass(timestamp, Timestamp);\n      wasm.credentialvalidator_checkExpiresOnOrAfter(retptr, credential.ptr, timestamp.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      if (r1) {\n        throw takeObject(r0);\n      }\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Validate that the credential is issued on or before the specified timestamp.\n  * @param {Credential} credential\n  * @param {Timestamp} timestamp\n  */\n  static checkIssuedOnOrBefore(credential, timestamp) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      _assertClass(credential, Credential);\n      _assertClass(timestamp, Timestamp);\n      wasm.credentialvalidator_checkIssuedOnOrBefore(retptr, credential.ptr, timestamp.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      if (r1) {\n        throw takeObject(r0);\n      }\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Verify the signature using the DID Document of a trusted issuer.\n  *\n  * # Warning\n  * The caller must ensure that the DID Documents of the trusted issuers are up-to-date.\n  * ### Errors\n  * This method immediately returns an error if\n  * the credential issuer' url cannot be parsed to a DID belonging to one of the trusted issuers. Otherwise an attempt\n  * to verify the credential's signature will be made and an error is returned upon failure.\n  * @param {Credential} credential\n  * @param {Array<Document> | Array<ResolvedDocument>} trusted_issuers\n  * @param {VerifierOptions} options\n  */\n  static verifySignature(credential, trusted_issuers, options) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      _assertClass(credential, Credential);\n      _assertClass(options, VerifierOptions);\n      wasm.credentialvalidator_verifySignature(retptr, credential.ptr, addBorrowedObject(trusted_issuers), options.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      if (r1) {\n        throw takeObject(r0);\n      }\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Validate that the relationship between the `holder` and the credential subjects is in accordance with\n  * `relationship`. The `holder_url` parameter is expected to be the URL of the holder.\n  * @param {Credential} credential\n  * @param {string} holder_url\n  * @param {number} relationship\n  */\n  static check_subject_holder_relationship(credential, holder_url, relationship) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      _assertClass(credential, Credential);\n      const ptr0 = passStringToWasm0(holder_url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      const len0 = WASM_VECTOR_LEN;\n      wasm.credentialvalidator_check_subject_holder_relationship(retptr, credential.ptr, ptr0, len0, relationship);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      if (r1) {\n        throw takeObject(r0);\n      }\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Checks whether the credential status has been revoked.\n  *\n  * Only supports `BitmapRevocation2022`.\n  * @param {Credential} credential\n  * @param {Array<Document> | Array<ResolvedDocument>} trustedIssuers\n  * @param {number} statusCheck\n  */\n  static checkStatus(credential, trustedIssuers, statusCheck) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      _assertClass(credential, Credential);\n      wasm.credentialvalidator_checkStatus(retptr, credential.ptr, addBorrowedObject(trustedIssuers), statusCheck);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      if (r1) {\n        throw takeObject(r0);\n      }\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n}\nmodule.exports.CredentialValidator = CredentialValidator;\nconst DIDFinalization = new FinalizationRegistry(ptr => wasm.__wbg_did_free(ptr));\n/**\n* @typicalname did\n*/\nclass DID {\n  static __wrap(ptr) {\n    const obj = Object.create(DID.prototype);\n    obj.ptr = ptr;\n    DIDFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  toJSON() {\n    return {\n      networkName: this.networkName\n    };\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  [inspect.custom]() {\n    return Object.assign(Object.create({\n      constructor: this.constructor\n    }), this.toJSON());\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    DIDFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_did_free(ptr);\n  }\n  /**\n  * Creates a new `DID` from a public key.\n  * @param {Uint8Array} public_key\n  * @param {string | undefined} network\n  */\n  constructor(public_key, network) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      const ptr0 = passArray8ToWasm0(public_key, wasm.__wbindgen_malloc);\n      const len0 = WASM_VECTOR_LEN;\n      var ptr1 = isLikeNone(network) ? 0 : passStringToWasm0(network, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len1 = WASM_VECTOR_LEN;\n      wasm.did_new(retptr, ptr0, len0, ptr1, len1);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return DID.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Parses a `DID` from the input string.\n  * @param {string} input\n  * @returns {DID}\n  */\n  static parse(input) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      const ptr0 = passStringToWasm0(input, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      const len0 = WASM_VECTOR_LEN;\n      wasm.did_parse(retptr, ptr0, len0);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return DID.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns the IOTA tangle network of the `DID`.\n  * @returns {Network}\n  */\n  network() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.did_network(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return Network.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns the IOTA tangle network of the `DID`.\n  */\n  get networkName() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.did_network_name(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * Returns a copy of the unique tag of the `DID`.\n  * @returns {string}\n  */\n  tag() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.did_tag(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * Construct a new `DIDUrl` by joining with a relative DID Url string.\n  * @param {string} segment\n  * @returns {DIDUrl}\n  */\n  join(segment) {\n    try {\n      const ptr = this.__destroy_into_raw();\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      const ptr0 = passStringToWasm0(segment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      const len0 = WASM_VECTOR_LEN;\n      wasm.did_join(retptr, ptr, ptr0, len0);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return DIDUrl.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Clones the `DID` into a `DIDUrl`.\n  * @returns {DIDUrl}\n  */\n  toUrl() {\n    const ret = wasm.did_toUrl(this.ptr);\n    return DIDUrl.__wrap(ret);\n  }\n  /**\n  * Converts the `DID` into a `DIDUrl`.\n  * @returns {DIDUrl}\n  */\n  intoUrl() {\n    const ptr = this.__destroy_into_raw();\n    const ret = wasm.did_intoUrl(ptr);\n    return DIDUrl.__wrap(ret);\n  }\n  /**\n  * Returns the `DID` as a string.\n  * @returns {string}\n  */\n  toString() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.did_toString(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * Deserializes a JSON object as `DID`.\n  * @param {any} json_value\n  * @returns {DID}\n  */\n  static fromJSON(json_value) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.did_fromJSON(retptr, addHeapObject(json_value));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return DID.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Serializes a `DID` as a JSON object.\n  * @returns {any}\n  */\n  toJSON() {\n    const ret = wasm.did_toJSON(this.ptr);\n    return takeObject(ret);\n  }\n  /**\n  * Deep clones the object.\n  * @returns {DID}\n  */\n  clone() {\n    const ret = wasm.did_clone(this.ptr);\n    return DID.__wrap(ret);\n  }\n}\nmodule.exports.DID = DID;\nconst DIDUrlFinalization = new FinalizationRegistry(ptr => wasm.__wbg_didurl_free(ptr));\n/**\n* @typicalname didUrl\n*/\nclass DIDUrl {\n  static __wrap(ptr) {\n    const obj = Object.create(DIDUrl.prototype);\n    obj.ptr = ptr;\n    DIDUrlFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  toJSON() {\n    return {};\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  [inspect.custom]() {\n    return Object.assign(Object.create({\n      constructor: this.constructor\n    }), this.toJSON());\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    DIDUrlFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_didurl_free(ptr);\n  }\n  /**\n  * Parses a `DIDUrl` from the input string.\n  * @param {string} input\n  * @returns {DIDUrl}\n  */\n  static parse(input) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      const ptr0 = passStringToWasm0(input, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      const len0 = WASM_VECTOR_LEN;\n      wasm.didurl_parse(retptr, ptr0, len0);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return DIDUrl.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Return a copy of the `DID` section of the `DIDUrl`.\n  * @returns {DID}\n  */\n  did() {\n    const ret = wasm.didurl_did(this.ptr);\n    return DID.__wrap(ret);\n  }\n  /**\n  * Return a copy of the relative DID Url as a string, including only the path, query, and fragment.\n  * @returns {string}\n  */\n  urlStr() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.didurl_urlStr(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * Returns a copy of the `DIDUrl` method fragment, if any. Excludes the leading '#'.\n  * @returns {string | undefined}\n  */\n  fragment() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.didurl_fragment(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      let v0;\n      if (r0 !== 0) {\n        v0 = getStringFromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n      }\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Sets the `fragment` component of the `DIDUrl`.\n  * @param {string | undefined} value\n  */\n  setFragment(value) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      var ptr0 = isLikeNone(value) ? 0 : passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.didurl_setFragment(retptr, this.ptr, ptr0, len0);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      if (r1) {\n        throw takeObject(r0);\n      }\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns a copy of the `DIDUrl` path.\n  * @returns {string | undefined}\n  */\n  path() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.didurl_path(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      let v0;\n      if (r0 !== 0) {\n        v0 = getStringFromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n      }\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Sets the `path` component of the `DIDUrl`.\n  * @param {string | undefined} value\n  */\n  setPath(value) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      var ptr0 = isLikeNone(value) ? 0 : passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.didurl_setPath(retptr, this.ptr, ptr0, len0);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      if (r1) {\n        throw takeObject(r0);\n      }\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns a copy of the `DIDUrl` method query, if any. Excludes the leading '?'.\n  * @returns {string | undefined}\n  */\n  query() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.didurl_query(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      let v0;\n      if (r0 !== 0) {\n        v0 = getStringFromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n      }\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Sets the `query` component of the `DIDUrl`.\n  * @param {string | undefined} value\n  */\n  setQuery(value) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      var ptr0 = isLikeNone(value) ? 0 : passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.didurl_setQuery(retptr, this.ptr, ptr0, len0);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      if (r1) {\n        throw takeObject(r0);\n      }\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Append a string representing a path, query, and/or fragment, returning a new `DIDUrl`.\n  *\n  * Must begin with a valid delimiter character: '/', '?', '#'. Overwrites the existing URL\n  * segment and any following segments in order of path, query, then fragment.\n  *\n  * I.e.\n  * - joining a path will clear the query and fragment.\n  * - joining a query will clear the fragment.\n  * - joining a fragment will only overwrite the fragment.\n  * @param {string} segment\n  * @returns {DIDUrl}\n  */\n  join(segment) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      const ptr0 = passStringToWasm0(segment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      const len0 = WASM_VECTOR_LEN;\n      wasm.didurl_join(retptr, this.ptr, ptr0, len0);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return DIDUrl.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns the `DIDUrl` as a string.\n  * @returns {string}\n  */\n  toString() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.didurl_toString(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * Serializes a `DIDUrl` as a JSON object.\n  * @returns {any}\n  */\n  toJSON() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.didurl_toJSON(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Deep clones the object.\n  * @returns {DIDUrl}\n  */\n  clone() {\n    const ret = wasm.didurl_clone(this.ptr);\n    return DIDUrl.__wrap(ret);\n  }\n}\nmodule.exports.DIDUrl = DIDUrl;\nconst DiffChainHistoryFinalization = new FinalizationRegistry(ptr => wasm.__wbg_diffchainhistory_free(ptr));\n/**\n* @deprecated since 0.5.0, diff chain features are slated for removal.\n*/\nclass DiffChainHistory {\n  static __wrap(ptr) {\n    const obj = Object.create(DiffChainHistory.prototype);\n    obj.ptr = ptr;\n    DiffChainHistoryFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  toJSON() {\n    return {};\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  [inspect.custom]() {\n    return Object.assign(Object.create({\n      constructor: this.constructor\n    }), this.toJSON());\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    DiffChainHistoryFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_diffchainhistory_free(ptr);\n  }\n  /**\n  * Returns an `Array` of the diff chain `DiffMessages`.\n  *\n  * NOTE: this clones the field.\n  * @returns {Array<DiffMessage>}\n  */\n  chainData() {\n    const ret = wasm.diffchainhistory_chainData(this.ptr);\n    return takeObject(ret);\n  }\n  /**\n  * Returns an `Array` of `MessageIds` as strings.\n  *\n  * NOTE: this clones the field.\n  * @returns {Array<string>}\n  */\n  spam() {\n    const ret = wasm.diffchainhistory_spam(this.ptr);\n    return takeObject(ret);\n  }\n  /**\n  * Serializes as a JSON object.\n  * @returns {any}\n  */\n  toJSON() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.diffchainhistory_toJSON(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Deserializes from a JSON object.\n  * @param {any} json\n  * @returns {DiffChainHistory}\n  */\n  static fromJSON(json) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.diffchainhistory_fromJSON(retptr, addBorrowedObject(json));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return DiffChainHistory.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n}\nmodule.exports.DiffChainHistory = DiffChainHistory;\nconst DiffMessageFinalization = new FinalizationRegistry(ptr => wasm.__wbg_diffmessage_free(ptr));\n/**\n* Defines the difference between two DID `Document`s' JSON representations.\n*\n* @deprecated since 0.5.0, diff chain features are slated for removal.\n*/\nclass DiffMessage {\n  static __wrap(ptr) {\n    const obj = Object.create(DiffMessage.prototype);\n    obj.ptr = ptr;\n    DiffMessageFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  toJSON() {\n    return {};\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  [inspect.custom]() {\n    return Object.assign(Object.create({\n      constructor: this.constructor\n    }), this.toJSON());\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    DiffMessageFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_diffmessage_free(ptr);\n  }\n  /**\n  * Returns the DID of the associated DID Document.\n  *\n  * NOTE: clones the data.\n  *\n  * @deprecated since 0.5.0, diff chain features are slated for removal.\n  * @returns {DID}\n  */\n  id() {\n    const ret = wasm.diffmessage_id(this.ptr);\n    return DID.__wrap(ret);\n  }\n  /**\n  * Returns a copy of the DID of the associated DID Document.\n  *\n  * @deprecated since 0.5.0, diff chain features are slated for removal.\n  * @returns {DID}\n  */\n  did() {\n    const ret = wasm.diffmessage_did(this.ptr);\n    return DID.__wrap(ret);\n  }\n  /**\n  * Returns a copy of the raw contents of the DID Document diff as a JSON string.\n  *\n  * @deprecated since 0.5.0, diff chain features are slated for removal.\n  * @returns {string}\n  */\n  diff() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.diffmessage_diff(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      var r3 = getInt32Memory0()[retptr / 4 + 3];\n      var ptr0 = r0;\n      var len0 = r1;\n      if (r3) {\n        ptr0 = 0;\n        len0 = 0;\n        throw takeObject(r2);\n      }\n      return getStringFromWasm0(ptr0, len0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      wasm.__wbindgen_free(ptr0, len0);\n    }\n  }\n  /**\n  * Returns a copy of the message_id of the DID Document diff.\n  *\n  * @deprecated since 0.5.0, diff chain features are slated for removal.\n  * @returns {string}\n  */\n  messageId() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.diffmessage_messageId(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * Sets the message_id of the DID Document diff.\n  *\n  * @deprecated since 0.5.0, diff chain features are slated for removal.\n  * @param {string} message_id\n  */\n  setMessageId(message_id) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      const ptr0 = passStringToWasm0(message_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      const len0 = WASM_VECTOR_LEN;\n      wasm.diffmessage_setMessageId(retptr, this.ptr, ptr0, len0);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      if (r1) {\n        throw takeObject(r0);\n      }\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns a copy of the Tangle message id of the previous DID Document diff.\n  *\n  * @deprecated since 0.5.0, diff chain features are slated for removal.\n  * @returns {string}\n  */\n  previousMessageId() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.diffmessage_previousMessageId(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * Sets the Tangle message id of the previous DID Document diff.\n  *\n  * @deprecated since 0.5.0, diff chain features are slated for removal.\n  * @param {string} message_id\n  */\n  setPreviousMessageId(message_id) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      const ptr0 = passStringToWasm0(message_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      const len0 = WASM_VECTOR_LEN;\n      wasm.diffmessage_setPreviousMessageId(retptr, this.ptr, ptr0, len0);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      if (r1) {\n        throw takeObject(r0);\n      }\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns a copy of the proof.\n  *\n  * @deprecated since 0.5.0, diff chain features are slated for removal.\n  * @returns {Proof | undefined}\n  */\n  proof() {\n    const ret = wasm.diffmessage_proof(this.ptr);\n    return ret === 0 ? undefined : Proof.__wrap(ret);\n  }\n  /**\n  * Returns a new DID Document which is the result of merging `self`\n  * with the given Document.\n  *\n  * @deprecated since 0.5.0, diff chain features are slated for removal.\n  * @param {Document} document\n  * @returns {Document}\n  */\n  merge(document) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      _assertClass(document, Document);\n      wasm.diffmessage_merge(retptr, this.ptr, document.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return Document.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Serializes a `DiffMessage` as a JSON object.\n  *\n  * @deprecated since 0.5.0, diff chain features are slated for removal.\n  * @returns {any}\n  */\n  toJSON() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.diffmessage_toJSON(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Deserializes a `DiffMessage` from a JSON object.\n  *\n  * @deprecated since 0.5.0, diff chain features are slated for removal.\n  * @param {any} json\n  * @returns {DiffMessage}\n  */\n  static fromJSON(json) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.diffmessage_fromJSON(retptr, addBorrowedObject(json));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return DiffMessage.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Deep clones the object.\n  * @returns {DiffMessage}\n  */\n  clone() {\n    const ret = wasm.diffmessage_clone(this.ptr);\n    return DiffMessage.__wrap(ret);\n  }\n}\nmodule.exports.DiffMessage = DiffMessage;\nconst DocumentFinalization = new FinalizationRegistry(ptr => wasm.__wbg_document_free(ptr));\n/**\n*/\nclass Document {\n  static __wrap(ptr) {\n    const obj = Object.create(Document.prototype);\n    obj.ptr = ptr;\n    DocumentFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  toJSON() {\n    return {};\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  [inspect.custom]() {\n    return Object.assign(Object.create({\n      constructor: this.constructor\n    }), this.toJSON());\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    DocumentFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_document_free(ptr);\n  }\n  /**\n  * Creates a new DID Document from the given `KeyPair`, network, and verification method\n  * fragment name.\n  *\n  * The DID Document will be pre-populated with a single verification method\n  * derived from the provided `KeyPair` embedded as a capability invocation\n  * verification relationship. This method will have the DID URL fragment\n  * `#sign-0` by default and can be easily retrieved with `Document::defaultSigningMethod`.\n  *\n  * NOTE: the generated document is unsigned, see `Document::signSelf`.\n  *\n  * Arguments:\n  *\n  * * keypair: the initial verification method is derived from the public key with this keypair.\n  * * network: Tangle network to use for the DID, default `Network::mainnet`.\n  * * fragment: name of the initial verification method, default \"sign-0\".\n  * @param {KeyPair} keypair\n  * @param {string | undefined} network\n  * @param {string | undefined} fragment\n  */\n  constructor(keypair, network, fragment) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      _assertClass(keypair, KeyPair);\n      var ptr0 = isLikeNone(network) ? 0 : passStringToWasm0(network, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ptr1 = isLikeNone(fragment) ? 0 : passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len1 = WASM_VECTOR_LEN;\n      wasm.document_new(retptr, keypair.ptr, ptr0, len0, ptr1, len1);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return Document.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Creates a new DID Document from the given `VerificationMethod`.\n  *\n  * NOTE: the generated document is unsigned, see `Document::signSelf`.\n  * @param {VerificationMethod} method\n  * @returns {Document}\n  */\n  static fromVerificationMethod(method) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      _assertClass(method, VerificationMethod);\n      wasm.document_fromVerificationMethod(retptr, method.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return Document.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns whether the given {@link MethodType} can be used to sign document updates.\n  * @param {MethodType} method_type\n  * @returns {boolean}\n  */\n  static isSigningMethodType(method_type) {\n    _assertClass(method_type, MethodType);\n    const ret = wasm.document_isSigningMethodType(method_type.ptr);\n    return ret !== 0;\n  }\n  /**\n  * Returns a copy of the DID Document `id`.\n  * @returns {DID}\n  */\n  id() {\n    const ret = wasm.document_id(this.ptr);\n    return DID.__wrap(ret);\n  }\n  /**\n  * Sets the controllers of the DID Document.\n  *\n  * Note: Duplicates will be ignored.\n  * Use `null` to remove all controllers.\n  * @param {DID | DID[] | null} controllers\n  */\n  setController(controllers) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.document_setController(retptr, this.ptr, addBorrowedObject(controllers));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      if (r1) {\n        throw takeObject(r0);\n      }\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Returns a list of document controllers.\n  * @returns {DID[]}\n  */\n  controller() {\n    const ret = wasm.document_controller(this.ptr);\n    return takeObject(ret);\n  }\n  /**\n  * Sets the `alsoKnownAs` property in the DID document.\n  * @param {string | string[] | null} urls\n  */\n  setAlsoKnownAs(urls) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.document_setAlsoKnownAs(retptr, this.ptr, addBorrowedObject(urls));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      if (r1) {\n        throw takeObject(r0);\n      }\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Returns a set of the document's `alsoKnownAs`.\n  * @returns {Array<string>}\n  */\n  alsoKnownAs() {\n    const ret = wasm.document_alsoKnownAs(this.ptr);\n    return takeObject(ret);\n  }\n  /**\n  * Adds a custom property to the DID Document.\n  * If the value is set to `null`, the custom property will be removed.\n  *\n  * ### WARNING\n  * This method can overwrite existing properties like `id` and result in an invalid document.\n  * @param {string} key\n  * @param {any} value\n  */\n  setPropertyUnchecked(key, value) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      const ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      const len0 = WASM_VECTOR_LEN;\n      wasm.document_setPropertyUnchecked(retptr, this.ptr, ptr0, len0, addBorrowedObject(value));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      if (r1) {\n        throw takeObject(r0);\n      }\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Returns a copy of the custom DID Document properties.\n  * @returns {Map<string, any>}\n  */\n  properties() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.document_properties(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Return a set of all {@link Service Services} in the document.\n  * @returns {Service[]}\n  */\n  service() {\n    const ret = wasm.document_service(this.ptr);\n    return takeObject(ret);\n  }\n  /**\n  * Add a new {@link Service} to the document.\n  *\n  * Returns `true` if the service was added.\n  * @param {Service} service\n  * @returns {boolean}\n  */\n  insertService(service) {\n    _assertClass(service, Service);\n    const ret = wasm.document_insertService(this.ptr, service.ptr);\n    return ret !== 0;\n  }\n  /**\n  * Remove a {@link Service} identified by the given {@link DIDUrl} from the document.\n  *\n  * Returns `true` if a service was removed.\n  * @param {DIDUrl} did\n  * @returns {boolean}\n  */\n  removeService(did) {\n    _assertClass(did, DIDUrl);\n    const ret = wasm.document_removeService(this.ptr, did.ptr);\n    return ret !== 0;\n  }\n  /**\n  * Returns a list of all {@link VerificationMethod} in the DID Document.\n  * @returns {VerificationMethod[]}\n  */\n  methods() {\n    const ret = wasm.document_methods(this.ptr);\n    return takeObject(ret);\n  }\n  /**\n  * Adds a new Verification Method to the DID Document.\n  * @param {VerificationMethod} method\n  * @param {MethodScope} scope\n  */\n  insertMethod(method, scope) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      _assertClass(method, VerificationMethod);\n      _assertClass(scope, MethodScope);\n      wasm.document_insertMethod(retptr, this.ptr, method.ptr, scope.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      if (r1) {\n        throw takeObject(r0);\n      }\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Removes all references to the specified Verification Method.\n  * @param {DIDUrl} did\n  */\n  removeMethod(did) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      _assertClass(did, DIDUrl);\n      wasm.document_removeMethod(retptr, this.ptr, did.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      if (r1) {\n        throw takeObject(r0);\n      }\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns a copy of the first `VerificationMethod` with a capability invocation relationship\n  * capable of signing this DID document.\n  *\n  * Throws an error if no signing method is present.\n  * @returns {VerificationMethod}\n  */\n  defaultSigningMethod() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.document_defaultSigningMethod(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return VerificationMethod.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns a copy of the first `VerificationMethod` with an `id` property\n  * matching the provided `query`.\n  *\n  * Throws an error if the method is not found.\n  * @param {DIDUrl | string} query\n  * @param {MethodScope | undefined} scope\n  * @returns {VerificationMethod | undefined}\n  */\n  resolveMethod(query, scope) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.document_resolveMethod(retptr, this.ptr, addBorrowedObject(query), isLikeNone(scope) ? 0 : addHeapObject(scope));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return r0 === 0 ? undefined : VerificationMethod.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Attempts to resolve the given method query into a method capable of signing a document update.\n  * @param {DIDUrl | string} query\n  * @returns {VerificationMethod}\n  */\n  resolveSigningMethod(query) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.document_resolveSigningMethod(retptr, this.ptr, addBorrowedObject(query));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return VerificationMethod.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Attaches the relationship to the given method, if the method exists.\n  *\n  * Note: The method needs to be in the set of verification methods,\n  * so it cannot be an embedded one.\n  * @param {DIDUrl} did_url\n  * @param {number} relationship\n  * @returns {boolean}\n  */\n  attachMethodRelationship(did_url, relationship) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      _assertClass(did_url, DIDUrl);\n      wasm.document_attachMethodRelationship(retptr, this.ptr, did_url.ptr, relationship);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return r0 !== 0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Detaches the given relationship from the given method, if the method exists.\n  * @param {DIDUrl} did_url\n  * @param {number} relationship\n  * @returns {boolean}\n  */\n  detachMethodRelationship(did_url, relationship) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      _assertClass(did_url, DIDUrl);\n      wasm.document_detachMethodRelationship(retptr, this.ptr, did_url.ptr, relationship);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return r0 !== 0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Signs the DID document with the verification method specified by `method_query`.\n  * The `method_query` may be the full `DIDUrl` of the method or just its fragment,\n  * e.g. \"#sign-0\".\n  *\n  * NOTE: does not validate whether the private key of the given `key_pair` corresponds to the\n  * verification method. See `Document::verifySelfSigned`.\n  * @param {KeyPair} key_pair\n  * @param {DIDUrl | string} method_query\n  */\n  signSelf(key_pair, method_query) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      _assertClass(key_pair, KeyPair);\n      wasm.document_signSelf(retptr, this.ptr, key_pair.ptr, addBorrowedObject(method_query));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      if (r1) {\n        throw takeObject(r0);\n      }\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Signs another DID document using the verification method specified by `method_query`.\n  * The `method_query` may be the full `DIDUrl` of the method or just its fragment,\n  * e.g. \"#sign-0\".\n  *\n  * `Document.signSelf` should be used in general, this throws an error if trying to operate\n  * on the same document. This is intended for signing updates to a document where a sole\n  * capability invocation method is rotated or replaced entirely.\n  *\n  * NOTE: does not validate whether the private key of the given `key_pair` corresponds to the\n  * verification method. See {@link Document.verifyDocument}.\n  * @param {Document} document\n  * @param {KeyPair} key_pair\n  * @param {DIDUrl | string} method_query\n  */\n  signDocument(document, key_pair, method_query) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      _assertClass(document, Document);\n      _assertClass(key_pair, KeyPair);\n      wasm.document_signDocument(retptr, this.ptr, document.ptr, key_pair.ptr, addBorrowedObject(method_query));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      if (r1) {\n        throw takeObject(r0);\n      }\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Creates a signature for the given `Credential` with the specified DID Document\n  * Verification Method.\n  * @param {Credential} credential\n  * @param {Uint8Array} privateKey\n  * @param {DIDUrl | string} methodQuery\n  * @param {ProofOptions} options\n  * @returns {Credential}\n  */\n  signCredential(credential, privateKey, methodQuery, options) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      _assertClass(credential, Credential);\n      const ptr0 = passArray8ToWasm0(privateKey, wasm.__wbindgen_malloc);\n      const len0 = WASM_VECTOR_LEN;\n      _assertClass(options, ProofOptions);\n      wasm.document_signCredential(retptr, this.ptr, credential.ptr, ptr0, len0, addBorrowedObject(methodQuery), options.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return Credential.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Creates a signature for the given `Presentation` with the specified DID Document\n  * Verification Method.\n  * @param {Presentation} presentation\n  * @param {Uint8Array} privateKey\n  * @param {DIDUrl | string} methodQuery\n  * @param {ProofOptions} options\n  * @returns {Presentation}\n  */\n  signPresentation(presentation, privateKey, methodQuery, options) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      _assertClass(presentation, Presentation);\n      const ptr0 = passArray8ToWasm0(privateKey, wasm.__wbindgen_malloc);\n      const len0 = WASM_VECTOR_LEN;\n      _assertClass(options, ProofOptions);\n      wasm.document_signPresentation(retptr, this.ptr, presentation.ptr, ptr0, len0, addBorrowedObject(methodQuery), options.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return Presentation.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Creates a signature for the given `data` with the specified DID Document\n  * Verification Method.\n  *\n  * NOTE: use `signSelf` or `signDocument` for DID Documents.\n  * @param {any} data\n  * @param {Uint8Array} privateKey\n  * @param {DIDUrl | string} methodQuery\n  * @param {ProofOptions} options\n  * @returns {any}\n  */\n  signData(data, privateKey, methodQuery, options) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      const ptr0 = passArray8ToWasm0(privateKey, wasm.__wbindgen_malloc);\n      const len0 = WASM_VECTOR_LEN;\n      _assertClass(options, ProofOptions);\n      wasm.document_signData(retptr, this.ptr, addBorrowedObject(data), ptr0, len0, addBorrowedObject(methodQuery), options.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Verifies the authenticity of `data` using the target verification method.\n  * @param {any} data\n  * @param {VerifierOptions} options\n  * @returns {boolean}\n  */\n  verifyData(data, options) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      _assertClass(options, VerifierOptions);\n      wasm.document_verifyData(retptr, this.ptr, addBorrowedObject(data), options.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return r0 !== 0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Verifies that the signature on the DID document `signed` was generated by a valid method from\n  * this DID document.\n  *\n  * # Errors\n  *\n  * Fails if:\n  * - The signature proof section is missing in the `signed` document.\n  * - The method is not found in this document.\n  * - An unsupported verification method is used.\n  * - The signature verification operation fails.\n  * @param {Document} signed\n  */\n  verifyDocument(signed) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      _assertClass(signed, Document);\n      wasm.document_verifyDocument(retptr, this.ptr, signed.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      if (r1) {\n        throw takeObject(r0);\n      }\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Verifies whether `document` is a valid root DID document according to the IOTA DID method\n  * specification.\n  *\n  * It must be signed using a verification method with a public key whose BLAKE2b-256 hash matches\n  * the DID tag.\n  * @param {Document} document\n  */\n  static verifyRootDocument(document) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      _assertClass(document, Document);\n      wasm.document_verifyRootDocument(retptr, document.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      if (r1) {\n        throw takeObject(r0);\n      }\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Generate a `DiffMessage` between two DID Documents and sign it using the specified\n  * `key` and `method`.\n  *\n  * @deprecated since 0.5.0, diff chain features are slated for removal.\n  * @param {Document} other\n  * @param {string} message_id\n  * @param {KeyPair} key\n  * @param {DIDUrl | string} method_query\n  * @returns {DiffMessage}\n  */\n  diff(other, message_id, key, method_query) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      _assertClass(other, Document);\n      const ptr0 = passStringToWasm0(message_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      const len0 = WASM_VECTOR_LEN;\n      _assertClass(key, KeyPair);\n      wasm.document_diff(retptr, this.ptr, other.ptr, ptr0, len0, key.ptr, addBorrowedObject(method_query));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return DiffMessage.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Verifies the signature of the `diff` was created using a capability invocation method\n  * in this DID Document.\n  *\n  * # Errors\n  *\n  * Fails if an unsupported verification method is used or the verification operation fails.\n  *\n  * @deprecated since 0.5.0, diff chain features are slated for removal.\n  * @param {DiffMessage} diff\n  */\n  verifyDiff(diff) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      _assertClass(diff, DiffMessage);\n      wasm.document_verifyDiff(retptr, this.ptr, diff.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      if (r1) {\n        throw takeObject(r0);\n      }\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Verifies a `DiffMessage` signature and attempts to merge the changes into `self`.\n  *\n  * @deprecated since 0.5.0, diff chain features are slated for removal.\n  * @param {DiffMessage} diff\n  */\n  mergeDiff(diff) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      _assertClass(diff, DiffMessage);\n      wasm.document_mergeDiff(retptr, this.ptr, diff.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      if (r1) {\n        throw takeObject(r0);\n      }\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns the Tangle index of the integration chain for this DID.\n  *\n  * This is simply the tag segment of the `DID`.\n  * E.g.\n  * For a document with DID: did:iota:1234567890abcdefghijklmnopqrstuvxyzABCDEFGHI,\n  * `doc.integration_index()` == \"1234567890abcdefghijklmnopqrstuvxyzABCDEFGHI\"\n  * @returns {string}\n  */\n  integrationIndex() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.document_integrationIndex(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * Returns the Tangle index of the DID diff chain. This should only be called on documents\n  * published on the integration chain.\n  *\n  * This is the Base58-btc encoded SHA-256 digest of the hex-encoded message id.\n  *\n  * @deprecated since 0.5.0, diff chain features are slated for removal.\n  * @param {string} message_id\n  * @returns {string}\n  */\n  static diffIndex(message_id) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      const ptr0 = passStringToWasm0(message_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      const len0 = WASM_VECTOR_LEN;\n      wasm.document_diffIndex(retptr, ptr0, len0);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      var r3 = getInt32Memory0()[retptr / 4 + 3];\n      var ptr1 = r0;\n      var len1 = r1;\n      if (r3) {\n        ptr1 = 0;\n        len1 = 0;\n        throw takeObject(r2);\n      }\n      return getStringFromWasm0(ptr1, len1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      wasm.__wbindgen_free(ptr1, len1);\n    }\n  }\n  /**\n  * Returns a copy of the metadata associated with this document.\n  *\n  * NOTE: Copies all the metadata. See also `metadataCreated`, `metadataUpdated`,\n  * `metadataPreviousMessageId`, `metadataProof` if only a subset of the metadata required.\n  * @returns {DocumentMetadata}\n  */\n  metadata() {\n    const ret = wasm.document_metadata(this.ptr);\n    return DocumentMetadata.__wrap(ret);\n  }\n  /**\n  * Returns a copy of the timestamp of when the DID document was created.\n  * @returns {Timestamp | undefined}\n  */\n  metadataCreated() {\n    const ret = wasm.document_metadataCreated(this.ptr);\n    return ret === 0 ? undefined : Timestamp.__wrap(ret);\n  }\n  /**\n  * Sets the timestamp of when the DID document was created.\n  * @param {Timestamp | undefined} timestamp\n  */\n  setMetadataCreated(timestamp) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.document_setMetadataCreated(retptr, this.ptr, addHeapObject(timestamp));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      if (r1) {\n        throw takeObject(r0);\n      }\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns a copy of the timestamp of the last DID document update.\n  * @returns {Timestamp | undefined}\n  */\n  metadataUpdated() {\n    const ret = wasm.document_metadataUpdated(this.ptr);\n    return ret === 0 ? undefined : Timestamp.__wrap(ret);\n  }\n  /**\n  * Sets the timestamp of the last DID document update.\n  * @param {Timestamp | undefined} timestamp\n  */\n  setMetadataUpdated(timestamp) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.document_setMetadataUpdated(retptr, this.ptr, addHeapObject(timestamp));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      if (r1) {\n        throw takeObject(r0);\n      }\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns a copy of the previous integration chain message id.\n  * @returns {string}\n  */\n  metadataPreviousMessageId() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.document_metadataPreviousMessageId(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * Sets the previous integration chain message id.\n  * @param {string} value\n  */\n  setMetadataPreviousMessageId(value) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      const ptr0 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      const len0 = WASM_VECTOR_LEN;\n      wasm.document_setMetadataPreviousMessageId(retptr, this.ptr, ptr0, len0);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      if (r1) {\n        throw takeObject(r0);\n      }\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns a copy of the proof.\n  * @returns {Proof | undefined}\n  */\n  proof() {\n    const ret = wasm.document_proof(this.ptr);\n    return ret === 0 ? undefined : Proof.__wrap(ret);\n  }\n  /**\n  * If the document has a `RevocationBitmap` service identified by `fragment`,\n  * revoke all credentials with a revocationBitmapIndex in `credentialIndices`.\n  * @param {string} fragment\n  * @param {number | number[]} credentialIndices\n  */\n  revokeCredentials(fragment, credentialIndices) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      const ptr0 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      const len0 = WASM_VECTOR_LEN;\n      wasm.document_revokeCredentials(retptr, this.ptr, ptr0, len0, addHeapObject(credentialIndices));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      if (r1) {\n        throw takeObject(r0);\n      }\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * If the document has a `RevocationBitmap` service identified by `fragment`,\n  * unrevoke all credentials with a revocationBitmapIndex in `credentialIndices`.\n  * @param {string} fragment\n  * @param {number | number[]} credentialIndices\n  */\n  unrevokeCredentials(fragment, credentialIndices) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      const ptr0 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      const len0 = WASM_VECTOR_LEN;\n      wasm.document_unrevokeCredentials(retptr, this.ptr, ptr0, len0, addHeapObject(credentialIndices));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      if (r1) {\n        throw takeObject(r0);\n      }\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Serializes a `Document` as a JSON object.\n  * @returns {any}\n  */\n  toJSON() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.document_toJSON(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Deserializes a `Document` from a JSON object.\n  * @param {any} json\n  * @returns {Document}\n  */\n  static fromJSON(json) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.document_fromJSON(retptr, addBorrowedObject(json));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return Document.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Deep clones the object.\n  * @returns {Document}\n  */\n  clone() {\n    const ret = wasm.document_clone(this.ptr);\n    return Document.__wrap(ret);\n  }\n}\nmodule.exports.Document = Document;\nconst DocumentHistoryFinalization = new FinalizationRegistry(ptr => wasm.__wbg_documenthistory_free(ptr));\n/**\n* A DID Document's history and current state.\n*/\nclass DocumentHistory {\n  static __wrap(ptr) {\n    const obj = Object.create(DocumentHistory.prototype);\n    obj.ptr = ptr;\n    DocumentHistoryFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  toJSON() {\n    return {};\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  [inspect.custom]() {\n    return Object.assign(Object.create({\n      constructor: this.constructor\n    }), this.toJSON());\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    DocumentHistoryFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_documenthistory_free(ptr);\n  }\n  /**\n  * Returns an `Array` of integration chain `Documents`.\n  *\n  * NOTE: clones the data.\n  * @returns {Array<ResolvedDocument>}\n  */\n  integrationChainData() {\n    const ret = wasm.documenthistory_integrationChainData(this.ptr);\n    return takeObject(ret);\n  }\n  /**\n  * Returns an `Array` of message id strings for \"spam\" messages on the same index\n  * as the integration chain.\n  *\n  * NOTE: clones the data.\n  * @returns {Array<string>}\n  */\n  integrationChainSpam() {\n    const ret = wasm.documenthistory_integrationChainSpam(this.ptr);\n    return takeObject(ret);\n  }\n  /**\n  * Returns an `Array` of diff chain `DiffMessages`.\n  *\n  * NOTE: clones the data.\n  *\n  * @deprecated since 0.5.0, diff chain features are slated for removal.\n  * @returns {Array<DiffMessage>}\n  */\n  diffChainData() {\n    const ret = wasm.documenthistory_diffChainData(this.ptr);\n    return takeObject(ret);\n  }\n  /**\n  * Returns an `Array` of message id strings for \"spam\" messages on the same index\n  * as the diff chain.\n  *\n  * NOTE: clones the data.\n  *\n  * @deprecated since 0.5.0, diff chain features are slated for removal.\n  * @returns {Array<string>}\n  */\n  diffChainSpam() {\n    const ret = wasm.documenthistory_diffChainSpam(this.ptr);\n    return takeObject(ret);\n  }\n  /**\n  * Serializes `DocumentHistory` as a JSON object.\n  * @returns {any}\n  */\n  toJSON() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.documenthistory_toJSON(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Deserializes `DocumentHistory` from a JSON object.\n  * @param {any} json\n  * @returns {DocumentHistory}\n  */\n  static fromJSON(json) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.documenthistory_fromJSON(retptr, addBorrowedObject(json));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return DocumentHistory.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Deep clones the object.\n  * @returns {DocumentHistory}\n  */\n  clone() {\n    const ret = wasm.documenthistory_clone(this.ptr);\n    return DocumentHistory.__wrap(ret);\n  }\n}\nmodule.exports.DocumentHistory = DocumentHistory;\nconst DocumentMetadataFinalization = new FinalizationRegistry(ptr => wasm.__wbg_documentmetadata_free(ptr));\n/**\n* Additional attributes related to an IOTA DID Document.\n*/\nclass DocumentMetadata {\n  static __wrap(ptr) {\n    const obj = Object.create(DocumentMetadata.prototype);\n    obj.ptr = ptr;\n    DocumentMetadataFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  toJSON() {\n    return {\n      previousMessageId: this.previousMessageId\n    };\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  [inspect.custom]() {\n    return Object.assign(Object.create({\n      constructor: this.constructor\n    }), this.toJSON());\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    DocumentMetadataFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_documentmetadata_free(ptr);\n  }\n  /**\n  * Returns a copy of the timestamp of when the DID document was created.\n  * @returns {Timestamp | undefined}\n  */\n  created() {\n    const ret = wasm.documentmetadata_created(this.ptr);\n    return ret === 0 ? undefined : Timestamp.__wrap(ret);\n  }\n  /**\n  * Returns a copy of the timestamp of the last DID document update.\n  * @returns {Timestamp | undefined}\n  */\n  updated() {\n    const ret = wasm.documentmetadata_updated(this.ptr);\n    return ret === 0 ? undefined : Timestamp.__wrap(ret);\n  }\n  /**\n  */\n  get previousMessageId() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.documentmetadata_previous_message_id(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * Deep clones the object.\n  * @returns {DocumentMetadata}\n  */\n  clone() {\n    const ret = wasm.documentmetadata_clone(this.ptr);\n    return DocumentMetadata.__wrap(ret);\n  }\n}\nmodule.exports.DocumentMetadata = DocumentMetadata;\nconst DurationFinalization = new FinalizationRegistry(ptr => wasm.__wbg_duration_free(ptr));\n/**\n* A span of time.\n*/\nclass Duration {\n  static __wrap(ptr) {\n    const obj = Object.create(Duration.prototype);\n    obj.ptr = ptr;\n    DurationFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  toJSON() {\n    return {};\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  [inspect.custom]() {\n    return Object.assign(Object.create({\n      constructor: this.constructor\n    }), this.toJSON());\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    DurationFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_duration_free(ptr);\n  }\n  /**\n  * Create a new `Duration` with the given number of seconds.\n  * @param {number} seconds\n  * @returns {Duration}\n  */\n  static seconds(seconds) {\n    const ret = wasm.duration_seconds(seconds);\n    return Duration.__wrap(ret);\n  }\n  /**\n  * Create a new `Duration` with the given number of minutes.\n  * @param {number} minutes\n  * @returns {Duration}\n  */\n  static minutes(minutes) {\n    const ret = wasm.duration_minutes(minutes);\n    return Duration.__wrap(ret);\n  }\n  /**\n  * Create a new `Duration` with the given number of hours.\n  * @param {number} hours\n  * @returns {Duration}\n  */\n  static hours(hours) {\n    const ret = wasm.duration_hours(hours);\n    return Duration.__wrap(ret);\n  }\n  /**\n  * Create a new `Duration` with the given number of days.\n  * @param {number} days\n  * @returns {Duration}\n  */\n  static days(days) {\n    const ret = wasm.duration_days(days);\n    return Duration.__wrap(ret);\n  }\n  /**\n  * Create a new `Duration` with the given number of weeks.\n  * @param {number} weeks\n  * @returns {Duration}\n  */\n  static weeks(weeks) {\n    const ret = wasm.duration_weeks(weeks);\n    return Duration.__wrap(ret);\n  }\n  /**\n  * Serializes a `Duration` as a JSON object.\n  * @returns {any}\n  */\n  toJSON() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.duration_toJSON(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Deserializes a `Duration` from a JSON object.\n  * @param {any} json\n  * @returns {Duration}\n  */\n  static fromJSON(json) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.duration_fromJSON(retptr, addBorrowedObject(json));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return Duration.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n}\nmodule.exports.Duration = Duration;\nconst Ed25519Finalization = new FinalizationRegistry(ptr => wasm.__wbg_ed25519_free(ptr));\n/**\n*/\nclass Ed25519 {\n  toJSON() {\n    return {};\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  [inspect.custom]() {\n    return Object.assign(Object.create({\n      constructor: this.constructor\n    }), this.toJSON());\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    Ed25519Finalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_ed25519_free(ptr);\n  }\n  /**\n  * Length in bytes of an Ed25519 private key.\n  * @returns {number}\n  */\n  static PRIVATE_KEY_LENGTH() {\n    const ret = wasm.ed25519_PRIVATE_KEY_LENGTH();\n    return ret >>> 0;\n  }\n  /**\n  * Length in bytes of an Ed25519 public key.\n  * @returns {number}\n  */\n  static PUBLIC_KEY_LENGTH() {\n    const ret = wasm.ed25519_PUBLIC_KEY_LENGTH();\n    return ret >>> 0;\n  }\n  /**\n  * Length in bytes of an Ed25519 signature.\n  * @returns {number}\n  */\n  static SIGNATURE_LENGTH() {\n    const ret = wasm.ed25519_SIGNATURE_LENGTH();\n    return ret >>> 0;\n  }\n  /**\n  * Computes an EdDSA signature using an Ed25519 private key.\n  *\n  * NOTE: this differs from {@link Document.signData} which uses JCS\n  * to canonicalize JSON messages.\n  *\n  * The private key must be a 32-byte seed in compliance with [RFC 8032](https://datatracker.ietf.org/doc/html/rfc8032#section-3.2).\n  * Other implementations often use another format. See [this blog post](https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/) for further explanation.\n  * @param {Uint8Array} message\n  * @param {Uint8Array} privateKey\n  * @returns {Uint8Array}\n  */\n  static sign(message, privateKey) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n      const len0 = WASM_VECTOR_LEN;\n      const ptr1 = passArray8ToWasm0(privateKey, wasm.__wbindgen_malloc);\n      const len1 = WASM_VECTOR_LEN;\n      wasm.ed25519_sign(retptr, ptr0, len0, ptr1, len1);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      var r3 = getInt32Memory0()[retptr / 4 + 3];\n      if (r3) {\n        throw takeObject(r2);\n      }\n      var v2 = getArrayU8FromWasm0(r0, r1).slice();\n      wasm.__wbindgen_free(r0, r1 * 1);\n      return v2;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Verifies an EdDSA signature against an Ed25519 public key.\n  *\n  * NOTE: this differs from {@link Document.verifyData} which uses JCS\n  * to canonicalize JSON messages.\n  * @param {Uint8Array} message\n  * @param {Uint8Array} signature\n  * @param {Uint8Array} publicKey\n  */\n  static verify(message, signature, publicKey) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n      const len0 = WASM_VECTOR_LEN;\n      const ptr1 = passArray8ToWasm0(signature, wasm.__wbindgen_malloc);\n      const len1 = WASM_VECTOR_LEN;\n      const ptr2 = passArray8ToWasm0(publicKey, wasm.__wbindgen_malloc);\n      const len2 = WASM_VECTOR_LEN;\n      wasm.ed25519_verify(retptr, ptr0, len0, ptr1, len1, ptr2, len2);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      if (r1) {\n        throw takeObject(r0);\n      }\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n}\nmodule.exports.Ed25519 = Ed25519;\nconst EncryptedDataFinalization = new FinalizationRegistry(ptr => wasm.__wbg_encrypteddata_free(ptr));\n/**\n* The structure returned after encrypting data\n*/\nclass EncryptedData {\n  static __wrap(ptr) {\n    const obj = Object.create(EncryptedData.prototype);\n    obj.ptr = ptr;\n    EncryptedDataFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  toJSON() {\n    return {};\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  [inspect.custom]() {\n    return Object.assign(Object.create({\n      constructor: this.constructor\n    }), this.toJSON());\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    EncryptedDataFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_encrypteddata_free(ptr);\n  }\n  /**\n  * Returns a copy of the nonce\n  * @returns {Uint8Array}\n  */\n  nonce() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.encrypteddata_nonce(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n      wasm.__wbindgen_free(r0, r1 * 1);\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns a copy of the associated data\n  * @returns {Uint8Array}\n  */\n  associatedData() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.encrypteddata_associatedData(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n      wasm.__wbindgen_free(r0, r1 * 1);\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns a copy of the ciphertext\n  * @returns {Uint8Array}\n  */\n  ciphertext() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.encrypteddata_ciphertext(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n      wasm.__wbindgen_free(r0, r1 * 1);\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns a copy of the tag\n  * @returns {Uint8Array}\n  */\n  tag() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.encrypteddata_tag(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n      wasm.__wbindgen_free(r0, r1 * 1);\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Serializes `EncryptedData` as a JSON object.\n  * @returns {any}\n  */\n  toJSON() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.encrypteddata_toJSON(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Deserializes `EncryptedData` from a JSON object.\n  * @param {any} json_value\n  * @returns {EncryptedData}\n  */\n  static fromJSON(json_value) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.encrypteddata_fromJSON(retptr, addHeapObject(json_value));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return EncryptedData.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n}\nmodule.exports.EncryptedData = EncryptedData;\nconst EncryptionAlgorithmFinalization = new FinalizationRegistry(ptr => wasm.__wbg_encryptionalgorithm_free(ptr));\n/**\n* Supported content encryption algorithms.\n*/\nclass EncryptionAlgorithm {\n  static __wrap(ptr) {\n    const obj = Object.create(EncryptionAlgorithm.prototype);\n    obj.ptr = ptr;\n    EncryptionAlgorithmFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  toJSON() {\n    return {};\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  [inspect.custom]() {\n    return Object.assign(Object.create({\n      constructor: this.constructor\n    }), this.toJSON());\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    EncryptionAlgorithmFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_encryptionalgorithm_free(ptr);\n  }\n  /**\n  * AES GCM using 256-bit key.\n  * @returns {EncryptionAlgorithm}\n  */\n  static A256GCM() {\n    const ret = wasm.encryptionalgorithm_A256GCM();\n    return EncryptionAlgorithm.__wrap(ret);\n  }\n  /**\n  * Returns the length of the cipher's key.\n  * @returns {number}\n  */\n  keyLength() {\n    const ret = wasm.encryptionalgorithm_keyLength(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * Serializes `EncryptionAlgorithm` as a JSON object.\n  * @returns {any}\n  */\n  toJSON() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.encryptionalgorithm_toJSON(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Deserializes `EncryptionAlgorithm` from a JSON object.\n  * @param {any} json_value\n  * @returns {EncryptionAlgorithm}\n  */\n  static fromJSON(json_value) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.encryptionalgorithm_fromJSON(retptr, addHeapObject(json_value));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return EncryptionAlgorithm.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n}\nmodule.exports.EncryptionAlgorithm = EncryptionAlgorithm;\nconst ExplorerUrlFinalization = new FinalizationRegistry(ptr => wasm.__wbg_explorerurl_free(ptr));\n/**\n*/\nclass ExplorerUrl {\n  static __wrap(ptr) {\n    const obj = Object.create(ExplorerUrl.prototype);\n    obj.ptr = ptr;\n    ExplorerUrlFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    ExplorerUrlFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_explorerurl_free(ptr);\n  }\n  /**\n  * Constructs a new Tangle explorer URL from a string.\n  *\n  * Use `ExplorerUrl::mainnet` or `ExplorerUrl::devnet` unless using a private Tangle\n  * or local explorer.\n  * @param {string} url\n  * @returns {ExplorerUrl}\n  */\n  static parse(url) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      const ptr0 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      const len0 = WASM_VECTOR_LEN;\n      wasm.explorerurl_parse(retptr, ptr0, len0);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return ExplorerUrl.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns the Tangle explorer URL for the mainnet.\n  * @returns {ExplorerUrl}\n  */\n  static mainnet() {\n    const ret = wasm.explorerurl_mainnet();\n    return ExplorerUrl.__wrap(ret);\n  }\n  /**\n  * Returns the Tangle explorer URL for the devnet.\n  * @returns {ExplorerUrl}\n  */\n  static devnet() {\n    const ret = wasm.explorerurl_devnet();\n    return ExplorerUrl.__wrap(ret);\n  }\n  /**\n  * Returns the web explorer URL of the given `message_id`.\n  *\n  * E.g. https://explorer.iota.org/mainnet/message/{message_id}\n  * @param {string} message_id\n  * @returns {string}\n  */\n  messageUrl(message_id) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      const ptr0 = passStringToWasm0(message_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      const len0 = WASM_VECTOR_LEN;\n      wasm.explorerurl_messageUrl(retptr, this.ptr, ptr0, len0);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      var r3 = getInt32Memory0()[retptr / 4 + 3];\n      var ptr1 = r0;\n      var len1 = r1;\n      if (r3) {\n        ptr1 = 0;\n        len1 = 0;\n        throw takeObject(r2);\n      }\n      return getStringFromWasm0(ptr1, len1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      wasm.__wbindgen_free(ptr1, len1);\n    }\n  }\n  /**\n  * Returns the web identity resolver URL for the given DID.\n  *\n  * E.g. https://explorer.iota.org/mainnet/identity-resolver/{did}\n  * @param {DID | string} did\n  * @returns {string}\n  */\n  resolverUrl(did) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.explorerurl_resolverUrl(retptr, this.ptr, addHeapObject(did));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      var r3 = getInt32Memory0()[retptr / 4 + 3];\n      var ptr0 = r0;\n      var len0 = r1;\n      if (r3) {\n        ptr0 = 0;\n        len0 = 0;\n        throw takeObject(r2);\n      }\n      return getStringFromWasm0(ptr0, len0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      wasm.__wbindgen_free(ptr0, len0);\n    }\n  }\n  /**\n  * @returns {string}\n  */\n  toString() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.explorerurl_toString(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n}\nmodule.exports.ExplorerUrl = ExplorerUrl;\nconst IntegrationChainHistoryFinalization = new FinalizationRegistry(ptr => wasm.__wbg_integrationchainhistory_free(ptr));\n/**\n*/\nclass IntegrationChainHistory {\n  static __wrap(ptr) {\n    const obj = Object.create(IntegrationChainHistory.prototype);\n    obj.ptr = ptr;\n    IntegrationChainHistoryFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  toJSON() {\n    return {};\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  [inspect.custom]() {\n    return Object.assign(Object.create({\n      constructor: this.constructor\n    }), this.toJSON());\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    IntegrationChainHistoryFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_integrationchainhistory_free(ptr);\n  }\n  /**\n  * Returns an `Array` of the integration chain `Documents`.\n  *\n  * NOTE: this clones the field.\n  * @returns {Array<ResolvedDocument>}\n  */\n  chainData() {\n    const ret = wasm.integrationchainhistory_chainData(this.ptr);\n    return takeObject(ret);\n  }\n  /**\n  * Returns an `Array` of `MessageIds` as strings.\n  *\n  * NOTE: this clones the field.\n  * @returns {Array<string>}\n  */\n  spam() {\n    const ret = wasm.integrationchainhistory_spam(this.ptr);\n    return takeObject(ret);\n  }\n  /**\n  * Serializes as a JSON object.\n  * @returns {any}\n  */\n  toJSON() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.integrationchainhistory_toJSON(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Deserializes from a JSON object.\n  * @param {any} json\n  * @returns {IntegrationChainHistory}\n  */\n  static fromJSON(json) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.integrationchainhistory_fromJSON(retptr, addBorrowedObject(json));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return IntegrationChainHistory.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n}\nmodule.exports.IntegrationChainHistory = IntegrationChainHistory;\nconst KeyLocationFinalization = new FinalizationRegistry(ptr => wasm.__wbg_keylocation_free(ptr));\n/**\n* The storage location of a verification method key.\n*\n* A key is uniquely identified by the fragment and a hash of its public key.\n* Importantly, the fragment alone is insufficient to represent the storage location.\n* For example, when rotating a key, there will be two keys in storage for the\n* same identity with the same fragment. The `key_hash` disambiguates the keys in\n* situations like these.\n*\n* The string representation of that location can be obtained via `canonicalRepr`.\n*/\nclass KeyLocation {\n  static __wrap(ptr) {\n    const obj = Object.create(KeyLocation.prototype);\n    obj.ptr = ptr;\n    KeyLocationFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  toJSON() {\n    return {};\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  [inspect.custom]() {\n    return Object.assign(Object.create({\n      constructor: this.constructor\n    }), this.toJSON());\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    KeyLocationFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_keylocation_free(ptr);\n  }\n  /**\n  * Create a location from a `KeyType`, the fragment of a verification method\n  * and the bytes of a public key.\n  * @param {number} keyType\n  * @param {string} fragment\n  * @param {Uint8Array} publicKey\n  */\n  constructor(keyType, fragment, publicKey) {\n    const ptr0 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ptr1 = passArray8ToWasm0(publicKey, wasm.__wbindgen_malloc);\n    const len1 = WASM_VECTOR_LEN;\n    const ret = wasm.keylocation_new(keyType, ptr0, len0, ptr1, len1);\n    return KeyLocation.__wrap(ret);\n  }\n  /**\n  * Obtain the location of a verification method's key in storage.\n  * @param {VerificationMethod} method\n  * @returns {KeyLocation}\n  */\n  static fromVerificationMethod(method) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      _assertClass(method, VerificationMethod);\n      wasm.keylocation_fromVerificationMethod(retptr, method.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return KeyLocation.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns the canonical string representation of the location.\n  *\n  * This should be used as the representation for storage keys.\n  * @returns {string}\n  */\n  canonical() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.keylocation_canonical(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * Returns a copy of the key type of the key location.\n  * @returns {number}\n  */\n  keyType() {\n    const ret = wasm.keylocation_keyType(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * Serializes `KeyLocation` as a JSON object.\n  * @returns {any}\n  */\n  toJSON() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.keylocation_toJSON(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Deserializes a JSON object into a `KeyLocation`.\n  * @param {any} json_value\n  * @returns {KeyLocation}\n  */\n  static fromJSON(json_value) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.keylocation_fromJSON(retptr, addHeapObject(json_value));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return KeyLocation.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @returns {string}\n  */\n  toString() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.keylocation_toString(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n}\nmodule.exports.KeyLocation = KeyLocation;\nconst KeyPairFinalization = new FinalizationRegistry(ptr => wasm.__wbg_keypair_free(ptr));\n/**\n*/\nclass KeyPair {\n  static __wrap(ptr) {\n    const obj = Object.create(KeyPair.prototype);\n    obj.ptr = ptr;\n    KeyPairFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  toJSON() {\n    return {};\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  [inspect.custom]() {\n    return Object.assign(Object.create({\n      constructor: this.constructor\n    }), this.toJSON());\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    KeyPairFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_keypair_free(ptr);\n  }\n  /**\n  * Generates a new `KeyPair` object.\n  * @param {number} type_\n  */\n  constructor(type_) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.keypair_new(retptr, type_);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return KeyPair.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Parses a `KeyPair` object from the public/private keys.\n  * @param {number} type_\n  * @param {Uint8Array} public_key\n  * @param {Uint8Array} private_key\n  * @returns {KeyPair}\n  */\n  static fromKeys(type_, public_key, private_key) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      const ptr0 = passArray8ToWasm0(public_key, wasm.__wbindgen_malloc);\n      const len0 = WASM_VECTOR_LEN;\n      const ptr1 = passArray8ToWasm0(private_key, wasm.__wbindgen_malloc);\n      const len1 = WASM_VECTOR_LEN;\n      wasm.keypair_fromKeys(retptr, type_, ptr0, len0, ptr1, len1);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return KeyPair.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Reconstructs a `KeyPair` from the bytes of a private key.\n  *\n  * The private key for `Ed25519` must be a 32-byte seed in compliance\n  * with [RFC 8032](https://datatracker.ietf.org/doc/html/rfc8032#section-3.2).\n  * Other implementations often use another format. See [this blog post](https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/) for further explanation.\n  * @param {number} keyType\n  * @param {Uint8Array} privateKeyBytes\n  * @returns {KeyPair}\n  */\n  static tryFromPrivateKeyBytes(keyType, privateKeyBytes) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      const ptr0 = passArray8ToWasm0(privateKeyBytes, wasm.__wbindgen_malloc);\n      const len0 = WASM_VECTOR_LEN;\n      wasm.keypair_tryFromPrivateKeyBytes(retptr, keyType, ptr0, len0);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return KeyPair.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns the `KeyType` of the `KeyPair` object.\n  * @returns {number}\n  */\n  type() {\n    const ret = wasm.keypair_type(this.ptr);\n    return ret >>> 0;\n  }\n  /**\n  * Returns a copy of the public key as a `Uint8Array`.\n  * @returns {Uint8Array}\n  */\n  public() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.keypair_public(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n      wasm.__wbindgen_free(r0, r1 * 1);\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns a copy of the private key as a `Uint8Array`.\n  * @returns {Uint8Array}\n  */\n  private() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.keypair_private(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n      wasm.__wbindgen_free(r0, r1 * 1);\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Serializes a `KeyPair` object as a JSON object.\n  * @returns {any}\n  */\n  toJSON() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.keypair_toJSON(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Deserializes a `KeyPair` object from a JSON object.\n  * @param {any} json\n  * @returns {KeyPair}\n  */\n  static fromJSON(json) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.keypair_fromJSON(retptr, addBorrowedObject(json));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return KeyPair.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Deep clones the object.\n  * @returns {KeyPair}\n  */\n  clone() {\n    const ret = wasm.keypair_clone(this.ptr);\n    return KeyPair.__wrap(ret);\n  }\n}\nmodule.exports.KeyPair = KeyPair;\nconst MethodContentFinalization = new FinalizationRegistry(ptr => wasm.__wbg_methodcontent_free(ptr));\n/**\n*/\nclass MethodContent {\n  static __wrap(ptr) {\n    const obj = Object.create(MethodContent.prototype);\n    obj.ptr = ptr;\n    MethodContentFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  toJSON() {\n    return {};\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  [inspect.custom]() {\n    return Object.assign(Object.create({\n      constructor: this.constructor\n    }), this.toJSON());\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    MethodContentFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_methodcontent_free(ptr);\n  }\n  /**\n  * Generate and store a new Ed25519 keypair for a new `Ed25519VerificationKey2018` method.\n  * @returns {MethodContent}\n  */\n  static GenerateEd25519() {\n    const ret = wasm.methodcontent_GenerateEd25519();\n    return MethodContent.__wrap(ret);\n  }\n  /**\n  * Store an existing Ed25519 private key and derive a public key from it for a new\n  * `Ed25519VerificationKey2018` method.\n  * @param {Uint8Array} privateKey\n  * @returns {MethodContent}\n  */\n  static PrivateEd25519(privateKey) {\n    const ptr0 = passArray8ToWasm0(privateKey, wasm.__wbindgen_malloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = wasm.methodcontent_PrivateEd25519(ptr0, len0);\n    return MethodContent.__wrap(ret);\n  }\n  /**\n  * Insert an existing Ed25519 public key into a new `Ed25519VerificationKey2018` method,\n  * without generating or storing a private key.\n  *\n  * NOTE: the method will be unable to be used to sign anything without a private key.\n  * @param {Uint8Array} publicKey\n  * @returns {MethodContent}\n  */\n  static PublicEd25519(publicKey) {\n    const ptr0 = passArray8ToWasm0(publicKey, wasm.__wbindgen_malloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = wasm.methodcontent_PublicEd25519(ptr0, len0);\n    return MethodContent.__wrap(ret);\n  }\n  /**\n  * Generate and store a new X25519 keypair for a new `X25519KeyAgreementKey2019` method.\n  * @returns {MethodContent}\n  */\n  static GenerateX25519() {\n    const ret = wasm.methodcontent_GenerateX25519();\n    return MethodContent.__wrap(ret);\n  }\n  /**\n  * Store an existing X25519 private key and derive a public key from it for a new\n  * `X25519KeyAgreementKey2019` method.\n  * @param {Uint8Array} privateKey\n  * @returns {MethodContent}\n  */\n  static PrivateX25519(privateKey) {\n    const ptr0 = passArray8ToWasm0(privateKey, wasm.__wbindgen_malloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = wasm.methodcontent_PrivateX25519(ptr0, len0);\n    return MethodContent.__wrap(ret);\n  }\n  /**\n  * Insert an existing X25519 public key into a new `X25519KeyAgreementKey2019` method,\n  * without generating or storing a private key.\n  *\n  * NOTE: the method will be unable to be used for key exchange without a private key.\n  * @param {Uint8Array} publicKey\n  * @returns {MethodContent}\n  */\n  static PublicX25519(publicKey) {\n    const ptr0 = passArray8ToWasm0(publicKey, wasm.__wbindgen_malloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = wasm.methodcontent_PublicX25519(ptr0, len0);\n    return MethodContent.__wrap(ret);\n  }\n  /**\n  * Serializes `MethodContent` as a JSON object.\n  * @returns {any}\n  */\n  toJSON() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.methodcontent_toJSON(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Deserializes `MethodContent` from a JSON object.\n  * @param {any} json_value\n  * @returns {MethodContent}\n  */\n  static fromJSON(json_value) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.methodcontent_fromJSON(retptr, addHeapObject(json_value));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return MethodContent.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n}\nmodule.exports.MethodContent = MethodContent;\nconst MethodDataFinalization = new FinalizationRegistry(ptr => wasm.__wbg_methoddata_free(ptr));\n/**\n* Supported verification method data formats.\n*/\nclass MethodData {\n  static __wrap(ptr) {\n    const obj = Object.create(MethodData.prototype);\n    obj.ptr = ptr;\n    MethodDataFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  toJSON() {\n    return {};\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  [inspect.custom]() {\n    return Object.assign(Object.create({\n      constructor: this.constructor\n    }), this.toJSON());\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    MethodDataFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_methoddata_free(ptr);\n  }\n  /**\n  * Creates a new `MethodData` variant with Base58-BTC encoded content.\n  * @param {Uint8Array} data\n  * @returns {MethodData}\n  */\n  static newBase58(data) {\n    const ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = wasm.methoddata_newBase58(ptr0, len0);\n    return MethodData.__wrap(ret);\n  }\n  /**\n  * Creates a new `MethodData` variant with Multibase-encoded content.\n  * @param {Uint8Array} data\n  * @returns {MethodData}\n  */\n  static newMultibase(data) {\n    const ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = wasm.methoddata_newMultibase(ptr0, len0);\n    return MethodData.__wrap(ret);\n  }\n  /**\n  * Returns a `Uint8Array` containing the decoded bytes of the `MethodData`.\n  *\n  * This is generally a public key identified by a `MethodData` value.\n  *\n  * ### Errors\n  * Decoding can fail if `MethodData` has invalid content or cannot be\n  * represented as a vector of bytes.\n  * @returns {Uint8Array}\n  */\n  tryDecode() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.methoddata_tryDecode(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      var r3 = getInt32Memory0()[retptr / 4 + 3];\n      if (r3) {\n        throw takeObject(r2);\n      }\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n      wasm.__wbindgen_free(r0, r1 * 1);\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Serializes a `MethodData` object as a JSON object.\n  * @returns {any}\n  */\n  toJSON() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.methoddata_toJSON(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Deserializes a `MethodData` object from a JSON object.\n  * @param {any} json\n  * @returns {MethodData}\n  */\n  static fromJSON(json) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.methoddata_fromJSON(retptr, addBorrowedObject(json));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return MethodData.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Deep clones the object.\n  * @returns {MethodData}\n  */\n  clone() {\n    const ret = wasm.methoddata_clone(this.ptr);\n    return MethodData.__wrap(ret);\n  }\n}\nmodule.exports.MethodData = MethodData;\nconst MethodScopeFinalization = new FinalizationRegistry(ptr => wasm.__wbg_methodscope_free(ptr));\n/**\n* Supported verification method types.\n*/\nclass MethodScope {\n  static __wrap(ptr) {\n    const obj = Object.create(MethodScope.prototype);\n    obj.ptr = ptr;\n    MethodScopeFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  toJSON() {\n    return {};\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  [inspect.custom]() {\n    return Object.assign(Object.create({\n      constructor: this.constructor\n    }), this.toJSON());\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    MethodScopeFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_methodscope_free(ptr);\n  }\n  /**\n  * @returns {MethodScope}\n  */\n  static VerificationMethod() {\n    const ret = wasm.methodscope_VerificationMethod();\n    return MethodScope.__wrap(ret);\n  }\n  /**\n  * @returns {MethodScope}\n  */\n  static Authentication() {\n    const ret = wasm.methodscope_Authentication();\n    return MethodScope.__wrap(ret);\n  }\n  /**\n  * @returns {MethodScope}\n  */\n  static AssertionMethod() {\n    const ret = wasm.methodscope_AssertionMethod();\n    return MethodScope.__wrap(ret);\n  }\n  /**\n  * @returns {MethodScope}\n  */\n  static KeyAgreement() {\n    const ret = wasm.methodscope_KeyAgreement();\n    return MethodScope.__wrap(ret);\n  }\n  /**\n  * @returns {MethodScope}\n  */\n  static CapabilityDelegation() {\n    const ret = wasm.methodscope_CapabilityDelegation();\n    return MethodScope.__wrap(ret);\n  }\n  /**\n  * @returns {MethodScope}\n  */\n  static CapabilityInvocation() {\n    const ret = wasm.methodscope_CapabilityInvocation();\n    return MethodScope.__wrap(ret);\n  }\n  /**\n  * Returns the `MethodScope` as a string.\n  * @returns {string}\n  */\n  toString() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.methodscope_toString(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * Serializes a `MethodScope` object as a JSON object.\n  * @returns {any}\n  */\n  toJSON() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.methodscope_toJSON(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Deserializes a `MethodScope` object from a JSON object.\n  * @param {any} json\n  * @returns {MethodScope}\n  */\n  static fromJSON(json) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.methodscope_fromJSON(retptr, addBorrowedObject(json));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return MethodScope.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Deep clones the object.\n  * @returns {MethodScope}\n  */\n  clone() {\n    const ret = wasm.methodscope_clone(this.ptr);\n    return MethodScope.__wrap(ret);\n  }\n}\nmodule.exports.MethodScope = MethodScope;\nconst MethodTypeFinalization = new FinalizationRegistry(ptr => wasm.__wbg_methodtype_free(ptr));\n/**\n* Supported verification method types.\n*/\nclass MethodType {\n  static __wrap(ptr) {\n    const obj = Object.create(MethodType.prototype);\n    obj.ptr = ptr;\n    MethodTypeFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  toJSON() {\n    return {};\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  [inspect.custom]() {\n    return Object.assign(Object.create({\n      constructor: this.constructor\n    }), this.toJSON());\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    MethodTypeFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_methodtype_free(ptr);\n  }\n  /**\n  * @returns {MethodType}\n  */\n  static Ed25519VerificationKey2018() {\n    const ret = wasm.methodtype_Ed25519VerificationKey2018();\n    return MethodType.__wrap(ret);\n  }\n  /**\n  * @returns {MethodType}\n  */\n  static X25519KeyAgreementKey2019() {\n    const ret = wasm.methodtype_X25519KeyAgreementKey2019();\n    return MethodType.__wrap(ret);\n  }\n  /**\n  * Serializes a `MethodType` object as a JSON object.\n  * @returns {any}\n  */\n  toJSON() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.methodtype_toJSON(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Deserializes a `MethodType` object from a JSON object.\n  * @param {any} json\n  * @returns {MethodType}\n  */\n  static fromJSON(json) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.methodtype_fromJSON(retptr, addBorrowedObject(json));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return MethodType.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Returns the `MethodType` as a string.\n  * @returns {string}\n  */\n  toString() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.methodtype_toString(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * Deep clones the object.\n  * @returns {MethodType}\n  */\n  clone() {\n    const ret = wasm.methodtype_clone(this.ptr);\n    return MethodType.__wrap(ret);\n  }\n}\nmodule.exports.MethodType = MethodType;\nconst NetworkFinalization = new FinalizationRegistry(ptr => wasm.__wbg_network_free(ptr));\n/**\n*/\nclass Network {\n  static __wrap(ptr) {\n    const obj = Object.create(Network.prototype);\n    obj.ptr = ptr;\n    NetworkFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    NetworkFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_network_free(ptr);\n  }\n  /**\n  * Parses the provided string to a `Network`.\n  *\n  * Errors if the name is invalid.\n  * @param {string} name\n  * @returns {Network}\n  */\n  static tryFromName(name) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      const len0 = WASM_VECTOR_LEN;\n      wasm.network_tryFromName(retptr, ptr0, len0);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return Network.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @returns {Network}\n  */\n  static mainnet() {\n    const ret = wasm.network_mainnet();\n    return Network.__wrap(ret);\n  }\n  /**\n  * @returns {Network}\n  */\n  static devnet() {\n    const ret = wasm.network_devnet();\n    return Network.__wrap(ret);\n  }\n  /**\n  * Returns a copy of the network name.\n  * @returns {string}\n  */\n  name() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.network_name(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * Returns a copy of the node URL of the Tangle network.\n  * @returns {string | undefined}\n  */\n  defaultNodeURL() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.network_defaultNodeURL(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      let v0;\n      if (r0 !== 0) {\n        v0 = getStringFromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n      }\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * @returns {string}\n  */\n  toString() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.network_toString(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * Serializes a `Network` as a JSON object.\n  * @returns {any}\n  */\n  toJSON() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.network_toJSON(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Deserializes a `Network` from a JSON object.\n  * @param {any} json\n  * @returns {Network}\n  */\n  static fromJSON(json) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.network_fromJSON(retptr, addBorrowedObject(json));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return Network.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Deep clones the object.\n  * @returns {Network}\n  */\n  clone() {\n    const ret = wasm.network_clone(this.ptr);\n    return Network.__wrap(ret);\n  }\n}\nmodule.exports.Network = Network;\nconst PresentationFinalization = new FinalizationRegistry(ptr => wasm.__wbg_presentation_free(ptr));\n/**\n*/\nclass Presentation {\n  static __wrap(ptr) {\n    const obj = Object.create(Presentation.prototype);\n    obj.ptr = ptr;\n    PresentationFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  toJSON() {\n    return {};\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  [inspect.custom]() {\n    return Object.assign(Object.create({\n      constructor: this.constructor\n    }), this.toJSON());\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    PresentationFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_presentation_free(ptr);\n  }\n  /**\n  * Returns the base JSON-LD context.\n  * @returns {string}\n  */\n  static BaseContext() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.presentation_BaseContext(retptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      var r3 = getInt32Memory0()[retptr / 4 + 3];\n      var ptr0 = r0;\n      var len0 = r1;\n      if (r3) {\n        ptr0 = 0;\n        len0 = 0;\n        throw takeObject(r2);\n      }\n      return getStringFromWasm0(ptr0, len0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      wasm.__wbindgen_free(ptr0, len0);\n    }\n  }\n  /**\n  * Returns the base type.\n  * @returns {string}\n  */\n  static BaseType() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.presentation_BaseType(retptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * Constructs a new `Presentation`.\n  * @param {IPresentation} values\n  */\n  constructor(values) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.presentation_new(retptr, addHeapObject(values));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return Presentation.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns a copy of the JSON-LD context(s) applicable to the `Presentation`.\n  * @returns {Array<string | Record<string, any>>}\n  */\n  context() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.presentation_context(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns a copy of the unique `URI` identifying the `Presentation`.\n  * @returns {string | undefined}\n  */\n  id() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.presentation_id(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      let v0;\n      if (r0 !== 0) {\n        v0 = getStringFromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n      }\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns a copy of the URIs defining the type of the `Presentation`.\n  * @returns {Array<string>}\n  */\n  type() {\n    const ret = wasm.presentation_type(this.ptr);\n    return takeObject(ret);\n  }\n  /**\n  * Returns a copy of the {@link Credential}(s) expressing the claims of the `Presentation`.\n  * @returns {Array<Credential>}\n  */\n  verifiableCredential() {\n    const ret = wasm.presentation_verifiableCredential(this.ptr);\n    return takeObject(ret);\n  }\n  /**\n  * Returns a copy of the URI of the entity that generated the `Presentation`.\n  * @returns {string | undefined}\n  */\n  holder() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.presentation_holder(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      let v0;\n      if (r0 !== 0) {\n        v0 = getStringFromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n      }\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns a copy of the service(s) used to refresh an expired {@link Credential} in the `Presentation`.\n  * @returns {Array<RefreshService>}\n  */\n  refreshService() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.presentation_refreshService(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns a copy of the terms-of-use specified by the `Presentation` holder\n  * @returns {Array<Policy>}\n  */\n  termsOfUse() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.presentation_termsOfUse(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns a copy of the proof used to verify the `Presentation`.\n  * @returns {Proof | undefined}\n  */\n  proof() {\n    const ret = wasm.presentation_proof(this.ptr);\n    return ret === 0 ? undefined : Proof.__wrap(ret);\n  }\n  /**\n  * Returns a copy of the miscellaneous properties on the `Presentation`.\n  * @returns {Map<string, any>}\n  */\n  properties() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.presentation_properties(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Serializes a `Presentation` as a JSON object.\n  * @returns {any}\n  */\n  toJSON() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.presentation_toJSON(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Deserializes a `Presentation` from a JSON object.\n  * @param {any} json\n  * @returns {Presentation}\n  */\n  static fromJSON(json) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.presentation_fromJSON(retptr, addBorrowedObject(json));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return Presentation.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Deep clones the object.\n  * @returns {Presentation}\n  */\n  clone() {\n    const ret = wasm.presentation_clone(this.ptr);\n    return Presentation.__wrap(ret);\n  }\n}\nmodule.exports.Presentation = Presentation;\nconst PresentationValidationOptionsFinalization = new FinalizationRegistry(ptr => wasm.__wbg_presentationvalidationoptions_free(ptr));\n/**\n* Options to declare validation criteria when validating presentation.\n*/\nclass PresentationValidationOptions {\n  static __wrap(ptr) {\n    const obj = Object.create(PresentationValidationOptions.prototype);\n    obj.ptr = ptr;\n    PresentationValidationOptionsFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    PresentationValidationOptionsFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_presentationvalidationoptions_free(ptr);\n  }\n  /**\n  * Creates a new `PresentationValidationOptions` from the given fields.\n  *\n  * Throws an error if any of the options are invalid.\n  * @param {IPresentationValidationOptions} options\n  */\n  constructor(options) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.presentationvalidationoptions_new(retptr, addHeapObject(options));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return PresentationValidationOptions.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Creates a new `PresentationValidationOptions` with defaults.\n  * @returns {PresentationValidationOptions}\n  */\n  static default() {\n    const ret = wasm.presentationvalidationoptions_default();\n    return PresentationValidationOptions.__wrap(ret);\n  }\n  /**\n  * Serializes a `PresentationValidationOptions` as a JSON object.\n  * @returns {any}\n  */\n  toJSON() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.presentationvalidationoptions_toJSON(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Deserializes a `PresentationValidationOptions` from a JSON object.\n  * @param {any} json\n  * @returns {PresentationValidationOptions}\n  */\n  static fromJSON(json) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.presentationvalidationoptions_fromJSON(retptr, addBorrowedObject(json));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return PresentationValidationOptions.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Deep clones the object.\n  * @returns {PresentationValidationOptions}\n  */\n  clone() {\n    const ret = wasm.presentationvalidationoptions_clone(this.ptr);\n    return PresentationValidationOptions.__wrap(ret);\n  }\n}\nmodule.exports.PresentationValidationOptions = PresentationValidationOptions;\nconst PresentationValidatorFinalization = new FinalizationRegistry(ptr => wasm.__wbg_presentationvalidator_free(ptr));\n/**\n*/\nclass PresentationValidator {\n  toJSON() {\n    return {};\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  [inspect.custom]() {\n    return Object.assign(Object.create({\n      constructor: this.constructor\n    }), this.toJSON());\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    PresentationValidatorFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_presentationvalidator_free(ptr);\n  }\n  /**\n  * Validate a `Presentation`.\n  *\n  * The following properties are validated according to `options`:\n  * - the semantic structure of the presentation,\n  * - the holder's signature,\n  * - the relationship between the holder and the credential subjects,\n  * - the signatures and some properties of the constituent credentials (see\n  * `CredentialValidator::validate`).\n  *\n  * ### Warning\n  * The lack of an error returned from this method is in of itself not enough to conclude that the presentation can be\n  * trusted. This section contains more information on additional checks that should be carried out before and after\n  * calling this method.\n  *\n  * #### The state of the supplied DID Documents.\n  * The caller must ensure that the DID Documents in `holder` and `issuers` are up-to-date. The convenience methods\n  * `Resolver::resolve_presentation_holder` and `Resolver::resolve_presentation_issuers`\n  * can help extract the latest available states of these DID Documents.\n  *\n  * #### Properties that are not validated\n  *  There are many properties defined in [The Verifiable Credentials Data Model](https://www.w3.org/TR/vc-data-model/) that are **not** validated, such as:\n  * `credentialStatus`, `type`, `credentialSchema`, `refreshService`, **and more**.\n  * These should be manually checked after validation, according to your requirements.\n  *\n  * ### Errors\n  * An error is returned whenever a validated condition is not satisfied.\n  * @param {Presentation} presentation\n  * @param {Document | ResolvedDocument} holder\n  * @param {Array<Document> | Array<ResolvedDocument>} issuers\n  * @param {PresentationValidationOptions} options\n  * @param {number} fail_fast\n  */\n  static validate(presentation, holder, issuers, options, fail_fast) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      _assertClass(presentation, Presentation);\n      _assertClass(options, PresentationValidationOptions);\n      wasm.presentationvalidator_validate(retptr, presentation.ptr, addBorrowedObject(holder), addBorrowedObject(issuers), options.ptr, fail_fast);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      if (r1) {\n        throw takeObject(r0);\n      }\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Verify the presentation's signature using the resolved document of the holder.\n  *\n  * ### Warning\n  * The caller must ensure that the DID Document of the holder is up-to-date.\n  *\n  * ### Errors\n  * Fails if the `holder` does not match the `presentation`'s holder property.\n  * Fails if signature verification against the holder document fails.\n  * @param {Presentation} presentation\n  * @param {Document | ResolvedDocument} holder\n  * @param {VerifierOptions} options\n  */\n  static verifyPresentationSignature(presentation, holder, options) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      _assertClass(presentation, Presentation);\n      _assertClass(options, VerifierOptions);\n      wasm.presentationvalidator_verifyPresentationSignature(retptr, presentation.ptr, addBorrowedObject(holder), options.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      if (r1) {\n        throw takeObject(r0);\n      }\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Validates the semantic structure of the `Presentation`.\n  * @param {Presentation} presentation\n  */\n  static checkStructure(presentation) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      _assertClass(presentation, Presentation);\n      wasm.presentationvalidator_checkStructure(retptr, presentation.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      if (r1) {\n        throw takeObject(r0);\n      }\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n}\nmodule.exports.PresentationValidator = PresentationValidator;\nconst ProofFinalization = new FinalizationRegistry(ptr => wasm.__wbg_proof_free(ptr));\n/**\n* A digital signature.\n*\n* For field definitions see: https://w3c-ccg.github.io/security-vocab/\n*/\nclass Proof {\n  static __wrap(ptr) {\n    const obj = Object.create(Proof.prototype);\n    obj.ptr = ptr;\n    ProofFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  toJSON() {\n    return {};\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  [inspect.custom]() {\n    return Object.assign(Object.create({\n      constructor: this.constructor\n    }), this.toJSON());\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    ProofFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_proof_free(ptr);\n  }\n  /**\n  * Returns a copy of the proof type.\n  * @returns {string}\n  */\n  type() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.proof_type(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * Returns a copy of the proof value string.\n  * @returns {string}\n  */\n  value() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.proof_value(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * Returns a copy of the identifier of the DID method used to create this proof.\n  * @returns {string}\n  */\n  verificationMethod() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.proof_verificationMethod(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * When the proof was generated.\n  * @returns {Timestamp | undefined}\n  */\n  created() {\n    const ret = wasm.proof_created(this.ptr);\n    return ret === 0 ? undefined : Timestamp.__wrap(ret);\n  }\n  /**\n  * When the proof expires.\n  * @returns {Timestamp | undefined}\n  */\n  expires() {\n    const ret = wasm.proof_expires(this.ptr);\n    return ret === 0 ? undefined : Timestamp.__wrap(ret);\n  }\n  /**\n  * Challenge from a proof requester to mitigate replay attacks.\n  * @returns {string | undefined}\n  */\n  challenge() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.proof_challenge(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      let v0;\n      if (r0 !== 0) {\n        v0 = getStringFromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n      }\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Domain for which a proof is valid to mitigate replay attacks.\n  * @returns {string | undefined}\n  */\n  domain() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.proof_domain(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      let v0;\n      if (r0 !== 0) {\n        v0 = getStringFromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n      }\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Purpose for which the proof was generated.\n  * @returns {ProofPurpose | undefined}\n  */\n  purpose() {\n    const ret = wasm.proof_purpose(this.ptr);\n    return ret === 0 ? undefined : ProofPurpose.__wrap(ret);\n  }\n  /**\n  * Serializes a `Proof` to a JSON object.\n  * @returns {any}\n  */\n  toJSON() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.proof_toJSON(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Deserializes a `Proof` from a JSON object.\n  * @param {any} json\n  * @returns {Proof}\n  */\n  static fromJSON(json) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.proof_fromJSON(retptr, addBorrowedObject(json));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return Proof.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Deep clones the object.\n  * @returns {Proof}\n  */\n  clone() {\n    const ret = wasm.proof_clone(this.ptr);\n    return Proof.__wrap(ret);\n  }\n}\nmodule.exports.Proof = Proof;\nconst ProofOptionsFinalization = new FinalizationRegistry(ptr => wasm.__wbg_proofoptions_free(ptr));\n/**\n* Holds additional options for creating signatures.\n* See `IProofOptions`.\n*/\nclass ProofOptions {\n  static __wrap(ptr) {\n    const obj = Object.create(ProofOptions.prototype);\n    obj.ptr = ptr;\n    ProofOptionsFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    ProofOptionsFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_proofoptions_free(ptr);\n  }\n  /**\n  * Creates a new `ProofOptions` from the given fields.\n  *\n  * Throws an error if any of the options are invalid.\n  * @param {IProofOptions} options\n  */\n  constructor(options) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.proofoptions_new(retptr, addHeapObject(options));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return ProofOptions.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Creates a new `ProofOptions` with default options.\n  * @returns {ProofOptions}\n  */\n  static default() {\n    const ret = wasm.proofoptions_default();\n    return ProofOptions.__wrap(ret);\n  }\n  /**\n  * Deep clones the object.\n  * @returns {ProofOptions}\n  */\n  clone() {\n    const ret = wasm.proofoptions_clone(this.ptr);\n    return ProofOptions.__wrap(ret);\n  }\n}\nmodule.exports.ProofOptions = ProofOptions;\nconst ProofPurposeFinalization = new FinalizationRegistry(ptr => wasm.__wbg_proofpurpose_free(ptr));\n/**\n* Associates a purpose with a {@link Proof}.\n*\n* See https://w3c-ccg.github.io/security-vocab/#proofPurpose\n*/\nclass ProofPurpose {\n  static __wrap(ptr) {\n    const obj = Object.create(ProofPurpose.prototype);\n    obj.ptr = ptr;\n    ProofPurposeFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  toJSON() {\n    return {};\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  [inspect.custom]() {\n    return Object.assign(Object.create({\n      constructor: this.constructor\n    }), this.toJSON());\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    ProofPurposeFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_proofpurpose_free(ptr);\n  }\n  /**\n  * Purpose is to assert a claim.\n  * See https://www.w3.org/TR/did-core/#assertion\n  * @returns {ProofPurpose}\n  */\n  static assertionMethod() {\n    const ret = wasm.proofpurpose_assertionMethod();\n    return ProofPurpose.__wrap(ret);\n  }\n  /**\n  * Purpose is to authenticate the signer.\n  * See https://www.w3.org/TR/did-core/#authentication\n  * @returns {ProofPurpose}\n  */\n  static authentication() {\n    const ret = wasm.proofpurpose_authentication();\n    return ProofPurpose.__wrap(ret);\n  }\n  /**\n  * Serializes a `ProofPurpose` to a JSON object.\n  * @returns {any}\n  */\n  toJSON() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.proofpurpose_toJSON(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Deserializes a `ProofPurpose` from a JSON object.\n  * @param {any} json\n  * @returns {ProofPurpose}\n  */\n  static fromJSON(json) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.proofpurpose_fromJSON(retptr, addBorrowedObject(json));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return ProofPurpose.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Deep clones the object.\n  * @returns {ProofPurpose}\n  */\n  clone() {\n    const ret = wasm.proofpurpose_clone(this.ptr);\n    return ProofPurpose.__wrap(ret);\n  }\n}\nmodule.exports.ProofPurpose = ProofPurpose;\nconst ReceiptFinalization = new FinalizationRegistry(ptr => wasm.__wbg_receipt_free(ptr));\n/**\n*/\nclass Receipt {\n  static __wrap(ptr) {\n    const obj = Object.create(Receipt.prototype);\n    obj.ptr = ptr;\n    ReceiptFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  toJSON() {\n    return {};\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  [inspect.custom]() {\n    return Object.assign(Object.create({\n      constructor: this.constructor\n    }), this.toJSON());\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    ReceiptFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_receipt_free(ptr);\n  }\n  /**\n  * Returns a copy of the associated IOTA Tangle `Network`.\n  * @returns {Network}\n  */\n  network() {\n    const ret = wasm.receipt_network(this.ptr);\n    return Network.__wrap(ret);\n  }\n  /**\n  * Returns a copy of the message `id`.\n  * @returns {string}\n  */\n  messageId() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.receipt_messageId(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * Returns a copy of the message `network_id`.\n  * @returns {string}\n  */\n  networkId() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.receipt_networkId(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * Returns a copy of the message `nonce`.\n  * @returns {string}\n  */\n  nonce() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.receipt_nonce(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * Serializes a `Receipt` as a JSON object.\n  * @returns {any}\n  */\n  toJSON() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.receipt_toJSON(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Deserializes a `Receipt` from a JSON object.\n  * @param {any} json\n  * @returns {Receipt}\n  */\n  static fromJSON(json) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.receipt_fromJSON(retptr, addBorrowedObject(json));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return Receipt.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Deep clones the object.\n  * @returns {Receipt}\n  */\n  clone() {\n    const ret = wasm.receipt_clone(this.ptr);\n    return Receipt.__wrap(ret);\n  }\n}\nmodule.exports.Receipt = Receipt;\nconst ResolvedDocumentFinalization = new FinalizationRegistry(ptr => wasm.__wbg_resolveddocument_free(ptr));\n/**\n* An IOTA DID document resolved from the Tangle. Represents an integration chain message possibly\n* merged with one or more `DiffMessages`.\n*/\nclass ResolvedDocument {\n  static __wrap(ptr) {\n    const obj = Object.create(ResolvedDocument.prototype);\n    obj.ptr = ptr;\n    ResolvedDocumentFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  toJSON() {\n    return {};\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  [inspect.custom]() {\n    return Object.assign(Object.create({\n      constructor: this.constructor\n    }), this.toJSON());\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    ResolvedDocumentFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_resolveddocument_free(ptr);\n  }\n  /**\n  * Attempts to merge changes from a `DiffMessage` into this document and\n  * updates the `ResolvedDocument::diffMessageId`.\n  *\n  * If merging fails the document remains unmodified, otherwise this represents\n  * the merged document state.\n  *\n  * See `Document::mergeDiff`.\n  *\n  * # Errors\n  *\n  * Fails if the merge operation or signature verification on the diff fails.\n  *\n  * @deprecated since 0.5.0, diff chain features are slated for removal.\n  * @param {DiffMessage} diff_message\n  */\n  mergeDiffMessage(diff_message) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      _assertClass(diff_message, DiffMessage);\n      wasm.resolveddocument_mergeDiffMessage(retptr, this.ptr, diff_message.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      if (r1) {\n        throw takeObject(r0);\n      }\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns a copy of the inner DID document.\n  *\n  * NOTE: If the `ResolvedDocument` is no longer needed after calling this method\n  * then consider using `intoDocument()` for efficiency.\n  * @returns {Document}\n  */\n  document() {\n    const ret = wasm.resolveddocument_document(this.ptr);\n    return Document.__wrap(ret);\n  }\n  /**\n  * Consumes this object and returns the inner DID document.\n  *\n  * NOTE: trying to use the `ResolvedDocument` after calling this will throw an error.\n  * @returns {Document}\n  */\n  intoDocument() {\n    const ptr = this.__destroy_into_raw();\n    const ret = wasm.resolveddocument_intoDocument(ptr);\n    return Document.__wrap(ret);\n  }\n  /**\n  * Returns a copy of the diff chain message id.\n  *\n  * @deprecated since 0.5.0, diff chain features are slated for removal.\n  * @returns {string}\n  */\n  diffMessageId() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.resolveddocument_diffMessageId(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * Sets the diff chain message id.\n  *\n  * @deprecated since 0.5.0, diff chain features are slated for removal.\n  * @param {string} value\n  */\n  setDiffMessageId(value) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      const ptr0 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      const len0 = WASM_VECTOR_LEN;\n      wasm.resolveddocument_setDiffMessageId(retptr, this.ptr, ptr0, len0);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      if (r1) {\n        throw takeObject(r0);\n      }\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns a copy of the integration chain message id.\n  * @returns {string}\n  */\n  integrationMessageId() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.resolveddocument_integrationMessageId(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * Sets the integration chain message id.\n  * @param {string} value\n  */\n  setIntegrationMessageId(value) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      const ptr0 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      const len0 = WASM_VECTOR_LEN;\n      wasm.resolveddocument_setIntegrationMessageId(retptr, this.ptr, ptr0, len0);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      if (r1) {\n        throw takeObject(r0);\n      }\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Serializes a `Document` object as a JSON object.\n  * @returns {any}\n  */\n  toJSON() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.resolveddocument_toJSON(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Deserializes a `Document` object from a JSON object.\n  * @param {any} json\n  * @returns {ResolvedDocument}\n  */\n  static fromJSON(json) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.resolveddocument_fromJSON(retptr, addBorrowedObject(json));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return ResolvedDocument.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Deep clones the object.\n  * @returns {ResolvedDocument}\n  */\n  clone() {\n    const ret = wasm.resolveddocument_clone(this.ptr);\n    return ResolvedDocument.__wrap(ret);\n  }\n}\nmodule.exports.ResolvedDocument = ResolvedDocument;\nconst ResolverFinalization = new FinalizationRegistry(ptr => wasm.__wbg_resolver_free(ptr));\n/**\n*/\nclass Resolver {\n  static __wrap(ptr) {\n    const obj = Object.create(Resolver.prototype);\n    obj.ptr = ptr;\n    ResolverFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    ResolverFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_resolver_free(ptr);\n  }\n  /**\n  * Constructs a new `Resolver` with a default `Client` for\n  * the `Mainnet`.\n  */\n  constructor() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.resolver_new(retptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return Resolver.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns a {@link ResolverBuilder} to construct a new `Resolver`.\n  * @returns {ResolverBuilder}\n  */\n  static builder() {\n    const ret = wasm.resolver_builder();\n    return ResolverBuilder.__wrap(ret);\n  }\n  /**\n  * Returns the `Client` corresponding to the given network name if one exists.\n  * @param {string} network_name\n  * @returns {Client | undefined}\n  */\n  getClient(network_name) {\n    const ptr0 = passStringToWasm0(network_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = wasm.resolver_getClient(this.ptr, ptr0, len0);\n    return ret === 0 ? undefined : Client.__wrap(ret);\n  }\n  /**\n  * Fetches the `Document` of the given `DID`.\n  * @param {DID | string} did\n  * @returns {Promise<ResolvedDocument>}\n  */\n  resolve(did) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.resolver_resolve(retptr, this.ptr, addHeapObject(did));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Fetches the `DocumentHistory` of the given `DID`.\n  * @param {DID | string} did\n  * @returns {Promise<DocumentHistory>}\n  */\n  resolveHistory(did) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.resolver_resolveHistory(retptr, this.ptr, addHeapObject(did));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns the `DiffChainHistory` of a diff chain starting from a `Document` on the\n  * integration chain.\n  *\n  * NOTE: the document must have been published to the Tangle and have a valid message id.\n  *\n  * @deprecated since 0.5.0, diff chain features are slated for removal.\n  * @param {ResolvedDocument} document\n  * @returns {Promise<DiffChainHistory>}\n  */\n  resolveDiffHistory(document) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      _assertClass(document, ResolvedDocument);\n      wasm.resolver_resolveDiffHistory(retptr, this.ptr, document.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Fetches the DID Document of the issuer on a `Credential`.\n  *\n  * ### Errors\n  *\n  * Errors if the issuer URL is not a valid `DID` or document resolution fails.\n  * @param {Credential} credential\n  * @returns {Promise<ResolvedDocument>}\n  */\n  resolveCredentialIssuer(credential) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      _assertClass(credential, Credential);\n      wasm.resolver_resolveCredentialIssuer(retptr, this.ptr, credential.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Fetches all DID Documents of `Credential` issuers contained in a `Presentation`.\n  * Issuer documents are returned in arbitrary order.\n  *\n  * ### Errors\n  *\n  * Errors if any issuer URL is not a valid `DID` or document resolution fails.\n  * @param {Presentation} presentation\n  * @returns {Promise<Array<ResolvedDocument>>}\n  */\n  resolvePresentationIssuers(presentation) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      _assertClass(presentation, Presentation);\n      wasm.resolver_resolvePresentationIssuers(retptr, this.ptr, presentation.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Fetches the DID Document of the holder of a `Presentation`.\n  *\n  * ### Errors\n  *\n  * Errors if the holder URL is missing, is not a valid `DID`, or document resolution fails.\n  * @param {Presentation} presentation\n  * @returns {Promise<ResolvedDocument>}\n  */\n  resolvePresentationHolder(presentation) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      _assertClass(presentation, Presentation);\n      wasm.resolver_resolvePresentationHolder(retptr, this.ptr, presentation.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Verifies a `Presentation`.\n  *\n  * ### Important\n  * See `PresentationValidator::validate` for information about which properties get\n  * validated and what is expected of the optional arguments `holder` and `issuer`.\n  *\n  * ### Resolution\n  * The DID Documents for the `holder` and `issuers` are optionally resolved if not given.\n  * If you already have up-to-date versions of these DID Documents, you may want\n  * to use `PresentationValidator::validate`.\n  * See also `Resolver::resolvePresentationIssuers` and `Resolver::resolvePresentationHolder`.\n  *\n  * ### Errors\n  * Errors from resolving the holder and issuer DID Documents, if not provided, will be returned immediately.\n  * Otherwise, errors from validating the presentation and its credentials will be returned\n  * according to the `fail_fast` parameter.\n  * @param {Presentation} presentation\n  * @param {PresentationValidationOptions} options\n  * @param {number} fail_fast\n  * @param {ResolvedDocument | undefined} holder\n  * @param {Array<ResolvedDocument> | undefined} issuers\n  * @returns {Promise<void>}\n  */\n  verifyPresentation(presentation, options, fail_fast, holder, issuers) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      _assertClass(presentation, Presentation);\n      _assertClass(options, PresentationValidationOptions);\n      wasm.resolver_verifyPresentation(retptr, this.ptr, presentation.ptr, options.ptr, fail_fast, isLikeNone(holder) ? 0 : addHeapObject(holder), isLikeNone(issuers) ? 0 : addHeapObject(issuers));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n}\nmodule.exports.Resolver = Resolver;\nconst ResolverBuilderFinalization = new FinalizationRegistry(ptr => wasm.__wbg_resolverbuilder_free(ptr));\n/**\n* Builder for configuring [`Clients`][Client] when constructing a [`Resolver`].\n*/\nclass ResolverBuilder {\n  static __wrap(ptr) {\n    const obj = Object.create(ResolverBuilder.prototype);\n    obj.ptr = ptr;\n    ResolverBuilderFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    ResolverBuilderFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_resolverbuilder_free(ptr);\n  }\n  /**\n  * Constructs a new `ResolverBuilder` with no `Clients` configured.\n  */\n  constructor() {\n    const ret = wasm.resolverbuilder_new();\n    return ResolverBuilder.__wrap(ret);\n  }\n  /**\n  * Inserts a `Client`.\n  *\n  * NOTE: replaces any previous `Client` or `Config` with the same network name.\n  * @param {Client} client\n  * @returns {ResolverBuilder}\n  */\n  client(client) {\n    const ptr = this.__destroy_into_raw();\n    _assertClass(client, Client);\n    const ret = wasm.resolverbuilder_client(ptr, client.ptr);\n    return ResolverBuilder.__wrap(ret);\n  }\n  /**\n  * Inserts a `Config` used to create a `Client`.\n  *\n  * NOTE: replaces any previous `Client` or `Config` with the same network name.\n  * @param {IClientConfig} config\n  * @returns {ResolverBuilder}\n  */\n  clientConfig(config) {\n    try {\n      const ptr = this.__destroy_into_raw();\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.resolverbuilder_clientConfig(retptr, ptr, addHeapObject(config));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return ResolverBuilder.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Constructs a new [`Resolver`] based on the builder configuration.\n  * @returns {Promise<Resolver>}\n  */\n  build() {\n    const ptr = this.__destroy_into_raw();\n    const ret = wasm.resolverbuilder_build(ptr);\n    return takeObject(ret);\n  }\n}\nmodule.exports.ResolverBuilder = ResolverBuilder;\nconst RevocationBitmapFinalization = new FinalizationRegistry(ptr => wasm.__wbg_revocationbitmap_free(ptr));\n/**\n* A compressed bitmap for managing credential revocation.\n*/\nclass RevocationBitmap {\n  static __wrap(ptr) {\n    const obj = Object.create(RevocationBitmap.prototype);\n    obj.ptr = ptr;\n    RevocationBitmapFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  toJSON() {\n    return {};\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  [inspect.custom]() {\n    return Object.assign(Object.create({\n      constructor: this.constructor\n    }), this.toJSON());\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    RevocationBitmapFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_revocationbitmap_free(ptr);\n  }\n  /**\n  * Creates a new `RevocationBitmap` instance.\n  */\n  constructor() {\n    const ret = wasm.revocationbitmap_new();\n    return RevocationBitmap.__wrap(ret);\n  }\n  /**\n  * The name of the service type.\n  * @returns {string}\n  */\n  static type() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.revocationbitmap_type(retptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * Returns `true` if the credential at the given `index` is revoked.\n  * @param {number} index\n  * @returns {boolean}\n  */\n  isRevoked(index) {\n    const ret = wasm.revocationbitmap_isRevoked(this.ptr, index);\n    return ret !== 0;\n  }\n  /**\n  * Mark the given index as revoked.\n  *\n  * Returns true if the index was absent from the set.\n  * @param {number} index\n  * @returns {boolean}\n  */\n  revoke(index) {\n    const ret = wasm.revocationbitmap_revoke(this.ptr, index);\n    return ret !== 0;\n  }\n  /**\n  * Mark the index as not revoked.\n  *\n  * Returns true if the index was present in the set.\n  * @param {number} index\n  * @returns {boolean}\n  */\n  unrevoke(index) {\n    const ret = wasm.revocationbitmap_unrevoke(this.ptr, index);\n    return ret !== 0;\n  }\n  /**\n  * Returns the number of revoked credentials.\n  * @returns {number}\n  */\n  len() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.revocationbitmap_len(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return r0 >>> 0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Return the bitmap as a data url embedded in a service endpoint.\n  * @returns {string | string[] | Map<string, string[]>}\n  */\n  toEndpoint() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.revocationbitmap_toEndpoint(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Construct a `RevocationBitmap` from a data `url`.\n  * @param {string | string[] | Map<string, string[]>} endpoint\n  * @returns {RevocationBitmap}\n  */\n  static fromEndpoint(endpoint) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.revocationbitmap_fromEndpoint(retptr, addHeapObject(endpoint));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return RevocationBitmap.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n}\nmodule.exports.RevocationBitmap = RevocationBitmap;\nconst ServiceFinalization = new FinalizationRegistry(ptr => wasm.__wbg_service_free(ptr));\n/**\n* A DID Document Service used to enable trusted interactions associated\n* with a DID subject.\n*\n* See: https://www.w3.org/TR/did-core/#services\n*/\nclass Service {\n  static __wrap(ptr) {\n    const obj = Object.create(Service.prototype);\n    obj.ptr = ptr;\n    ServiceFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  toJSON() {\n    return {};\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  [inspect.custom]() {\n    return Object.assign(Object.create({\n      constructor: this.constructor\n    }), this.toJSON());\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    ServiceFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_service_free(ptr);\n  }\n  /**\n  * @param {IService} service\n  */\n  constructor(service) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.service_new(retptr, addHeapObject(service));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return Service.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns a copy of the `Service` id.\n  * @returns {DIDUrl}\n  */\n  id() {\n    const ret = wasm.service_id(this.ptr);\n    return DIDUrl.__wrap(ret);\n  }\n  /**\n  * Returns a copy of the `Service` type.\n  * @returns {string}\n  */\n  type() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.service_type(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * Returns a copy of the `Service` endpoint.\n  * @returns {string | string[] | Map<string, string[]>}\n  */\n  serviceEndpoint() {\n    const ret = wasm.service_serviceEndpoint(this.ptr);\n    return takeObject(ret);\n  }\n  /**\n  * Returns a copy of the custom properties on the `Service`.\n  * @returns {Map<string, any>}\n  */\n  properties() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.service_properties(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Serializes a `Service` object as a JSON object.\n  * @returns {any}\n  */\n  toJSON() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.service_toJSON(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Deserializes a `Service` object from a JSON object.\n  * @param {any} value\n  * @returns {Service}\n  */\n  static fromJSON(value) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.service_fromJSON(retptr, addBorrowedObject(value));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return Service.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Deep clones the object.\n  * @returns {Service}\n  */\n  clone() {\n    const ret = wasm.service_clone(this.ptr);\n    return Service.__wrap(ret);\n  }\n}\nmodule.exports.Service = Service;\nconst SignatureFinalization = new FinalizationRegistry(ptr => wasm.__wbg_signature_free(ptr));\n/**\n*/\nclass Signature {\n  static __wrap(ptr) {\n    const obj = Object.create(Signature.prototype);\n    obj.ptr = ptr;\n    SignatureFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  toJSON() {\n    return {};\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  [inspect.custom]() {\n    return Object.assign(Object.create({\n      constructor: this.constructor\n    }), this.toJSON());\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    SignatureFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_signature_free(ptr);\n  }\n  /**\n  * Creates a new `Signature`.\n  * @param {Uint8Array} data\n  */\n  constructor(data) {\n    const ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = wasm.signature_new(ptr0, len0);\n    return Signature.__wrap(ret);\n  }\n  /**\n  * Returns a copy of the signature as a `UInt8Array`.\n  * @returns {Uint8Array}\n  */\n  asBytes() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.signature_asBytes(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var v0 = getArrayU8FromWasm0(r0, r1).slice();\n      wasm.__wbindgen_free(r0, r1 * 1);\n      return v0;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Serializes a `Signature` as a JSON object.\n  * @returns {any}\n  */\n  toJSON() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.signature_toJSON(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Deserializes a JSON object as `Signature`.\n  * @param {any} json_value\n  * @returns {Signature}\n  */\n  static fromJSON(json_value) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.signature_fromJSON(retptr, addHeapObject(json_value));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return Signature.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n}\nmodule.exports.Signature = Signature;\nconst StorageTestSuiteFinalization = new FinalizationRegistry(ptr => wasm.__wbg_storagetestsuite_free(ptr));\n/**\n* A test suite for the `Storage` interface.\n*\n* This module contains a set of tests that a correct storage implementation\n* should pass. Note that not every edge case is tested.\n*\n* Tests usually rely on multiple interface methods being implemented, so they should only\n* be run on a fully implemented version. That's why there is not a single test case for every\n* interface method.\n*/\nclass StorageTestSuite {\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    StorageTestSuiteFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_storagetestsuite_free(ptr);\n  }\n  /**\n  * @param {Storage} storage\n  * @returns {Promise<void>}\n  */\n  static didCreateGenerateKeyTest(storage) {\n    const ret = wasm.storagetestsuite_didCreateGenerateKeyTest(addHeapObject(storage));\n    return takeObject(ret);\n  }\n  /**\n  * @param {Storage} storage\n  * @returns {Promise<void>}\n  */\n  static didCreatePrivateKeyTest(storage) {\n    const ret = wasm.storagetestsuite_didCreatePrivateKeyTest(addHeapObject(storage));\n    return takeObject(ret);\n  }\n  /**\n  * @param {Storage} storage\n  * @returns {Promise<void>}\n  */\n  static didListTest(storage) {\n    const ret = wasm.storagetestsuite_didListTest(addHeapObject(storage));\n    return takeObject(ret);\n  }\n  /**\n  * @param {Storage} storage\n  * @returns {Promise<void>}\n  */\n  static didPurgeTest(storage) {\n    const ret = wasm.storagetestsuite_didPurgeTest(addHeapObject(storage));\n    return takeObject(ret);\n  }\n  /**\n  * @param {Storage} storage\n  * @returns {Promise<void>}\n  */\n  static keyGenerateTest(storage) {\n    const ret = wasm.storagetestsuite_keyGenerateTest(addHeapObject(storage));\n    return takeObject(ret);\n  }\n  /**\n  * @param {Storage} storage\n  * @returns {Promise<void>}\n  */\n  static keyDeleteTest(storage) {\n    const ret = wasm.storagetestsuite_keyDeleteTest(addHeapObject(storage));\n    return takeObject(ret);\n  }\n  /**\n  * @param {Storage} storage\n  * @returns {Promise<void>}\n  */\n  static keyInsertTest(storage) {\n    const ret = wasm.storagetestsuite_keyInsertTest(addHeapObject(storage));\n    return takeObject(ret);\n  }\n  /**\n  * @param {Storage} storage\n  * @returns {Promise<void>}\n  */\n  static keySignEd25519Test(storage) {\n    const ret = wasm.storagetestsuite_keySignEd25519Test(addHeapObject(storage));\n    return takeObject(ret);\n  }\n  /**\n  * @param {Storage} alice_storage\n  * @param {Storage} bob_storage\n  * @returns {Promise<void>}\n  */\n  static encryptionTest(alice_storage, bob_storage) {\n    const ret = wasm.storagetestsuite_encryptionTest(addHeapObject(alice_storage), addHeapObject(bob_storage));\n    return takeObject(ret);\n  }\n}\nmodule.exports.StorageTestSuite = StorageTestSuite;\nconst TimestampFinalization = new FinalizationRegistry(ptr => wasm.__wbg_timestamp_free(ptr));\n/**\n*/\nclass Timestamp {\n  static __wrap(ptr) {\n    const obj = Object.create(Timestamp.prototype);\n    obj.ptr = ptr;\n    TimestampFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  toJSON() {\n    return {};\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  [inspect.custom]() {\n    return Object.assign(Object.create({\n      constructor: this.constructor\n    }), this.toJSON());\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    TimestampFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_timestamp_free(ptr);\n  }\n  /**\n  * Parses a `Timestamp` from the provided input string.\n  * @param {string} input\n  * @returns {Timestamp}\n  */\n  static parse(input) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      const ptr0 = passStringToWasm0(input, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      const len0 = WASM_VECTOR_LEN;\n      wasm.timestamp_parse(retptr, ptr0, len0);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return Timestamp.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Creates a new `Timestamp` with the current date and time.\n  * @returns {Timestamp}\n  */\n  static nowUTC() {\n    const ret = wasm.timestamp_nowUTC();\n    return Timestamp.__wrap(ret);\n  }\n  /**\n  * Returns the `Timestamp` as an RFC 3339 `String`.\n  * @returns {string}\n  */\n  toRFC3339() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.timestamp_toRFC3339(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  /**\n  * Computes `self + duration`\n  *\n  * Returns `null` if the operation leads to a timestamp not in the valid range for [RFC 3339](https://tools.ietf.org/html/rfc3339).\n  * @param {Duration} duration\n  * @returns {Timestamp | undefined}\n  */\n  checkedAdd(duration) {\n    _assertClass(duration, Duration);\n    const ret = wasm.timestamp_checkedAdd(this.ptr, duration.ptr);\n    return ret === 0 ? undefined : Timestamp.__wrap(ret);\n  }\n  /**\n  * Computes `self - duration`\n  *\n  * Returns `null` if the operation leads to a timestamp not in the valid range for [RFC 3339](https://tools.ietf.org/html/rfc3339).\n  * @param {Duration} duration\n  * @returns {Timestamp | undefined}\n  */\n  checkedSub(duration) {\n    _assertClass(duration, Duration);\n    const ret = wasm.timestamp_checkedSub(this.ptr, duration.ptr);\n    return ret === 0 ? undefined : Timestamp.__wrap(ret);\n  }\n  /**\n  * Serializes a `Timestamp` as a JSON object.\n  * @returns {any}\n  */\n  toJSON() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.timestamp_toJSON(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Deserializes a `Timestamp` from a JSON object.\n  * @param {any} json\n  * @returns {Timestamp}\n  */\n  static fromJSON(json) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.timestamp_fromJSON(retptr, addBorrowedObject(json));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return Timestamp.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n}\nmodule.exports.Timestamp = Timestamp;\nconst VerificationMethodFinalization = new FinalizationRegistry(ptr => wasm.__wbg_verificationmethod_free(ptr));\n/**\n*/\nclass VerificationMethod {\n  static __wrap(ptr) {\n    const obj = Object.create(VerificationMethod.prototype);\n    obj.ptr = ptr;\n    VerificationMethodFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  toJSON() {\n    return {};\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  [inspect.custom]() {\n    return Object.assign(Object.create({\n      constructor: this.constructor\n    }), this.toJSON());\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    VerificationMethodFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_verificationmethod_free(ptr);\n  }\n  /**\n  * Creates a new `VerificationMethod` object from the given `did` and public key.\n  * @param {DID} did\n  * @param {number} key_type\n  * @param {Uint8Array} public_key\n  * @param {string} fragment\n  */\n  constructor(did, key_type, public_key, fragment) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      _assertClass(did, DID);\n      const ptr0 = passArray8ToWasm0(public_key, wasm.__wbindgen_malloc);\n      const len0 = WASM_VECTOR_LEN;\n      const ptr1 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      const len1 = WASM_VECTOR_LEN;\n      wasm.verificationmethod_new(retptr, did.ptr, key_type, ptr0, len0, ptr1, len1);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return VerificationMethod.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Returns a copy of the `id` `DIDUrl` of the `VerificationMethod` object.\n  * @returns {DIDUrl}\n  */\n  id() {\n    const ret = wasm.verificationmethod_id(this.ptr);\n    return DIDUrl.__wrap(ret);\n  }\n  /**\n  * Returns a copy of the `controller` `DID` of the `VerificationMethod` object.\n  * @returns {DID}\n  */\n  controller() {\n    const ret = wasm.verificationmethod_controller(this.ptr);\n    return DID.__wrap(ret);\n  }\n  /**\n  * Sets the `controller` `DID` of the `VerificationMethod` object.\n  * @param {DID} did\n  */\n  SetController(did) {\n    _assertClass(did, DID);\n    wasm.verificationmethod_SetController(this.ptr, did.ptr);\n  }\n  /**\n  * Returns a copy of the `VerificationMethod` type.\n  * @returns {MethodType}\n  */\n  type() {\n    const ret = wasm.verificationmethod_type(this.ptr);\n    return MethodType.__wrap(ret);\n  }\n  /**\n  * Returns a copy of the `VerificationMethod` public key data.\n  * @returns {MethodData}\n  */\n  data() {\n    const ret = wasm.verificationmethod_data(this.ptr);\n    return MethodData.__wrap(ret);\n  }\n  /**\n  * Serializes a `VerificationMethod` object as a JSON object.\n  * @returns {any}\n  */\n  toJSON() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.verificationmethod_toJSON(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Deserializes a `VerificationMethod` object from a JSON object.\n  * @param {any} value\n  * @returns {VerificationMethod}\n  */\n  static fromJSON(value) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.verificationmethod_fromJSON(retptr, addBorrowedObject(value));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return VerificationMethod.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Deep clones the object.\n  * @returns {VerificationMethod}\n  */\n  clone() {\n    const ret = wasm.verificationmethod_clone(this.ptr);\n    return VerificationMethod.__wrap(ret);\n  }\n}\nmodule.exports.VerificationMethod = VerificationMethod;\nconst VerifierOptionsFinalization = new FinalizationRegistry(ptr => wasm.__wbg_verifieroptions_free(ptr));\n/**\n* Holds additional proof verification options.\n* See `IVerifierOptions`.\n*/\nclass VerifierOptions {\n  static __wrap(ptr) {\n    const obj = Object.create(VerifierOptions.prototype);\n    obj.ptr = ptr;\n    VerifierOptionsFinalization.register(obj, obj.ptr, obj);\n    return obj;\n  }\n  toJSON() {\n    return {};\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  [inspect.custom]() {\n    return Object.assign(Object.create({\n      constructor: this.constructor\n    }), this.toJSON());\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    VerifierOptionsFinalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_verifieroptions_free(ptr);\n  }\n  /**\n  * Creates a new `VerifierOptions` from the given fields.\n  *\n  * Throws an error if any of the options are invalid.\n  * @param {IVerifierOptions} options\n  */\n  constructor(options) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.verifieroptions_new(retptr, addHeapObject(options));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return VerifierOptions.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Creates a new `VerifierOptions` with default options.\n  * @returns {VerifierOptions}\n  */\n  static default() {\n    const ret = wasm.verifieroptions_default();\n    return VerifierOptions.__wrap(ret);\n  }\n  /**\n  * Serializes a `VerifierOptions` as a JSON object.\n  * @returns {any}\n  */\n  toJSON() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.verifieroptions_toJSON(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Deserializes a `VerifierOptions` from a JSON object.\n  * @param {any} json\n  * @returns {VerifierOptions}\n  */\n  static fromJSON(json) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.verifieroptions_fromJSON(retptr, addBorrowedObject(json));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return VerifierOptions.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      heap[stack_pointer++] = undefined;\n    }\n  }\n  /**\n  * Deep clones the object.\n  * @returns {VerifierOptions}\n  */\n  clone() {\n    const ret = wasm.verifieroptions_clone(this.ptr);\n    return VerifierOptions.__wrap(ret);\n  }\n}\nmodule.exports.VerifierOptions = VerifierOptions;\nconst X25519Finalization = new FinalizationRegistry(ptr => wasm.__wbg_x25519_free(ptr));\n/**\n* An implementation of `X25519` Elliptic-curve Diffie-Hellman (ECDH) cryptographic key exchange.\n*/\nclass X25519 {\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    X25519Finalization.unregister(this);\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_x25519_free(ptr);\n  }\n  /**\n  * Length in bytes of an X25519 private key.\n  * @returns {number}\n  */\n  static PRIVATE_KEY_LENGTH() {\n    const ret = wasm.x25519_PRIVATE_KEY_LENGTH();\n    return ret >>> 0;\n  }\n  /**\n  * Length in bytes of an X25519 public key.\n  * @returns {number}\n  */\n  static PUBLIC_KEY_LENGTH() {\n    const ret = wasm.x25519_PUBLIC_KEY_LENGTH();\n    return ret >>> 0;\n  }\n  /**\n  * Performs Diffie-Hellman key exchange using the private key of the first party with the\n  * public key of the second party, resulting in a shared secret.\n  * @param {Uint8Array} privateKey\n  * @param {Uint8Array} publicKey\n  * @returns {Uint8Array}\n  */\n  static keyExchange(privateKey, publicKey) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      const ptr0 = passArray8ToWasm0(privateKey, wasm.__wbindgen_malloc);\n      const len0 = WASM_VECTOR_LEN;\n      const ptr1 = passArray8ToWasm0(publicKey, wasm.__wbindgen_malloc);\n      const len1 = WASM_VECTOR_LEN;\n      wasm.x25519_keyExchange(retptr, ptr0, len0, ptr1, len1);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      var r3 = getInt32Memory0()[retptr / 4 + 3];\n      if (r3) {\n        throw takeObject(r2);\n      }\n      var v2 = getArrayU8FromWasm0(r0, r1).slice();\n      wasm.__wbindgen_free(r0, r1 * 1);\n      return v2;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Transforms an `Ed25519` private key to an `X25519` private key.\n  *\n  * This is possible because Ed25519 is birationally equivalent to Curve25519 used by X25519.\n  * @param {Uint8Array} privateKey\n  * @returns {Uint8Array}\n  */\n  static Ed25519toX25519Private(privateKey) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      const ptr0 = passArray8ToWasm0(privateKey, wasm.__wbindgen_malloc);\n      const len0 = WASM_VECTOR_LEN;\n      wasm.x25519_Ed25519toX25519Private(retptr, ptr0, len0);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      var r3 = getInt32Memory0()[retptr / 4 + 3];\n      if (r3) {\n        throw takeObject(r2);\n      }\n      var v1 = getArrayU8FromWasm0(r0, r1).slice();\n      wasm.__wbindgen_free(r0, r1 * 1);\n      return v1;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  /**\n  * Transforms an `Ed25519` public key to an `X25519` public key.\n  *\n  * This is possible because Ed25519 is birationally equivalent to Curve25519 used by X25519.\n  * @param {Uint8Array} publicKey\n  * @returns {Uint8Array}\n  */\n  static Ed25519toX25519Public(publicKey) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      const ptr0 = passArray8ToWasm0(publicKey, wasm.__wbindgen_malloc);\n      const len0 = WASM_VECTOR_LEN;\n      wasm.x25519_Ed25519toX25519Public(retptr, ptr0, len0);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      var r3 = getInt32Memory0()[retptr / 4 + 3];\n      if (r3) {\n        throw takeObject(r2);\n      }\n      var v1 = getArrayU8FromWasm0(r0, r1).slice();\n      wasm.__wbindgen_free(r0, r1 * 1);\n      return v1;\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n}\nmodule.exports.X25519 = X25519;\nmodule.exports.__wbg_forceIntegrationUpdate_641fd7b976adff69 = function (arg0) {\n  const ret = getObject(arg0).forceIntegrationUpdate;\n  return isLikeNone(ret) ? 0xFFFFFF : ret ? 1 : 0;\n};\nmodule.exports.__wbindgen_object_drop_ref = function (arg0) {\n  takeObject(arg0);\n};\nmodule.exports.__wbg_fragment_25296ef0b74e471c = function (arg0, arg1) {\n  const ret = getObject(arg1).fragment;\n  var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n  var len0 = WASM_VECTOR_LEN;\n  getInt32Memory0()[arg0 / 4 + 1] = len0;\n  getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\nmodule.exports.__wbg_relationships_c7202aa83d5786f9 = function (arg0) {\n  const ret = getObject(arg0).relationships;\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_fragment_e12c852962da3c2f = function (arg0, arg1) {\n  const ret = getObject(arg1).fragment;\n  var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n  var len0 = WASM_VECTOR_LEN;\n  getInt32Memory0()[arg0 / 4 + 1] = len0;\n  getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\nmodule.exports.__wbg_scope_5601b30729b55bad = function (arg0) {\n  const ret = getObject(arg0).scope;\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_content_f0d524fd72f59620 = function (arg0) {\n  const ret = getObject(arg0).content;\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_fragment_a25c44360edfc7ab = function (arg0, arg1) {\n  const ret = getObject(arg1).fragment;\n  var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n  var len0 = WASM_VECTOR_LEN;\n  getInt32Memory0()[arg0 / 4 + 1] = len0;\n  getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\nmodule.exports.__wbg_relationships_1bf1dd48031307c9 = function (arg0) {\n  const ret = getObject(arg0).relationships;\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_documenthistory_new = function (arg0) {\n  const ret = DocumentHistory.__wrap(arg0);\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_diffchainhistory_new = function (arg0) {\n  const ret = DiffChainHistory.__wrap(arg0);\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_account_new = function (arg0) {\n  const ret = Account.__wrap(arg0);\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_resolver_new = function (arg0) {\n  const ret = Resolver.__wrap(arg0);\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_signWith_26510522782c9743 = function (arg0, arg1) {\n  const ret = getObject(arg1).signWith;\n  var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n  var len0 = WASM_VECTOR_LEN;\n  getInt32Memory0()[arg0 / 4 + 1] = len0;\n  getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\nmodule.exports.__wbg_endpoint_89ffe3f61253a70c = function (arg0) {\n  const ret = getObject(arg0).endpoint;\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_properties_b83a47dc5145e6b1 = function (arg0) {\n  const ret = getObject(arg0).properties;\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_urls_2b5b5612ab9e9967 = function (arg0) {\n  const ret = getObject(arg0).urls;\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_controllers_4399724802a69314 = function (arg0) {\n  const ret = getObject(arg0).controllers;\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_credential_new = function (arg0) {\n  const ret = Credential.__wrap(arg0);\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_resolveddocument_new = function (arg0) {\n  const ret = ResolvedDocument.__wrap(arg0);\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_service_new = function (arg0) {\n  const ret = Service.__wrap(arg0);\n  return addHeapObject(ret);\n};\nmodule.exports.__wbindgen_string_new = function (arg0, arg1) {\n  const ret = getStringFromWasm0(arg0, arg1);\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_diffmessage_new = function (arg0) {\n  const ret = DiffMessage.__wrap(arg0);\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_did_new = function (arg0) {\n  const ret = DID.__wrap(arg0);\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_verificationmethod_new = function (arg0) {\n  const ret = VerificationMethod.__wrap(arg0);\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_privateKey_f7e2aae190433242 = function (arg0, arg1) {\n  const ret = getObject(arg1).privateKey;\n  var ptr0 = isLikeNone(ret) ? 0 : passArray8ToWasm0(ret, wasm.__wbindgen_malloc);\n  var len0 = WASM_VECTOR_LEN;\n  getInt32Memory0()[arg0 / 4 + 1] = len0;\n  getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\nmodule.exports.__wbg_autopublish_9d92161d27e897c1 = function (arg0) {\n  const ret = getObject(arg0).autopublish;\n  return isLikeNone(ret) ? 0xFFFFFF : ret ? 1 : 0;\n};\nmodule.exports.__wbg_autosave_b8db1c486313174b = function (arg0) {\n  const ret = getObject(arg0).autosave;\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_clientConfig_3c2dd50a526ba96a = function (arg0) {\n  const ret = getObject(arg0).clientConfig;\n  return isLikeNone(ret) ? 0 : addHeapObject(ret);\n};\nmodule.exports.__wbg_storage_74384a6249104eeb = function (arg0) {\n  const ret = getObject(arg0).storage;\n  return isLikeNone(ret) ? 0 : addHeapObject(ret);\n};\nmodule.exports.__wbg_fragment_c8587d74bb1b41dd = function (arg0, arg1) {\n  const ret = getObject(arg1).fragment;\n  var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n  var len0 = WASM_VECTOR_LEN;\n  getInt32Memory0()[arg0 / 4 + 1] = len0;\n  getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\nmodule.exports.__wbg_fragment_e50e6d708e6d988c = function (arg0, arg1) {\n  const ret = getObject(arg1).fragment;\n  var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n  var len0 = WASM_VECTOR_LEN;\n  getInt32Memory0()[arg0 / 4 + 1] = len0;\n  getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\nmodule.exports.__wbg_client_new = function (arg0) {\n  const ret = Client.__wrap(arg0);\n  return addHeapObject(ret);\n};\nmodule.exports.__wbindgen_error_new = function (arg0, arg1) {\n  const ret = new Error(getStringFromWasm0(arg0, arg1));\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_receipt_new = function (arg0) {\n  const ret = Receipt.__wrap(arg0);\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_id_3dc663ab7a361b11 = function (arg0) {\n  const ret = getObject(arg0).id;\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_serviceEndpoint_d0df0dca54fd1088 = function (arg0) {\n  const ret = getObject(arg0).serviceEndpoint;\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_properties_7a9978c87641ff8d = function (arg0) {\n  const ret = getObject(arg0).properties;\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_type_61d3194948f52780 = function (arg0, arg1) {\n  const ret = getObject(arg1).type;\n  const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n  const len0 = WASM_VECTOR_LEN;\n  getInt32Memory0()[arg0 / 4 + 1] = len0;\n  getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\nmodule.exports.__wbg_presentation_new = function (arg0) {\n  const ret = Presentation.__wrap(arg0);\n  return addHeapObject(ret);\n};\nmodule.exports.__wbindgen_is_null = function (arg0) {\n  const ret = getObject(arg0) === null;\n  return ret;\n};\nmodule.exports.__wbindgen_is_undefined = function (arg0) {\n  const ret = getObject(arg0) === undefined;\n  return ret;\n};\nmodule.exports.__wbg_document_new = function (arg0) {\n  const ret = Document.__wrap(arg0);\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_encrypteddata_new = function (arg0) {\n  const ret = EncryptedData.__wrap(arg0);\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_flushChanges_1b3e7070edebd3c7 = function (arg0) {\n  const ret = getObject(arg0).flushChanges();\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_didList_837aa54393a8ecef = function (arg0) {\n  const ret = getObject(arg0).didList();\n  return addHeapObject(ret);\n};\nmodule.exports.__wbindgen_json_parse = function (arg0, arg1) {\n  const ret = JSON.parse(getStringFromWasm0(arg0, arg1));\n  return addHeapObject(ret);\n};\nmodule.exports.__wbindgen_json_serialize = function (arg0, arg1) {\n  const obj = getObject(arg1);\n  const ret = JSON.stringify(obj === undefined ? null : obj);\n  const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n  const len0 = WASM_VECTOR_LEN;\n  getInt32Memory0()[arg0 / 4 + 1] = len0;\n  getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\nmodule.exports.__wbg_fragment_2a56fdc975987578 = function (arg0, arg1) {\n  const ret = getObject(arg1).fragment;\n  var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n  var len0 = WASM_VECTOR_LEN;\n  getInt32Memory0()[arg0 / 4 + 1] = len0;\n  getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\nmodule.exports.__wbg_type_fea5cfdd0db34544 = function (arg0, arg1) {\n  const ret = getObject(arg1).type;\n  var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n  var len0 = WASM_VECTOR_LEN;\n  getInt32Memory0()[arg0 / 4 + 1] = len0;\n  getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\nmodule.exports.__wbg_didCreate_564518ce4160d06e = function (arg0, arg1, arg2, arg3, arg4, arg5, arg6) {\n  let v0;\n  if (arg5 !== 0) {\n    v0 = getArrayU8FromWasm0(arg5, arg6).slice();\n    wasm.__wbindgen_free(arg5, arg6 * 1);\n  }\n  const ret = getObject(arg0).didCreate(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4), v0);\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_didPurge_14c8f1f02cf5a5b5 = function (arg0, arg1) {\n  const ret = getObject(arg0).didPurge(DID.__wrap(arg1));\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_didExists_f3e119d2efa95097 = function (arg0, arg1) {\n  const ret = getObject(arg0).didExists(DID.__wrap(arg1));\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_keyGenerate_b15d8eba573d7ff9 = function (arg0, arg1, arg2, arg3, arg4) {\n  try {\n    const ret = getObject(arg0).keyGenerate(DID.__wrap(arg1), arg2 >>> 0, getStringFromWasm0(arg3, arg4));\n    return addHeapObject(ret);\n  } finally {\n    wasm.__wbindgen_free(arg3, arg4);\n  }\n};\nmodule.exports.__wbg_keyInsert_8a0e701b351551b6 = function (arg0, arg1, arg2, arg3, arg4) {\n  var v0 = getArrayU8FromWasm0(arg3, arg4).slice();\n  wasm.__wbindgen_free(arg3, arg4 * 1);\n  const ret = getObject(arg0).keyInsert(DID.__wrap(arg1), KeyLocation.__wrap(arg2), v0);\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_keyPublic_11a79e1b5f708b41 = function (arg0, arg1, arg2) {\n  const ret = getObject(arg0).keyPublic(DID.__wrap(arg1), KeyLocation.__wrap(arg2));\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_keyDelete_f01483f265a4e273 = function (arg0, arg1, arg2) {\n  const ret = getObject(arg0).keyDelete(DID.__wrap(arg1), KeyLocation.__wrap(arg2));\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_keySign_65f2fbbe5dee6f08 = function (arg0, arg1, arg2, arg3, arg4) {\n  var v0 = getArrayU8FromWasm0(arg3, arg4).slice();\n  wasm.__wbindgen_free(arg3, arg4 * 1);\n  const ret = getObject(arg0).keySign(DID.__wrap(arg1), KeyLocation.__wrap(arg2), v0);\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_keyExists_9f0e24a0dc921a0f = function (arg0, arg1, arg2) {\n  const ret = getObject(arg0).keyExists(DID.__wrap(arg1), KeyLocation.__wrap(arg2));\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_dataEncrypt_d3fdd1572872900e = function (arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) {\n  var v0 = getArrayU8FromWasm0(arg2, arg3).slice();\n  wasm.__wbindgen_free(arg2, arg3 * 1);\n  var v1 = getArrayU8FromWasm0(arg4, arg5).slice();\n  wasm.__wbindgen_free(arg4, arg5 * 1);\n  var v2 = getArrayU8FromWasm0(arg8, arg9).slice();\n  wasm.__wbindgen_free(arg8, arg9 * 1);\n  const ret = getObject(arg0).dataEncrypt(DID.__wrap(arg1), v0, v1, EncryptionAlgorithm.__wrap(arg6), CekAlgorithm.__wrap(arg7), v2);\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_dataDecrypt_77871e9915a5d30e = function (arg0, arg1, arg2, arg3, arg4, arg5) {\n  const ret = getObject(arg0).dataDecrypt(DID.__wrap(arg1), EncryptedData.__wrap(arg2), EncryptionAlgorithm.__wrap(arg3), CekAlgorithm.__wrap(arg4), KeyLocation.__wrap(arg5));\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_chainStateGet_6e79198c588db9e7 = function (arg0, arg1) {\n  const ret = getObject(arg0).chainStateGet(DID.__wrap(arg1));\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_chainStateSet_da53cea6c2166f4e = function (arg0, arg1, arg2) {\n  const ret = getObject(arg0).chainStateSet(DID.__wrap(arg1), ChainState.__wrap(arg2));\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_documentGet_f0d797c335fedd28 = function (arg0, arg1) {\n  const ret = getObject(arg0).documentGet(DID.__wrap(arg1));\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_documentSet_f41fdfb8cb62830e = function (arg0, arg1, arg2) {\n  const ret = getObject(arg0).documentSet(DID.__wrap(arg1), Document.__wrap(arg2));\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_new_693216e109162396 = function () {\n  const ret = new Error();\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_stack_0ddaca5d1abfb52f = function (arg0, arg1) {\n  const ret = getObject(arg1).stack;\n  const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n  const len0 = WASM_VECTOR_LEN;\n  getInt32Memory0()[arg0 / 4 + 1] = len0;\n  getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\nmodule.exports.__wbg_error_09919627ac0992f5 = function (arg0, arg1) {\n  try {\n    console.error(getStringFromWasm0(arg0, arg1));\n  } finally {\n    wasm.__wbindgen_free(arg0, arg1);\n  }\n};\nmodule.exports.__wbindgen_string_get = function (arg0, arg1) {\n  const obj = getObject(arg1);\n  const ret = typeof obj === 'string' ? obj : undefined;\n  var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n  var len0 = WASM_VECTOR_LEN;\n  getInt32Memory0()[arg0 / 4 + 1] = len0;\n  getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\nmodule.exports.__wbg_fetch_b1379d93c1e2b015 = function (arg0) {\n  const ret = fetch(getObject(arg0));\n  return addHeapObject(ret);\n};\nmodule.exports.__wbindgen_object_clone_ref = function (arg0) {\n  const ret = getObject(arg0);\n  return addHeapObject(ret);\n};\nmodule.exports.__wbindgen_cb_drop = function (arg0) {\n  const obj = takeObject(arg0).original;\n  if (obj.cnt-- == 1) {\n    obj.a = 0;\n    return true;\n  }\n  const ret = false;\n  return ret;\n};\nmodule.exports.__wbg_fetch_8c28485eb2d6317d = function (arg0, arg1) {\n  const ret = getObject(arg0).fetch(getObject(arg1));\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_instanceof_Response_e928c54c1025470c = function (arg0) {\n  const ret = getObject(arg0) instanceof Response;\n  return ret;\n};\nmodule.exports.__wbg_url_0f82030e7245954c = function (arg0, arg1) {\n  const ret = getObject(arg1).url;\n  const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n  const len0 = WASM_VECTOR_LEN;\n  getInt32Memory0()[arg0 / 4 + 1] = len0;\n  getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\nmodule.exports.__wbg_status_5b4a574de7c5bbfe = function (arg0) {\n  const ret = getObject(arg0).status;\n  return ret;\n};\nmodule.exports.__wbg_headers_1dc1ef92ba3d32b1 = function (arg0) {\n  const ret = getObject(arg0).headers;\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_text_5cb78830c1a11c5b = function () {\n  return handleError(function (arg0) {\n    const ret = getObject(arg0).text();\n    return addHeapObject(ret);\n  }, arguments);\n};\nmodule.exports.__wbg_now_9c64828adecad05e = function (arg0) {\n  const ret = getObject(arg0).now();\n  return ret;\n};\nmodule.exports.__wbg_newwithstrandinit_41c86e821f771b24 = function () {\n  return handleError(function (arg0, arg1, arg2) {\n    const ret = new Request(getStringFromWasm0(arg0, arg1), getObject(arg2));\n    return addHeapObject(ret);\n  }, arguments);\n};\nmodule.exports.__wbg_new_483f23f84dfd2751 = function () {\n  return handleError(function () {\n    const ret = new Headers();\n    return addHeapObject(ret);\n  }, arguments);\n};\nmodule.exports.__wbg_append_fcf64231455390c4 = function () {\n  return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n    getObject(arg0).append(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4));\n  }, arguments);\n};\nmodule.exports.__wbg_clearTimeout_65417660fe82f08d = typeof clearTimeout == 'function' ? clearTimeout : notDefined('clearTimeout');\nmodule.exports.__wbg_setTimeout_131fc254e1bd5624 = function () {\n  return handleError(function (arg0, arg1) {\n    const ret = setTimeout(getObject(arg0), arg1);\n    return ret;\n  }, arguments);\n};\nmodule.exports.__wbg_process_e56fd54cf6319b6c = function (arg0) {\n  const ret = getObject(arg0).process;\n  return addHeapObject(ret);\n};\nmodule.exports.__wbindgen_is_object = function (arg0) {\n  const val = getObject(arg0);\n  const ret = typeof val === 'object' && val !== null;\n  return ret;\n};\nmodule.exports.__wbg_versions_77e21455908dad33 = function (arg0) {\n  const ret = getObject(arg0).versions;\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_node_0dd25d832e4785d5 = function (arg0) {\n  const ret = getObject(arg0).node;\n  return addHeapObject(ret);\n};\nmodule.exports.__wbindgen_is_string = function (arg0) {\n  const ret = typeof getObject(arg0) === 'string';\n  return ret;\n};\nmodule.exports.__wbg_require_0db1598d9ccecb30 = function () {\n  return handleError(function (arg0, arg1, arg2) {\n    const ret = getObject(arg0).require(getStringFromWasm0(arg1, arg2));\n    return addHeapObject(ret);\n  }, arguments);\n};\nmodule.exports.__wbg_crypto_b95d7173266618a9 = function (arg0) {\n  const ret = getObject(arg0).crypto;\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_msCrypto_5a86d77a66230f81 = function (arg0) {\n  const ret = getObject(arg0).msCrypto;\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_getRandomValues_b14734aa289bc356 = function () {\n  return handleError(function (arg0, arg1) {\n    getObject(arg0).getRandomValues(getObject(arg1));\n  }, arguments);\n};\nmodule.exports.__wbg_static_accessor_NODE_MODULE_26b231378c1be7dd = function () {\n  const ret = module;\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_randomFillSync_91e2b39becca6147 = function () {\n  return handleError(function (arg0, arg1, arg2) {\n    getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));\n  }, arguments);\n};\nmodule.exports.__wbg_get_f0f4f1608ebf633e = function (arg0, arg1) {\n  const ret = getObject(arg0)[arg1 >>> 0];\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_length_93debb0e2e184ab6 = function (arg0) {\n  const ret = getObject(arg0).length;\n  return ret;\n};\nmodule.exports.__wbg_new_2ab697f1555e0dbc = function () {\n  const ret = new Array();\n  return addHeapObject(ret);\n};\nmodule.exports.__wbindgen_is_function = function (arg0) {\n  const ret = typeof getObject(arg0) === 'function';\n  return ret;\n};\nmodule.exports.__wbg_newnoargs_fc5356289219b93b = function (arg0, arg1) {\n  const ret = new Function(getStringFromWasm0(arg0, arg1));\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_new_f0540490a24a79bb = function () {\n  const ret = new Map();\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_next_0e1ee6203bc0f8ed = function (arg0) {\n  const ret = getObject(arg0).next;\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_next_9ef803116340cdc1 = function () {\n  return handleError(function (arg0) {\n    const ret = getObject(arg0).next();\n    return addHeapObject(ret);\n  }, arguments);\n};\nmodule.exports.__wbg_done_2a1e30464aae6a4d = function (arg0) {\n  const ret = getObject(arg0).done;\n  return ret;\n};\nmodule.exports.__wbg_value_a495c29471c31da6 = function (arg0) {\n  const ret = getObject(arg0).value;\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_iterator_6ac6eb1e020f18e3 = function () {\n  const ret = Symbol.iterator;\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_get_89247d3aeaa38cc5 = function () {\n  return handleError(function (arg0, arg1) {\n    const ret = Reflect.get(getObject(arg0), getObject(arg1));\n    return addHeapObject(ret);\n  }, arguments);\n};\nmodule.exports.__wbg_call_4573f605ca4b5f10 = function () {\n  return handleError(function (arg0, arg1) {\n    const ret = getObject(arg0).call(getObject(arg1));\n    return addHeapObject(ret);\n  }, arguments);\n};\nmodule.exports.__wbg_new_306ce8d57919e6ae = function () {\n  const ret = new Object();\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_self_ba1ddafe9ea7a3a2 = function () {\n  return handleError(function () {\n    const ret = self.self;\n    return addHeapObject(ret);\n  }, arguments);\n};\nmodule.exports.__wbg_window_be3cc430364fd32c = function () {\n  return handleError(function () {\n    const ret = window.window;\n    return addHeapObject(ret);\n  }, arguments);\n};\nmodule.exports.__wbg_globalThis_56d9c9f814daeeee = function () {\n  return handleError(function () {\n    const ret = globalThis.globalThis;\n    return addHeapObject(ret);\n  }, arguments);\n};\nmodule.exports.__wbg_global_8c35aeee4ac77f2b = function () {\n  return handleError(function () {\n    const ret = global.global;\n    return addHeapObject(ret);\n  }, arguments);\n};\nmodule.exports.__wbg_from_7ff9036e9b5c3ccb = function (arg0) {\n  const ret = Array.from(getObject(arg0));\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_push_811c8b08bf4ff9d5 = function (arg0, arg1) {\n  const ret = getObject(arg0).push(getObject(arg1));\n  return ret;\n};\nmodule.exports.__wbg_instanceof_Error_53fd3b982f19be06 = function (arg0) {\n  const ret = getObject(arg0) instanceof Error;\n  return ret;\n};\nmodule.exports.__wbg_new_651776e932b7e9c7 = function (arg0, arg1) {\n  const ret = new Error(getStringFromWasm0(arg0, arg1));\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_setname_c41f156664cf0ab9 = function (arg0, arg1, arg2) {\n  getObject(arg0).name = getStringFromWasm0(arg1, arg2);\n};\nmodule.exports.__wbg_toString_ef76a2af8f5bb98a = function (arg0) {\n  const ret = getObject(arg0).toString();\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_call_9855a4612eb496cb = function () {\n  return handleError(function (arg0, arg1, arg2) {\n    const ret = getObject(arg0).call(getObject(arg1), getObject(arg2));\n    return addHeapObject(ret);\n  }, arguments);\n};\nmodule.exports.__wbg_instanceof_Map_9e1310ea011d1721 = function (arg0) {\n  const ret = getObject(arg0) instanceof Map;\n  return ret;\n};\nmodule.exports.__wbg_set_e44d2fe94a18567f = function (arg0, arg1, arg2) {\n  const ret = getObject(arg0).set(getObject(arg1), getObject(arg2));\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_now_513c8208bd94c09b = function () {\n  const ret = Date.now();\n  return ret;\n};\nmodule.exports.__wbg_fromEntries_06150f1d39e0a856 = function () {\n  return handleError(function (arg0) {\n    const ret = Object.fromEntries(getObject(arg0));\n    return addHeapObject(ret);\n  }, arguments);\n};\nmodule.exports.__wbg_new_78403b138428b684 = function (arg0, arg1) {\n  try {\n    var state0 = {\n      a: arg0,\n      b: arg1\n    };\n    var cb0 = (arg0, arg1) => {\n      const a = state0.a;\n      state0.a = 0;\n      try {\n        return __wbg_adapter_655(a, state0.b, arg0, arg1);\n      } finally {\n        state0.a = a;\n      }\n    };\n    const ret = new Promise(cb0);\n    return addHeapObject(ret);\n  } finally {\n    state0.a = state0.b = 0;\n  }\n};\nmodule.exports.__wbg_resolve_f269ce174f88b294 = function (arg0) {\n  const ret = Promise.resolve(getObject(arg0));\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_then_1c698eedca15eed6 = function (arg0, arg1) {\n  const ret = getObject(arg0).then(getObject(arg1));\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_then_4debc41d4fc92ce5 = function (arg0, arg1, arg2) {\n  const ret = getObject(arg0).then(getObject(arg1), getObject(arg2));\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_buffer_de1150f91b23aa89 = function (arg0) {\n  const ret = getObject(arg0).buffer;\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_newwithbyteoffsetandlength_9ca61320599a2c84 = function (arg0, arg1, arg2) {\n  const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_new_97cf52648830a70d = function (arg0) {\n  const ret = new Uint8Array(getObject(arg0));\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_set_a0172b213e2469e9 = function (arg0, arg1, arg2) {\n  getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n};\nmodule.exports.__wbg_length_e09c0b925ab8de5d = function (arg0) {\n  const ret = getObject(arg0).length;\n  return ret;\n};\nmodule.exports.__wbg_instanceof_Uint8Array_fd17ec67c77de602 = function (arg0) {\n  const ret = getObject(arg0) instanceof Uint8Array;\n  return ret;\n};\nmodule.exports.__wbg_newwithlength_e833b89f9db02732 = function (arg0) {\n  const ret = new Uint8Array(arg0 >>> 0);\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_subarray_9482ae5cd5cd99d3 = function (arg0, arg1, arg2) {\n  const ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n  return addHeapObject(ret);\n};\nmodule.exports.__wbg_has_ded5f0e31f1ff6ad = function () {\n  return handleError(function (arg0, arg1) {\n    const ret = Reflect.has(getObject(arg0), getObject(arg1));\n    return ret;\n  }, arguments);\n};\nmodule.exports.__wbg_set_b12cd0ab82903c2f = function () {\n  return handleError(function (arg0, arg1, arg2) {\n    const ret = Reflect.set(getObject(arg0), getObject(arg1), getObject(arg2));\n    return ret;\n  }, arguments);\n};\nmodule.exports.__wbg_stringify_cf20dc96bee34a66 = function () {\n  return handleError(function (arg0) {\n    const ret = JSON.stringify(getObject(arg0));\n    return addHeapObject(ret);\n  }, arguments);\n};\nmodule.exports.__wbindgen_debug_string = function (arg0, arg1) {\n  const ret = debugString(getObject(arg1));\n  const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n  const len0 = WASM_VECTOR_LEN;\n  getInt32Memory0()[arg0 / 4 + 1] = len0;\n  getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\nmodule.exports.__wbindgen_throw = function (arg0, arg1) {\n  throw new Error(getStringFromWasm0(arg0, arg1));\n};\nmodule.exports.__wbindgen_memory = function () {\n  const ret = wasm.memory;\n  return addHeapObject(ret);\n};\nmodule.exports.__wbindgen_closure_wrapper8805 = function (arg0, arg1, arg2) {\n  const ret = makeMutClosure(arg0, arg1, 1515, __wbg_adapter_34);\n  return addHeapObject(ret);\n};\nmodule.exports.__wbindgen_closure_wrapper10366 = function (arg0, arg1, arg2) {\n  const ret = makeMutClosure(arg0, arg1, 1752, __wbg_adapter_37);\n  return addHeapObject(ret);\n};\nconst path = require('path').join(__dirname, 'identity_wasm_bg.wasm');\nconst bytes = require('fs').readFileSync(path);\nconst wasmModule = new WebAssembly.Module(bytes);\nconst wasmInstance = new WebAssembly.Instance(wasmModule, imports);\nwasm = wasmInstance.exports;\nmodule.exports.__wasm = wasm;\ncachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\ncachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\nwasm.__wbindgen_start();","map":{"version":3,"names":["globalThis","fetch","require","Headers","Request","Response","imports","module","exports","wasm","TextDecoder","TextEncoder","inspect","heap","Array","fill","undefined","push","getObject","idx","heap_next","length","dropObject","takeObject","ret","cachedTextDecoder","ignoreBOM","fatal","decode","cachedUint8Memory0","getUint8Memory0","byteLength","Uint8Array","memory","buffer","getStringFromWasm0","ptr","len","subarray","addHeapObject","obj","WASM_VECTOR_LEN","cachedTextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","written","passStringToWasm0","malloc","realloc","mem","offset","code","charCodeAt","slice","cachedInt32Memory0","getInt32Memory0","Int32Array","isLikeNone","x","debugString","val","type","description","name","isArray","debug","i","builtInMatches","exec","toString","call","className","JSON","stringify","_","Error","message","stack","CLOSURE_DTORS","FinalizationRegistry","state","__wbindgen_export_2","get","dtor","a","b","makeMutClosure","arg0","arg1","f","cnt","real","_len","arguments","args","_key","unregister","original","register","__wbg_adapter_34","arg2","_dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hdcd0b8367bd8bfe2","__wbg_adapter_37","_dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h4fe003293c171f86","passArray8ToWasm0","stack_pointer","addBorrowedObject","_assertClass","instance","klass","getArrayU8FromWasm0","start","handleError","apply","e","__wbindgen_exn_store","notDefined","what","__wbg_adapter_655","arg3","wasm_bindgen__convert__closures__invoke2_mut__hd12e749677640a32","DIDMessageEncoding","Object","freeze","Json","JsonBrotli","StatusCheck","Strict","SkipUnsupported","SkipAll","SubjectHolderRelationship","AlwaysSubject","SubjectOnNonTransferable","Any","FailFast","AllErrors","FirstError","KeyType","Ed25519","X25519","MethodRelationship","Authentication","AssertionMethod","KeyAgreement","CapabilityDelegation","CapabilityInvocation","AccountFinalization","__wbg_account_free","Account","__wrap","create","prototype","__destroy_into_raw","free","attachMethodRelationships","options","retptr","__wbindgen_add_to_stack_pointer","account_attachMethodRelationships","r0","r1","r2","createMethod","account_createMethod","detachMethodRelationships","account_detachMethodRelationships","did","account_did","DID","autopublish","account_autopublish","autosave","account_autosave","AutoSave","document","account_document","Document","resolveIdentity","account_resolveIdentity","deleteIdentity","account_deleteIdentity","publish","publish_options","account_publish","createSignedCredential","fragment","credential","ptr0","__wbindgen_malloc","__wbindgen_realloc","len0","Credential","ProofOptions","account_createSignedCredential","createSignedDocument","account_createSignedDocument","createSignedPresentation","presentation","Presentation","account_createSignedPresentation","createSignedData","data","account_createSignedData","updateDocumentUnchecked","account_updateDocumentUnchecked","fetchDocument","account_fetchDocument","revokeCredentials","credentialIndices","account_revokeCredentials","unrevokeCredentials","account_unrevokeCredentials","encryptData","plaintext","associated_data","encryption_algorithm","cek_algorithm","public_key","ptr1","len1","EncryptionAlgorithm","CekAlgorithm","ptr2","len2","account_encryptData","decryptData","EncryptedData","account_decryptData","setAlsoKnownAs","account_setAlsoKnownAs","deleteMethod","account_deleteMethod","deleteService","account_deleteService","setController","account_setController","createService","account_createService","AccountBuilderFinalization","__wbg_accountbuilder_free","AccountBuilder","constructor","accountbuilder_new","loadIdentity","accountbuilder_loadIdentity","createIdentity","identity_setup","accountbuilder_createIdentity","AgreementInfoFinalization","__wbg_agreementinfo_free","AgreementInfo","toJSON","custom","assign","apu","apv","pub_info","priv_info","ptr3","len3","agreementinfo_new","agreementinfo_apu","v0","__wbindgen_free","agreementinfo_apv","pubInfo","agreementinfo_pubInfo","privInfo","agreementinfo_privInfo","agreementinfo_toJSON","fromJSON","json_value","agreementinfo_fromJSON","AutoSaveFinalization","__wbg_autosave_free","never","autosave_never","every","autosave_every","batch","number_of_actions","autosave_batch","autosave_toJSON","autosave_fromJSON","CekAlgorithmFinalization","__wbg_cekalgorithm_free","EcdhEs","agreement","cekalgorithm_EcdhEs","EcdhEsA256Kw","cekalgorithm_EcdhEsA256Kw","cekalgorithm_toJSON","cekalgorithm_fromJSON","ChainStateFinalization","__wbg_chainstate_free","ChainState","chainstate_toJSON","chainstate_fromJSON","ClientFinalization","__wbg_client_free","Client","client_new","fromConfig","config","client_fromConfig","network","client_network","Network","publishDocument","client_publishDocument","publishDiff","message_id","diff","DiffMessage","client_publishDiff","publishJSON","index","client_publishJSON","publishJsonWithRetry","interval","max_attempts","client_publishJsonWithRetry","isMessageIncluded","messageId","client_isMessageIncluded","resolve","client_resolve","resolveHistory","client_resolveHistory","resolveDiffHistory","ResolvedDocument","client_resolveDiffHistory","CredentialFinalization","__wbg_credential_free","BaseContext","credential_BaseContext","r3","BaseType","credential_BaseType","values","credential_new","context","credential_context","id","credential_id","credential_type","credentialSubject","credential_credentialSubject","issuer","credential_issuer","issuanceDate","credential_issuanceDate","Timestamp","expirationDate","credential_expirationDate","credentialStatus","credential_credentialStatus","credentialSchema","credential_credentialSchema","refreshService","credential_refreshService","termsOfUse","credential_termsOfUse","evidence","credential_evidence","nonTransferable","credential_nonTransferable","proof","credential_proof","Proof","properties","credential_properties","credential_toJSON","json","credential_fromJSON","clone","credential_clone","CredentialValidationOptionsFinalization","__wbg_credentialvalidationoptions_free","CredentialValidationOptions","credentialvalidationoptions_new","default","credentialvalidationoptions_default","credentialvalidationoptions_toJSON","credentialvalidationoptions_fromJSON","credentialvalidationoptions_clone","CredentialValidatorFinalization","__wbg_credentialvalidator_free","CredentialValidator","validate","fail_fast","credentialvalidator_validate","checkStructure","credentialvalidator_checkStructure","checkExpiresOnOrAfter","timestamp","credentialvalidator_checkExpiresOnOrAfter","checkIssuedOnOrBefore","credentialvalidator_checkIssuedOnOrBefore","verifySignature","trusted_issuers","VerifierOptions","credentialvalidator_verifySignature","check_subject_holder_relationship","holder_url","relationship","credentialvalidator_check_subject_holder_relationship","checkStatus","trustedIssuers","statusCheck","credentialvalidator_checkStatus","DIDFinalization","__wbg_did_free","networkName","did_new","parse","input","did_parse","did_network","did_network_name","tag","did_tag","join","segment","did_join","DIDUrl","toUrl","did_toUrl","intoUrl","did_intoUrl","did_toString","did_fromJSON","did_toJSON","did_clone","DIDUrlFinalization","__wbg_didurl_free","didurl_parse","didurl_did","urlStr","didurl_urlStr","didurl_fragment","setFragment","value","didurl_setFragment","path","didurl_path","setPath","didurl_setPath","query","didurl_query","setQuery","didurl_setQuery","didurl_join","didurl_toString","didurl_toJSON","didurl_clone","DiffChainHistoryFinalization","__wbg_diffchainhistory_free","DiffChainHistory","chainData","diffchainhistory_chainData","spam","diffchainhistory_spam","diffchainhistory_toJSON","diffchainhistory_fromJSON","DiffMessageFinalization","__wbg_diffmessage_free","diffmessage_id","diffmessage_did","diffmessage_diff","diffmessage_messageId","setMessageId","diffmessage_setMessageId","previousMessageId","diffmessage_previousMessageId","setPreviousMessageId","diffmessage_setPreviousMessageId","diffmessage_proof","merge","diffmessage_merge","diffmessage_toJSON","diffmessage_fromJSON","diffmessage_clone","DocumentFinalization","__wbg_document_free","keypair","KeyPair","document_new","fromVerificationMethod","method","VerificationMethod","document_fromVerificationMethod","isSigningMethodType","method_type","MethodType","document_isSigningMethodType","document_id","controllers","document_setController","controller","document_controller","urls","document_setAlsoKnownAs","alsoKnownAs","document_alsoKnownAs","setPropertyUnchecked","key","document_setPropertyUnchecked","document_properties","service","document_service","insertService","Service","document_insertService","removeService","document_removeService","methods","document_methods","insertMethod","scope","MethodScope","document_insertMethod","removeMethod","document_removeMethod","defaultSigningMethod","document_defaultSigningMethod","resolveMethod","document_resolveMethod","resolveSigningMethod","document_resolveSigningMethod","attachMethodRelationship","did_url","document_attachMethodRelationship","detachMethodRelationship","document_detachMethodRelationship","signSelf","key_pair","method_query","document_signSelf","signDocument","document_signDocument","signCredential","privateKey","methodQuery","document_signCredential","signPresentation","document_signPresentation","signData","document_signData","verifyData","document_verifyData","verifyDocument","signed","document_verifyDocument","verifyRootDocument","document_verifyRootDocument","other","document_diff","verifyDiff","document_verifyDiff","mergeDiff","document_mergeDiff","integrationIndex","document_integrationIndex","diffIndex","document_diffIndex","metadata","document_metadata","DocumentMetadata","metadataCreated","document_metadataCreated","setMetadataCreated","document_setMetadataCreated","metadataUpdated","document_metadataUpdated","setMetadataUpdated","document_setMetadataUpdated","metadataPreviousMessageId","document_metadataPreviousMessageId","setMetadataPreviousMessageId","document_setMetadataPreviousMessageId","document_proof","document_revokeCredentials","document_unrevokeCredentials","document_toJSON","document_fromJSON","document_clone","DocumentHistoryFinalization","__wbg_documenthistory_free","DocumentHistory","integrationChainData","documenthistory_integrationChainData","integrationChainSpam","documenthistory_integrationChainSpam","diffChainData","documenthistory_diffChainData","diffChainSpam","documenthistory_diffChainSpam","documenthistory_toJSON","documenthistory_fromJSON","documenthistory_clone","DocumentMetadataFinalization","__wbg_documentmetadata_free","created","documentmetadata_created","updated","documentmetadata_updated","documentmetadata_previous_message_id","documentmetadata_clone","DurationFinalization","__wbg_duration_free","Duration","seconds","duration_seconds","minutes","duration_minutes","hours","duration_hours","days","duration_days","weeks","duration_weeks","duration_toJSON","duration_fromJSON","Ed25519Finalization","__wbg_ed25519_free","PRIVATE_KEY_LENGTH","ed25519_PRIVATE_KEY_LENGTH","PUBLIC_KEY_LENGTH","ed25519_PUBLIC_KEY_LENGTH","SIGNATURE_LENGTH","ed25519_SIGNATURE_LENGTH","sign","ed25519_sign","v2","verify","signature","publicKey","ed25519_verify","EncryptedDataFinalization","__wbg_encrypteddata_free","nonce","encrypteddata_nonce","associatedData","encrypteddata_associatedData","ciphertext","encrypteddata_ciphertext","encrypteddata_tag","encrypteddata_toJSON","encrypteddata_fromJSON","EncryptionAlgorithmFinalization","__wbg_encryptionalgorithm_free","A256GCM","encryptionalgorithm_A256GCM","keyLength","encryptionalgorithm_keyLength","encryptionalgorithm_toJSON","encryptionalgorithm_fromJSON","ExplorerUrlFinalization","__wbg_explorerurl_free","ExplorerUrl","url","explorerurl_parse","mainnet","explorerurl_mainnet","devnet","explorerurl_devnet","messageUrl","explorerurl_messageUrl","resolverUrl","explorerurl_resolverUrl","explorerurl_toString","IntegrationChainHistoryFinalization","__wbg_integrationchainhistory_free","IntegrationChainHistory","integrationchainhistory_chainData","integrationchainhistory_spam","integrationchainhistory_toJSON","integrationchainhistory_fromJSON","KeyLocationFinalization","__wbg_keylocation_free","KeyLocation","keyType","keylocation_new","keylocation_fromVerificationMethod","canonical","keylocation_canonical","keylocation_keyType","keylocation_toJSON","keylocation_fromJSON","keylocation_toString","KeyPairFinalization","__wbg_keypair_free","type_","keypair_new","fromKeys","private_key","keypair_fromKeys","tryFromPrivateKeyBytes","privateKeyBytes","keypair_tryFromPrivateKeyBytes","keypair_type","public","keypair_public","private","keypair_private","keypair_toJSON","keypair_fromJSON","keypair_clone","MethodContentFinalization","__wbg_methodcontent_free","MethodContent","GenerateEd25519","methodcontent_GenerateEd25519","PrivateEd25519","methodcontent_PrivateEd25519","PublicEd25519","methodcontent_PublicEd25519","GenerateX25519","methodcontent_GenerateX25519","PrivateX25519","methodcontent_PrivateX25519","PublicX25519","methodcontent_PublicX25519","methodcontent_toJSON","methodcontent_fromJSON","MethodDataFinalization","__wbg_methoddata_free","MethodData","newBase58","methoddata_newBase58","newMultibase","methoddata_newMultibase","tryDecode","methoddata_tryDecode","methoddata_toJSON","methoddata_fromJSON","methoddata_clone","MethodScopeFinalization","__wbg_methodscope_free","methodscope_VerificationMethod","methodscope_Authentication","methodscope_AssertionMethod","methodscope_KeyAgreement","methodscope_CapabilityDelegation","methodscope_CapabilityInvocation","methodscope_toString","methodscope_toJSON","methodscope_fromJSON","methodscope_clone","MethodTypeFinalization","__wbg_methodtype_free","Ed25519VerificationKey2018","methodtype_Ed25519VerificationKey2018","X25519KeyAgreementKey2019","methodtype_X25519KeyAgreementKey2019","methodtype_toJSON","methodtype_fromJSON","methodtype_toString","methodtype_clone","NetworkFinalization","__wbg_network_free","tryFromName","network_tryFromName","network_mainnet","network_devnet","network_name","defaultNodeURL","network_defaultNodeURL","network_toString","network_toJSON","network_fromJSON","network_clone","PresentationFinalization","__wbg_presentation_free","presentation_BaseContext","presentation_BaseType","presentation_new","presentation_context","presentation_id","presentation_type","verifiableCredential","presentation_verifiableCredential","holder","presentation_holder","presentation_refreshService","presentation_termsOfUse","presentation_proof","presentation_properties","presentation_toJSON","presentation_fromJSON","presentation_clone","PresentationValidationOptionsFinalization","__wbg_presentationvalidationoptions_free","PresentationValidationOptions","presentationvalidationoptions_new","presentationvalidationoptions_default","presentationvalidationoptions_toJSON","presentationvalidationoptions_fromJSON","presentationvalidationoptions_clone","PresentationValidatorFinalization","__wbg_presentationvalidator_free","PresentationValidator","issuers","presentationvalidator_validate","verifyPresentationSignature","presentationvalidator_verifyPresentationSignature","presentationvalidator_checkStructure","ProofFinalization","__wbg_proof_free","proof_type","proof_value","verificationMethod","proof_verificationMethod","proof_created","expires","proof_expires","challenge","proof_challenge","domain","proof_domain","purpose","proof_purpose","ProofPurpose","proof_toJSON","proof_fromJSON","proof_clone","ProofOptionsFinalization","__wbg_proofoptions_free","proofoptions_new","proofoptions_default","proofoptions_clone","ProofPurposeFinalization","__wbg_proofpurpose_free","assertionMethod","proofpurpose_assertionMethod","authentication","proofpurpose_authentication","proofpurpose_toJSON","proofpurpose_fromJSON","proofpurpose_clone","ReceiptFinalization","__wbg_receipt_free","Receipt","receipt_network","receipt_messageId","networkId","receipt_networkId","receipt_nonce","receipt_toJSON","receipt_fromJSON","receipt_clone","ResolvedDocumentFinalization","__wbg_resolveddocument_free","mergeDiffMessage","diff_message","resolveddocument_mergeDiffMessage","resolveddocument_document","intoDocument","resolveddocument_intoDocument","diffMessageId","resolveddocument_diffMessageId","setDiffMessageId","resolveddocument_setDiffMessageId","integrationMessageId","resolveddocument_integrationMessageId","setIntegrationMessageId","resolveddocument_setIntegrationMessageId","resolveddocument_toJSON","resolveddocument_fromJSON","resolveddocument_clone","ResolverFinalization","__wbg_resolver_free","Resolver","resolver_new","builder","resolver_builder","ResolverBuilder","getClient","resolver_getClient","resolver_resolve","resolver_resolveHistory","resolver_resolveDiffHistory","resolveCredentialIssuer","resolver_resolveCredentialIssuer","resolvePresentationIssuers","resolver_resolvePresentationIssuers","resolvePresentationHolder","resolver_resolvePresentationHolder","verifyPresentation","resolver_verifyPresentation","ResolverBuilderFinalization","__wbg_resolverbuilder_free","resolverbuilder_new","client","resolverbuilder_client","clientConfig","resolverbuilder_clientConfig","build","resolverbuilder_build","RevocationBitmapFinalization","__wbg_revocationbitmap_free","RevocationBitmap","revocationbitmap_new","revocationbitmap_type","isRevoked","revocationbitmap_isRevoked","revoke","revocationbitmap_revoke","unrevoke","revocationbitmap_unrevoke","revocationbitmap_len","toEndpoint","revocationbitmap_toEndpoint","fromEndpoint","endpoint","revocationbitmap_fromEndpoint","ServiceFinalization","__wbg_service_free","service_new","service_id","service_type","serviceEndpoint","service_serviceEndpoint","service_properties","service_toJSON","service_fromJSON","service_clone","SignatureFinalization","__wbg_signature_free","Signature","signature_new","asBytes","signature_asBytes","signature_toJSON","signature_fromJSON","StorageTestSuiteFinalization","__wbg_storagetestsuite_free","StorageTestSuite","didCreateGenerateKeyTest","storage","storagetestsuite_didCreateGenerateKeyTest","didCreatePrivateKeyTest","storagetestsuite_didCreatePrivateKeyTest","didListTest","storagetestsuite_didListTest","didPurgeTest","storagetestsuite_didPurgeTest","keyGenerateTest","storagetestsuite_keyGenerateTest","keyDeleteTest","storagetestsuite_keyDeleteTest","keyInsertTest","storagetestsuite_keyInsertTest","keySignEd25519Test","storagetestsuite_keySignEd25519Test","encryptionTest","alice_storage","bob_storage","storagetestsuite_encryptionTest","TimestampFinalization","__wbg_timestamp_free","timestamp_parse","nowUTC","timestamp_nowUTC","toRFC3339","timestamp_toRFC3339","checkedAdd","duration","timestamp_checkedAdd","checkedSub","timestamp_checkedSub","timestamp_toJSON","timestamp_fromJSON","VerificationMethodFinalization","__wbg_verificationmethod_free","key_type","verificationmethod_new","verificationmethod_id","verificationmethod_controller","SetController","verificationmethod_SetController","verificationmethod_type","verificationmethod_data","verificationmethod_toJSON","verificationmethod_fromJSON","verificationmethod_clone","VerifierOptionsFinalization","__wbg_verifieroptions_free","verifieroptions_new","verifieroptions_default","verifieroptions_toJSON","verifieroptions_fromJSON","verifieroptions_clone","X25519Finalization","__wbg_x25519_free","x25519_PRIVATE_KEY_LENGTH","x25519_PUBLIC_KEY_LENGTH","keyExchange","x25519_keyExchange","Ed25519toX25519Private","x25519_Ed25519toX25519Private","v1","Ed25519toX25519Public","x25519_Ed25519toX25519Public","__wbg_forceIntegrationUpdate_641fd7b976adff69","forceIntegrationUpdate","__wbindgen_object_drop_ref","__wbg_fragment_25296ef0b74e471c","__wbg_relationships_c7202aa83d5786f9","relationships","__wbg_fragment_e12c852962da3c2f","__wbg_scope_5601b30729b55bad","__wbg_content_f0d524fd72f59620","content","__wbg_fragment_a25c44360edfc7ab","__wbg_relationships_1bf1dd48031307c9","__wbg_documenthistory_new","__wbg_diffchainhistory_new","__wbg_account_new","__wbg_resolver_new","__wbg_signWith_26510522782c9743","signWith","__wbg_endpoint_89ffe3f61253a70c","__wbg_properties_b83a47dc5145e6b1","__wbg_urls_2b5b5612ab9e9967","__wbg_controllers_4399724802a69314","__wbg_credential_new","__wbg_resolveddocument_new","__wbg_service_new","__wbindgen_string_new","__wbg_diffmessage_new","__wbg_did_new","__wbg_verificationmethod_new","__wbg_privateKey_f7e2aae190433242","__wbg_autopublish_9d92161d27e897c1","__wbg_autosave_b8db1c486313174b","__wbg_clientConfig_3c2dd50a526ba96a","__wbg_storage_74384a6249104eeb","__wbg_fragment_c8587d74bb1b41dd","__wbg_fragment_e50e6d708e6d988c","__wbg_client_new","__wbindgen_error_new","__wbg_receipt_new","__wbg_id_3dc663ab7a361b11","__wbg_serviceEndpoint_d0df0dca54fd1088","__wbg_properties_7a9978c87641ff8d","__wbg_type_61d3194948f52780","__wbg_presentation_new","__wbindgen_is_null","__wbindgen_is_undefined","__wbg_document_new","__wbg_encrypteddata_new","__wbg_flushChanges_1b3e7070edebd3c7","flushChanges","__wbg_didList_837aa54393a8ecef","didList","__wbindgen_json_parse","__wbindgen_json_serialize","__wbg_fragment_2a56fdc975987578","__wbg_type_fea5cfdd0db34544","__wbg_didCreate_564518ce4160d06e","arg4","arg5","arg6","didCreate","__wbg_didPurge_14c8f1f02cf5a5b5","didPurge","__wbg_didExists_f3e119d2efa95097","didExists","__wbg_keyGenerate_b15d8eba573d7ff9","keyGenerate","__wbg_keyInsert_8a0e701b351551b6","keyInsert","__wbg_keyPublic_11a79e1b5f708b41","keyPublic","__wbg_keyDelete_f01483f265a4e273","keyDelete","__wbg_keySign_65f2fbbe5dee6f08","keySign","__wbg_keyExists_9f0e24a0dc921a0f","keyExists","__wbg_dataEncrypt_d3fdd1572872900e","arg7","arg8","arg9","dataEncrypt","__wbg_dataDecrypt_77871e9915a5d30e","dataDecrypt","__wbg_chainStateGet_6e79198c588db9e7","chainStateGet","__wbg_chainStateSet_da53cea6c2166f4e","chainStateSet","__wbg_documentGet_f0d797c335fedd28","documentGet","__wbg_documentSet_f41fdfb8cb62830e","documentSet","__wbg_new_693216e109162396","__wbg_stack_0ddaca5d1abfb52f","__wbg_error_09919627ac0992f5","console","error","__wbindgen_string_get","__wbg_fetch_b1379d93c1e2b015","__wbindgen_object_clone_ref","__wbindgen_cb_drop","__wbg_fetch_8c28485eb2d6317d","__wbg_instanceof_Response_e928c54c1025470c","__wbg_url_0f82030e7245954c","__wbg_status_5b4a574de7c5bbfe","status","__wbg_headers_1dc1ef92ba3d32b1","headers","__wbg_text_5cb78830c1a11c5b","text","__wbg_now_9c64828adecad05e","now","__wbg_newwithstrandinit_41c86e821f771b24","__wbg_new_483f23f84dfd2751","__wbg_append_fcf64231455390c4","append","__wbg_clearTimeout_65417660fe82f08d","clearTimeout","__wbg_setTimeout_131fc254e1bd5624","setTimeout","__wbg_process_e56fd54cf6319b6c","process","__wbindgen_is_object","__wbg_versions_77e21455908dad33","versions","__wbg_node_0dd25d832e4785d5","node","__wbindgen_is_string","__wbg_require_0db1598d9ccecb30","__wbg_crypto_b95d7173266618a9","crypto","__wbg_msCrypto_5a86d77a66230f81","msCrypto","__wbg_getRandomValues_b14734aa289bc356","getRandomValues","__wbg_static_accessor_NODE_MODULE_26b231378c1be7dd","__wbg_randomFillSync_91e2b39becca6147","randomFillSync","__wbg_get_f0f4f1608ebf633e","__wbg_length_93debb0e2e184ab6","__wbg_new_2ab697f1555e0dbc","__wbindgen_is_function","__wbg_newnoargs_fc5356289219b93b","Function","__wbg_new_f0540490a24a79bb","Map","__wbg_next_0e1ee6203bc0f8ed","next","__wbg_next_9ef803116340cdc1","__wbg_done_2a1e30464aae6a4d","done","__wbg_value_a495c29471c31da6","__wbg_iterator_6ac6eb1e020f18e3","Symbol","iterator","__wbg_get_89247d3aeaa38cc5","Reflect","__wbg_call_4573f605ca4b5f10","__wbg_new_306ce8d57919e6ae","__wbg_self_ba1ddafe9ea7a3a2","self","__wbg_window_be3cc430364fd32c","window","__wbg_globalThis_56d9c9f814daeeee","__wbg_global_8c35aeee4ac77f2b","global","__wbg_from_7ff9036e9b5c3ccb","from","__wbg_push_811c8b08bf4ff9d5","__wbg_instanceof_Error_53fd3b982f19be06","__wbg_new_651776e932b7e9c7","__wbg_setname_c41f156664cf0ab9","__wbg_toString_ef76a2af8f5bb98a","__wbg_call_9855a4612eb496cb","__wbg_instanceof_Map_9e1310ea011d1721","__wbg_set_e44d2fe94a18567f","__wbg_now_513c8208bd94c09b","Date","__wbg_fromEntries_06150f1d39e0a856","fromEntries","__wbg_new_78403b138428b684","state0","cb0","Promise","__wbg_resolve_f269ce174f88b294","__wbg_then_1c698eedca15eed6","then","__wbg_then_4debc41d4fc92ce5","__wbg_buffer_de1150f91b23aa89","__wbg_newwithbyteoffsetandlength_9ca61320599a2c84","__wbg_new_97cf52648830a70d","__wbg_set_a0172b213e2469e9","__wbg_length_e09c0b925ab8de5d","__wbg_instanceof_Uint8Array_fd17ec67c77de602","__wbg_newwithlength_e833b89f9db02732","__wbg_subarray_9482ae5cd5cd99d3","__wbg_has_ded5f0e31f1ff6ad","has","__wbg_set_b12cd0ab82903c2f","__wbg_stringify_cf20dc96bee34a66","__wbindgen_debug_string","__wbindgen_throw","__wbindgen_memory","__wbindgen_closure_wrapper8805","__wbindgen_closure_wrapper10366","__dirname","bytes","readFileSync","wasmModule","WebAssembly","Module","wasmInstance","Instance","__wasm","__wbindgen_start"],"sources":["/Users/tsaixinying/Desktop/network_lab/Vote-System/node_modules/@iota/identity-wasm/node/identity_wasm.js"],"sourcesContent":["if (!globalThis.fetch) {\n    const fetch = require('node-fetch')\n    globalThis.Headers = fetch.Headers\n    globalThis.Request = fetch.Request\n    globalThis.Response = fetch.Response\n    globalThis.fetch = fetch\n}\nlet imports = {};\nimports['__wbindgen_placeholder__'] = module.exports;\nlet wasm;\nconst { TextDecoder, TextEncoder, inspect } = require(`util`);\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8Memory0;\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachedInt32Memory0;\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nconst CLOSURE_DTORS = new FinalizationRegistry(state => {\n    wasm.__wbindgen_export_2.get(state.dtor)(state.a, state.b)\n});\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_2.get(state.dtor)(a, state.b);\n                CLOSURE_DTORS.unregister(state)\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n    CLOSURE_DTORS.register(real, state, state);\n    return real;\n}\nfunction __wbg_adapter_34(arg0, arg1, arg2) {\n    wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hdcd0b8367bd8bfe2(arg0, arg1, addHeapObject(arg2));\n}\n\nfunction __wbg_adapter_37(arg0, arg1) {\n    wasm._dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h4fe003293c171f86(arg0, arg1);\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet stack_pointer = 32;\n\nfunction addBorrowedObject(obj) {\n    if (stack_pointer == 1) throw new Error('out of js stack');\n    heap[--stack_pointer] = obj;\n    return stack_pointer;\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* Initializes the console error panic hook for better error messages\n*/\nmodule.exports.start = function() {\n    wasm.start();\n};\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\n\nfunction notDefined(what) { return () => { throw new Error(`${what} is not defined`); }; }\nfunction __wbg_adapter_655(arg0, arg1, arg2, arg3) {\n    wasm.wasm_bindgen__convert__closures__invoke2_mut__hd12e749677640a32(arg0, arg1, addHeapObject(arg2), addHeapObject(arg3));\n}\n\n/**\n*/\nmodule.exports.DIDMessageEncoding = Object.freeze({ Json:0,\"0\":\"Json\",JsonBrotli:1,\"1\":\"JsonBrotli\", });\n/**\n* Controls validation behaviour when checking whether or not a credential has been revoked by its\n* [`credentialStatus`](https://www.w3.org/TR/vc-data-model/#status).\n*/\nmodule.exports.StatusCheck = Object.freeze({\n/**\n* Validate the status if supported, reject any unsupported\n* [`credentialStatus`](https://www.w3.org/TR/vc-data-model/#status) types.\n*\n* Only `RevocationBitmap2022` is currently supported.\n*\n* This is the default.\n*/\nStrict:0,\"0\":\"Strict\",\n/**\n* Validate the status if supported, skip any unsupported\n* [`credentialStatus`](https://www.w3.org/TR/vc-data-model/#status) types.\n*/\nSkipUnsupported:1,\"1\":\"SkipUnsupported\",\n/**\n* Skip all status checks.\n*/\nSkipAll:2,\"2\":\"SkipAll\", });\n/**\n* Declares how credential subjects must relate to the presentation holder during validation.\n* See `PresentationValidationOptions::subject_holder_relationship`.\n*\n* See also the [Subject-Holder Relationship](https://www.w3.org/TR/vc-data-model/#subject-holder-relationships) section of the specification.\n*/\nmodule.exports.SubjectHolderRelationship = Object.freeze({\n/**\n* The holder must always match the subject on all credentials, regardless of their [`nonTransferable`](https://www.w3.org/TR/vc-data-model/#nontransferable-property) property.\n* This variant is the default used if no other variant is specified when constructing a new\n* `PresentationValidationOptions`.\n*/\nAlwaysSubject:0,\"0\":\"AlwaysSubject\",\n/**\n* The holder must match the subject only for credentials where the [`nonTransferable`](https://www.w3.org/TR/vc-data-model/#nontransferable-property) property is `true`.\n*/\nSubjectOnNonTransferable:1,\"1\":\"SubjectOnNonTransferable\",\n/**\n* The holder is not required to have any kind of relationship to any credential subject.\n*/\nAny:2,\"2\":\"Any\", });\n/**\n* Declares when validation should return if an error occurs.\n*/\nmodule.exports.FailFast = Object.freeze({\n/**\n* Return all errors that occur during validation.\n*/\nAllErrors:0,\"0\":\"AllErrors\",\n/**\n* Return after the first error occurs.\n*/\nFirstError:1,\"1\":\"FirstError\", });\n/**\n*/\nmodule.exports.KeyType = Object.freeze({ Ed25519:1,\"1\":\"Ed25519\",X25519:2,\"2\":\"X25519\", });\n/**\n*/\nmodule.exports.MethodRelationship = Object.freeze({ Authentication:0,\"0\":\"Authentication\",AssertionMethod:1,\"1\":\"AssertionMethod\",KeyAgreement:2,\"2\":\"KeyAgreement\",CapabilityDelegation:3,\"3\":\"CapabilityDelegation\",CapabilityInvocation:4,\"4\":\"CapabilityInvocation\", });\n\nconst AccountFinalization = new FinalizationRegistry(ptr => wasm.__wbg_account_free(ptr));\n/**\n* An account manages one identity.\n*\n* It handles private keys, writing to storage and\n* publishing to the Tangle.\n*/\nclass Account {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Account.prototype);\n        obj.ptr = ptr;\n        AccountFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        AccountFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_account_free(ptr);\n    }\n    /**\n    * Attach one or more verification relationships to a method.\n    *\n    * Note: the method must exist and be in the set of verification methods;\n    * it cannot be an embedded method.\n    * @param {AttachMethodRelationshipOptions} options\n    * @returns {Promise<void>}\n    */\n    attachMethodRelationships(options) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.account_attachMethodRelationships(retptr, this.ptr, addBorrowedObject(options));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Adds a new verification method to the DID document.\n    * @param {CreateMethodOptions} options\n    * @returns {Promise<void>}\n    */\n    createMethod(options) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.account_createMethod(retptr, this.ptr, addBorrowedObject(options));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Detaches the given relationship from the given method, if the method exists.\n    * @param {DetachMethodRelationshipOptions} options\n    * @returns {Promise<void>}\n    */\n    detachMethodRelationships(options) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.account_detachMethodRelationships(retptr, this.ptr, addBorrowedObject(options));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Returns the {@link DID} of the managed identity.\n    * @returns {DID}\n    */\n    did() {\n        const ret = wasm.account_did(this.ptr);\n        return DID.__wrap(ret);\n    }\n    /**\n    * Returns whether auto-publish is enabled.\n    * @returns {boolean}\n    */\n    autopublish() {\n        const ret = wasm.account_autopublish(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * Returns the auto-save configuration value.\n    * @returns {AutoSave}\n    */\n    autosave() {\n        const ret = wasm.account_autosave(this.ptr);\n        return AutoSave.__wrap(ret);\n    }\n    /**\n    * Returns a copy of the document managed by the `Account`.\n    *\n    * Note: the returned document only has a valid signature after publishing an integration chain update.\n    * In general, for use cases where the signature is required, it is advisable to resolve the\n    * document from the Tangle.\n    * @returns {Document}\n    */\n    document() {\n        const ret = wasm.account_document(this.ptr);\n        return Document.__wrap(ret);\n    }\n    /**\n    * Resolves the DID Document associated with this `Account` from the Tangle.\n    * @returns {Promise<ResolvedDocument>}\n    */\n    resolveIdentity() {\n        const ret = wasm.account_resolveIdentity(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Removes the identity from the local storage entirely.\n    *\n    * Note: This will remove all associated document updates and key material - recovery is NOT POSSIBLE!\n    * @returns {Promise<void>}\n    */\n    deleteIdentity() {\n        const ptr = this.__destroy_into_raw();\n        const ret = wasm.account_deleteIdentity(ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Push all unpublished changes to the tangle in a single message.\n    * @param {PublishOptions | undefined} publish_options\n    * @returns {Promise<void>}\n    */\n    publish(publish_options) {\n        const ret = wasm.account_publish(this.ptr, isLikeNone(publish_options) ? 0 : addHeapObject(publish_options));\n        return takeObject(ret);\n    }\n    /**\n    * Signs a {@link Credential} with the key specified by `fragment`.\n    * @param {string} fragment\n    * @param {Credential} credential\n    * @param {ProofOptions} options\n    * @returns {Promise<Credential>}\n    */\n    createSignedCredential(fragment, credential, options) {\n        const ptr0 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(credential, Credential);\n        _assertClass(options, ProofOptions);\n        const ret = wasm.account_createSignedCredential(this.ptr, ptr0, len0, credential.ptr, options.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Signs a {@link Document} with the key specified by `fragment`.\n    * @param {string} fragment\n    * @param {Document} document\n    * @param {ProofOptions} options\n    * @returns {Promise<Document>}\n    */\n    createSignedDocument(fragment, document, options) {\n        const ptr0 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(document, Document);\n        _assertClass(options, ProofOptions);\n        const ret = wasm.account_createSignedDocument(this.ptr, ptr0, len0, document.ptr, options.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Signs a {@link Presentation} the key specified by `fragment`.\n    * @param {string} fragment\n    * @param {Presentation} presentation\n    * @param {ProofOptions} options\n    * @returns {Promise<Presentation>}\n    */\n    createSignedPresentation(fragment, presentation, options) {\n        const ptr0 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(presentation, Presentation);\n        _assertClass(options, ProofOptions);\n        const ret = wasm.account_createSignedPresentation(this.ptr, ptr0, len0, presentation.ptr, options.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Signs arbitrary `data` with the key specified by `fragment`.\n    * @param {string} fragment\n    * @param {any} data\n    * @param {ProofOptions} options\n    * @returns {Promise<any>}\n    */\n    createSignedData(fragment, data, options) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _assertClass(options, ProofOptions);\n            wasm.account_createSignedData(retptr, this.ptr, ptr0, len0, addBorrowedObject(data), options.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Overwrites the {@link Document} this account manages, **without doing any validation**.\n    *\n    * ### WARNING\n    *\n    * This method is dangerous and can easily corrupt the internal state,\n    * potentially making the identity unusable. Only call this if you fully\n    * understand the implications!\n    * @param {Document} document\n    * @returns {Promise<void>}\n    */\n    updateDocumentUnchecked(document) {\n        _assertClass(document, Document);\n        const ret = wasm.account_updateDocumentUnchecked(this.ptr, document.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Fetches the latest changes from the tangle and **overwrites** the local document.\n    *\n    * If a DID is managed from distributed accounts, this should be called before making changes\n    * to the identity, to avoid publishing updates that would be ignored.\n    * @returns {Promise<void>}\n    */\n    fetchDocument() {\n        const ret = wasm.account_fetchDocument(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * If the document has a `RevocationBitmap` service identified by `fragment`,\n    * revoke all credentials with a `revocationBitmapIndex` in `credentialIndices`.\n    * @param {string} fragment\n    * @param {number | number[]} credentialIndices\n    * @returns {Promise<void>}\n    */\n    revokeCredentials(fragment, credentialIndices) {\n        const ptr0 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.account_revokeCredentials(this.ptr, ptr0, len0, addHeapObject(credentialIndices));\n        return takeObject(ret);\n    }\n    /**\n    * If the document has a `RevocationBitmap` service identified by `fragment`,\n    * unrevoke all credentials with a `revocationBitmapIndex` in `credentialIndices`.\n    * @param {string} fragment\n    * @param {number | number[]} credentialIndices\n    * @returns {Promise<void>}\n    */\n    unrevokeCredentials(fragment, credentialIndices) {\n        const ptr0 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.account_unrevokeCredentials(this.ptr, ptr0, len0, addHeapObject(credentialIndices));\n        return takeObject(ret);\n    }\n    /**\n    * Encrypts the given `plaintext` with the specified `encryption_algorithm` and `cek_algorithm`.\n    *\n    * Returns an [`EncryptedData`] instance.\n    * @param {Uint8Array} plaintext\n    * @param {Uint8Array} associated_data\n    * @param {EncryptionAlgorithm} encryption_algorithm\n    * @param {CekAlgorithm} cek_algorithm\n    * @param {Uint8Array} public_key\n    * @returns {Promise<EncryptedData>}\n    */\n    encryptData(plaintext, associated_data, encryption_algorithm, cek_algorithm, public_key) {\n        const ptr0 = passArray8ToWasm0(plaintext, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(associated_data, wasm.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        _assertClass(encryption_algorithm, EncryptionAlgorithm);\n        _assertClass(cek_algorithm, CekAlgorithm);\n        const ptr2 = passArray8ToWasm0(public_key, wasm.__wbindgen_malloc);\n        const len2 = WASM_VECTOR_LEN;\n        const ret = wasm.account_encryptData(this.ptr, ptr0, len0, ptr1, len1, encryption_algorithm.ptr, cek_algorithm.ptr, ptr2, len2);\n        return takeObject(ret);\n    }\n    /**\n    * Decrypts the given `data` with the key identified by `fragment` using the given `encryption_algorithm` and\n    * `cek_algorithm`.\n    *\n    * Returns the decrypted text.\n    * @param {EncryptedData} data\n    * @param {EncryptionAlgorithm} encryption_algorithm\n    * @param {CekAlgorithm} cek_algorithm\n    * @param {string} fragment\n    * @returns {Promise<Uint8Array>}\n    */\n    decryptData(data, encryption_algorithm, cek_algorithm, fragment) {\n        _assertClass(data, EncryptedData);\n        _assertClass(encryption_algorithm, EncryptionAlgorithm);\n        _assertClass(cek_algorithm, CekAlgorithm);\n        const ptr0 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.account_decryptData(this.ptr, data.ptr, encryption_algorithm.ptr, cek_algorithm.ptr, ptr0, len0);\n        return takeObject(ret);\n    }\n    /**\n    * Sets the `alsoKnownAs` property in the DID document.\n    * @param {SetAlsoKnownAsOptions} options\n    * @returns {Promise<void>}\n    */\n    setAlsoKnownAs(options) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.account_setAlsoKnownAs(retptr, this.ptr, addBorrowedObject(options));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Deletes a verification method if the method exists.\n    * @param {DeleteMethodOptions} options\n    * @returns {Promise<void>}\n    */\n    deleteMethod(options) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.account_deleteMethod(retptr, this.ptr, addBorrowedObject(options));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Deletes a Service if it exists.\n    * @param {DeleteServiceOptions} options\n    * @returns {Promise<void>}\n    */\n    deleteService(options) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.account_deleteService(retptr, this.ptr, addBorrowedObject(options));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Sets the controllers of the DID document.\n    * @param {SetControllerOptions} options\n    * @returns {Promise<void>}\n    */\n    setController(options) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.account_setController(retptr, this.ptr, addBorrowedObject(options));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Adds a new Service to the DID Document.\n    * @param {CreateServiceOptions} options\n    * @returns {Promise<void>}\n    */\n    createService(options) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.account_createService(retptr, this.ptr, addBorrowedObject(options));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n}\nmodule.exports.Account = Account;\n\nconst AccountBuilderFinalization = new FinalizationRegistry(ptr => wasm.__wbg_accountbuilder_free(ptr));\n/**\n* An [`Account`] builder for easy account configuration.\n*\n* To reduce memory usage, accounts created from the same builder share the same `Storage`\n* used to store identities, and the same {@link Client} used to publish identities to the Tangle.\n*\n* The configuration on the other hand is cloned, and therefore unique for each built account.\n* This means a builder can be reconfigured in-between account creations, without affecting\n* the configuration of previously built accounts.\n*/\nclass AccountBuilder {\n\n    static __wrap(ptr) {\n        const obj = Object.create(AccountBuilder.prototype);\n        obj.ptr = ptr;\n        AccountBuilderFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        AccountBuilderFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_accountbuilder_free(ptr);\n    }\n    /**\n    * Creates a new `AccountBuilder`.\n    * @param {AccountBuilderOptions | undefined} options\n    */\n    constructor(options) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.accountbuilder_new(retptr, isLikeNone(options) ? 0 : addHeapObject(options));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return AccountBuilder.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Loads an existing identity with the specified `did` using the current builder configuration.\n    * The identity must exist in the configured `Storage`.\n    * @param {DID} did\n    * @returns {Promise<Account>}\n    */\n    loadIdentity(did) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(did, DID);\n            wasm.accountbuilder_loadIdentity(retptr, this.ptr, did.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Creates a new identity based on the builder configuration and returns\n    * an {@link Account} object to manage it.\n    *\n    * The identity is stored locally in the `Storage`. The DID network is automatically determined\n    * by the {@link Client} used to publish it.\n    *\n    * @See {@link IdentitySetup} to customize the identity creation.\n    * @param {IdentitySetup | undefined} identity_setup\n    * @returns {Promise<Account>}\n    */\n    createIdentity(identity_setup) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.accountbuilder_createIdentity(retptr, this.ptr, isLikeNone(identity_setup) ? 0 : addHeapObject(identity_setup));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nmodule.exports.AccountBuilder = AccountBuilder;\n\nconst AgreementInfoFinalization = new FinalizationRegistry(ptr => wasm.__wbg_agreementinfo_free(ptr));\n/**\n* Agreement information used as the input for the concat KDF.\n*/\nclass AgreementInfo {\n\n    static __wrap(ptr) {\n        const obj = Object.create(AgreementInfo.prototype);\n        obj.ptr = ptr;\n        AgreementInfoFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    toJSON() {\n        return {\n        };\n    }\n\n    toString() {\n        return JSON.stringify(this);\n    }\n\n    [inspect.custom]() {\n        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        AgreementInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_agreementinfo_free(ptr);\n    }\n    /**\n    * Creates an `AgreementInfo` Object.\n    * @param {Uint8Array} apu\n    * @param {Uint8Array} apv\n    * @param {Uint8Array} pub_info\n    * @param {Uint8Array} priv_info\n    */\n    constructor(apu, apv, pub_info, priv_info) {\n        const ptr0 = passArray8ToWasm0(apu, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(apv, wasm.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passArray8ToWasm0(pub_info, wasm.__wbindgen_malloc);\n        const len2 = WASM_VECTOR_LEN;\n        const ptr3 = passArray8ToWasm0(priv_info, wasm.__wbindgen_malloc);\n        const len3 = WASM_VECTOR_LEN;\n        const ret = wasm.agreementinfo_new(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);\n        return AgreementInfo.__wrap(ret);\n    }\n    /**\n    * Returns a copy of `apu'\n    * @returns {Uint8Array}\n    */\n    apu() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.agreementinfo_apu(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns a copy of `apv'\n    * @returns {Uint8Array}\n    */\n    apv() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.agreementinfo_apv(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns a copy of `pubInfo'\n    * @returns {Uint8Array}\n    */\n    pubInfo() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.agreementinfo_pubInfo(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns a copy of `privInfo'\n    * @returns {Uint8Array}\n    */\n    privInfo() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.agreementinfo_privInfo(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Serializes `AgreementInfo` as a JSON object.\n    * @returns {any}\n    */\n    toJSON() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.agreementinfo_toJSON(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Deserializes `AgreementInfo` from a JSON object.\n    * @param {any} json_value\n    * @returns {AgreementInfo}\n    */\n    static fromJSON(json_value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.agreementinfo_fromJSON(retptr, addHeapObject(json_value));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return AgreementInfo.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nmodule.exports.AgreementInfo = AgreementInfo;\n\nconst AutoSaveFinalization = new FinalizationRegistry(ptr => wasm.__wbg_autosave_free(ptr));\n/**\n*/\nclass AutoSave {\n\n    static __wrap(ptr) {\n        const obj = Object.create(AutoSave.prototype);\n        obj.ptr = ptr;\n        AutoSaveFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    toJSON() {\n        return {\n        };\n    }\n\n    toString() {\n        return JSON.stringify(this);\n    }\n\n    [inspect.custom]() {\n        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        AutoSaveFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_autosave_free(ptr);\n    }\n    /**\n    * Never save.\n    * @returns {AutoSave}\n    */\n    static never() {\n        const ret = wasm.autosave_never();\n        return AutoSave.__wrap(ret);\n    }\n    /**\n    * Save after every action.\n    * @returns {AutoSave}\n    */\n    static every() {\n        const ret = wasm.autosave_every();\n        return AutoSave.__wrap(ret);\n    }\n    /**\n    * Save after every N actions.\n    * @param {number} number_of_actions\n    * @returns {AutoSave}\n    */\n    static batch(number_of_actions) {\n        const ret = wasm.autosave_batch(number_of_actions);\n        return AutoSave.__wrap(ret);\n    }\n    /**\n    * Serializes `AutoSave` as a JSON object.\n    * @returns {any}\n    */\n    toJSON() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.autosave_toJSON(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Deserializes `AutoSave` from a JSON object.\n    * @param {any} json_value\n    * @returns {AutoSave}\n    */\n    static fromJSON(json_value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.autosave_fromJSON(retptr, addHeapObject(json_value));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return AutoSave.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nmodule.exports.AutoSave = AutoSave;\n\nconst CekAlgorithmFinalization = new FinalizationRegistry(ptr => wasm.__wbg_cekalgorithm_free(ptr));\n/**\n* Supported algorithms used to determine and potentially encrypt the content encryption key (CEK).\n*/\nclass CekAlgorithm {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CekAlgorithm.prototype);\n        obj.ptr = ptr;\n        CekAlgorithmFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    toJSON() {\n        return {\n        };\n    }\n\n    toString() {\n        return JSON.stringify(this);\n    }\n\n    [inspect.custom]() {\n        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        CekAlgorithmFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cekalgorithm_free(ptr);\n    }\n    /**\n    * Elliptic Curve Diffie-Hellman Ephemeral Static key agreement using Concat KDF.\n    * @param {AgreementInfo} agreement\n    * @returns {CekAlgorithm}\n    */\n    static EcdhEs(agreement) {\n        _assertClass(agreement, AgreementInfo);\n        const ret = wasm.cekalgorithm_EcdhEs(agreement.ptr);\n        return CekAlgorithm.__wrap(ret);\n    }\n    /**\n    * Elliptic Curve Diffie-Hellman Ephemeral Static key agreement using Concat KDF.\n    * @param {AgreementInfo} agreement\n    * @returns {CekAlgorithm}\n    */\n    static EcdhEsA256Kw(agreement) {\n        _assertClass(agreement, AgreementInfo);\n        const ret = wasm.cekalgorithm_EcdhEsA256Kw(agreement.ptr);\n        return CekAlgorithm.__wrap(ret);\n    }\n    /**\n    * Serializes `CekAlgorithm` as a JSON object.\n    * @returns {any}\n    */\n    toJSON() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cekalgorithm_toJSON(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Deserializes `CekAlgorithm` from a JSON object.\n    * @param {any} json_value\n    * @returns {CekAlgorithm}\n    */\n    static fromJSON(json_value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cekalgorithm_fromJSON(retptr, addHeapObject(json_value));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return CekAlgorithm.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nmodule.exports.CekAlgorithm = CekAlgorithm;\n\nconst ChainStateFinalization = new FinalizationRegistry(ptr => wasm.__wbg_chainstate_free(ptr));\n/**\n*/\nclass ChainState {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ChainState.prototype);\n        obj.ptr = ptr;\n        ChainStateFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    toJSON() {\n        return {\n        };\n    }\n\n    toString() {\n        return JSON.stringify(this);\n    }\n\n    [inspect.custom]() {\n        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        ChainStateFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_chainstate_free(ptr);\n    }\n    /**\n    * Serializes a `ChainState` object as a JSON object.\n    * @returns {any}\n    */\n    toJSON() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.chainstate_toJSON(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Deserializes a JSON object as `ChainState`.\n    * @param {any} json_value\n    * @returns {ChainState}\n    */\n    static fromJSON(json_value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.chainstate_fromJSON(retptr, addHeapObject(json_value));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ChainState.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nmodule.exports.ChainState = ChainState;\n\nconst ClientFinalization = new FinalizationRegistry(ptr => wasm.__wbg_client_free(ptr));\n/**\n*/\nclass Client {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Client.prototype);\n        obj.ptr = ptr;\n        ClientFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        ClientFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_client_free(ptr);\n    }\n    /**\n    * Creates a new `Client` with default settings.\n    */\n    constructor() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.client_new(retptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Client.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Creates a new `Client` with the given settings.\n    * @param {IClientConfig} config\n    * @returns {Promise<Client>}\n    */\n    static fromConfig(config) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.client_fromConfig(retptr, addHeapObject(config));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the `Client` Tangle network.\n    * @returns {Network}\n    */\n    network() {\n        const ret = wasm.client_network(this.ptr);\n        return Network.__wrap(ret);\n    }\n    /**\n    * Publishes a {@link Document} to the Tangle.\n    * @param {Document} document\n    * @returns {Promise<Receipt>}\n    */\n    publishDocument(document) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(document, Document);\n            wasm.client_publishDocument(retptr, this.ptr, document.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Publishes a `DiffMessage` to the Tangle.\n    *\n    * @deprecated since 0.5.0, diff chain features are slated for removal.\n    * @param {string} message_id\n    * @param {DiffMessage} diff\n    * @returns {Promise<Receipt>}\n    */\n    publishDiff(message_id, diff) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(message_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _assertClass(diff, DiffMessage);\n            wasm.client_publishDiff(retptr, this.ptr, ptr0, len0, diff.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Publishes arbitrary JSON data to the specified index on the Tangle.\n    * @param {string} index\n    * @param {any} data\n    * @returns {Promise<Receipt>}\n    */\n    publishJSON(index, data) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(index, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.client_publishJSON(retptr, this.ptr, ptr0, len0, addBorrowedObject(data));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Publishes arbitrary JSON data to the specified index on the Tangle.\n    * Retries (promotes or reattaches) the message until it’s included (referenced by a milestone).\n    * Default interval is 5 seconds and max attempts is 40.\n    * @param {string} index\n    * @param {any} data\n    * @param {number | undefined} interval\n    * @param {number | undefined} max_attempts\n    * @returns {Promise<any>}\n    */\n    publishJsonWithRetry(index, data, interval, max_attempts) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(index, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.client_publishJsonWithRetry(retptr, this.ptr, ptr0, len0, addBorrowedObject(data), !isLikeNone(interval), isLikeNone(interval) ? 0 : interval, !isLikeNone(max_attempts), isLikeNone(max_attempts) ? 0 : max_attempts);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Checks if a message is confirmed by a milestone.\n    * @param {string} messageId\n    * @returns {Promise<boolean>}\n    */\n    isMessageIncluded(messageId) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(messageId, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.client_isMessageIncluded(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Fetch the DID document specified by the given `DID`.\n    * @param {DID | string} did\n    * @returns {Promise<ResolvedDocument>}\n    */\n    resolve(did) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.client_resolve(retptr, this.ptr, addHeapObject(did));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the message history of the given DID.\n    * @param {DID | string} did\n    * @returns {Promise<DocumentHistory>}\n    */\n    resolveHistory(did) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.client_resolveHistory(retptr, this.ptr, addHeapObject(did));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the `DiffChainHistory` of a diff chain starting from a document on the\n    * integration chain.\n    *\n    * NOTE: the document must have been published to the tangle and have a valid message id and\n    * capability invocation method.\n    *\n    * @deprecated since 0.5.0, diff chain features are slated for removal.\n    * @param {ResolvedDocument} document\n    * @returns {Promise<DiffChainHistory>}\n    */\n    resolveDiffHistory(document) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(document, ResolvedDocument);\n            wasm.client_resolveDiffHistory(retptr, this.ptr, document.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nmodule.exports.Client = Client;\n\nconst CredentialFinalization = new FinalizationRegistry(ptr => wasm.__wbg_credential_free(ptr));\n/**\n*/\nclass Credential {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Credential.prototype);\n        obj.ptr = ptr;\n        CredentialFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    toJSON() {\n        return {\n        };\n    }\n\n    toString() {\n        return JSON.stringify(this);\n    }\n\n    [inspect.custom]() {\n        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        CredentialFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_credential_free(ptr);\n    }\n    /**\n    * Returns the base JSON-LD context.\n    * @returns {string}\n    */\n    static BaseContext() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.credential_BaseContext(retptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * Returns the base type.\n    * @returns {string}\n    */\n    static BaseType() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.credential_BaseType(retptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Constructs a new `Credential`.\n    * @param {ICredential} values\n    */\n    constructor(values) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.credential_new(retptr, addHeapObject(values));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Credential.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns a copy of the JSON-LD context(s) applicable to the `Credential`.\n    * @returns {Array<string | Record<string, any>>}\n    */\n    context() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.credential_context(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns a copy of the unique `URI` identifying the `Credential` .\n    * @returns {string | undefined}\n    */\n    id() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.credential_id(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns a copy of the URIs defining the type of the `Credential`.\n    * @returns {Array<string>}\n    */\n    type() {\n        const ret = wasm.credential_type(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Returns a copy of the `Credential` subject(s).\n    * @returns {Array<Subject>}\n    */\n    credentialSubject() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.credential_credentialSubject(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns a copy of the issuer of the `Credential`.\n    * @returns {string | Issuer}\n    */\n    issuer() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.credential_issuer(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns a copy of the timestamp of when the `Credential` becomes valid.\n    * @returns {Timestamp}\n    */\n    issuanceDate() {\n        const ret = wasm.credential_issuanceDate(this.ptr);\n        return Timestamp.__wrap(ret);\n    }\n    /**\n    * Returns a copy of the timestamp of when the `Credential` should no longer be considered valid.\n    * @returns {Timestamp | undefined}\n    */\n    expirationDate() {\n        const ret = wasm.credential_expirationDate(this.ptr);\n        return ret === 0 ? undefined : Timestamp.__wrap(ret);\n    }\n    /**\n    * Returns a copy of the information used to determine the current status of the `Credential`.\n    * @returns {Array<Status>}\n    */\n    credentialStatus() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.credential_credentialStatus(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns a copy of the information used to assist in the enforcement of a specific `Credential` structure.\n    * @returns {Array<Schema>}\n    */\n    credentialSchema() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.credential_credentialSchema(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns a copy of the service(s) used to refresh an expired `Credential`.\n    * @returns {Array<RefreshService>}\n    */\n    refreshService() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.credential_refreshService(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns a copy of the terms-of-use specified by the `Credential` issuer.\n    * @returns {Array<Policy>}\n    */\n    termsOfUse() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.credential_termsOfUse(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns a copy of the human-readable evidence used to support the claims within the `Credential`.\n    * @returns {Array<Evidence>}\n    */\n    evidence() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.credential_evidence(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns whether or not the `Credential` must only be contained within a {@link Presentation}\n    * with a proof issued from the `Credential` subject.\n    * @returns {boolean | undefined}\n    */\n    nonTransferable() {\n        const ret = wasm.credential_nonTransferable(this.ptr);\n        return ret === 0xFFFFFF ? undefined : ret !== 0;\n    }\n    /**\n    * Returns a copy of the proof used to verify the `Credential`.\n    * @returns {Proof | undefined}\n    */\n    proof() {\n        const ret = wasm.credential_proof(this.ptr);\n        return ret === 0 ? undefined : Proof.__wrap(ret);\n    }\n    /**\n    * Returns a copy of the miscellaneous properties on the `Credential`.\n    * @returns {Map<string, any>}\n    */\n    properties() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.credential_properties(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Serializes a `Credential` to a JSON object.\n    * @returns {any}\n    */\n    toJSON() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.credential_toJSON(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Deserializes a `Credential` from a JSON object.\n    * @param {any} json\n    * @returns {Credential}\n    */\n    static fromJSON(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.credential_fromJSON(retptr, addBorrowedObject(json));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Credential.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Deep clones the object.\n    * @returns {Credential}\n    */\n    clone() {\n        const ret = wasm.credential_clone(this.ptr);\n        return Credential.__wrap(ret);\n    }\n}\nmodule.exports.Credential = Credential;\n\nconst CredentialValidationOptionsFinalization = new FinalizationRegistry(ptr => wasm.__wbg_credentialvalidationoptions_free(ptr));\n/**\n* Options to declare validation criteria when validating credentials.\n*/\nclass CredentialValidationOptions {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CredentialValidationOptions.prototype);\n        obj.ptr = ptr;\n        CredentialValidationOptionsFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        CredentialValidationOptionsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_credentialvalidationoptions_free(ptr);\n    }\n    /**\n    * Creates a new `CredentialValidationOptions` from the given fields.\n    *\n    * Throws an error if any of the options are invalid.\n    * @param {ICredentialValidationOptions} options\n    */\n    constructor(options) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.credentialvalidationoptions_new(retptr, addHeapObject(options));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return CredentialValidationOptions.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Creates a new `CredentialValidationOptions` with defaults.\n    * @returns {CredentialValidationOptions}\n    */\n    static default() {\n        const ret = wasm.credentialvalidationoptions_default();\n        return CredentialValidationOptions.__wrap(ret);\n    }\n    /**\n    * Serializes a `CredentialValidationOptions` as a JSON object.\n    * @returns {any}\n    */\n    toJSON() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.credentialvalidationoptions_toJSON(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Deserializes a `CredentialValidationOptions` from a JSON object.\n    * @param {any} json\n    * @returns {CredentialValidationOptions}\n    */\n    static fromJSON(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.credentialvalidationoptions_fromJSON(retptr, addBorrowedObject(json));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return CredentialValidationOptions.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Deep clones the object.\n    * @returns {CredentialValidationOptions}\n    */\n    clone() {\n        const ret = wasm.credentialvalidationoptions_clone(this.ptr);\n        return CredentialValidationOptions.__wrap(ret);\n    }\n}\nmodule.exports.CredentialValidationOptions = CredentialValidationOptions;\n\nconst CredentialValidatorFinalization = new FinalizationRegistry(ptr => wasm.__wbg_credentialvalidator_free(ptr));\n/**\n*/\nclass CredentialValidator {\n\n    toJSON() {\n        return {\n        };\n    }\n\n    toString() {\n        return JSON.stringify(this);\n    }\n\n    [inspect.custom]() {\n        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        CredentialValidatorFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_credentialvalidator_free(ptr);\n    }\n    /**\n    * Validates a `Credential`.\n    *\n    * The following properties are validated according to `options`:\n    * - the issuer's signature,\n    * - the expiration date,\n    * - the issuance date,\n    * - the semantic structure.\n    *\n    * ### Warning\n    * The lack of an error returned from this method is in of itself not enough to conclude that the credential can be\n    * trusted. This section contains more information on additional checks that should be carried out before and after\n    * calling this method.\n    *\n    * #### The state of the issuer's DID Document\n    * The caller must ensure that `issuer` represents an up-to-date DID Document. The convenience method\n    * `Resolver::resolveCredentialIssuer` can help extract the latest available state of the issuer's DID Document.\n    *\n    * #### Properties that are not validated\n    *  There are many properties defined in [The Verifiable Credentials Data Model](https://www.w3.org/TR/vc-data-model/) that are **not** validated, such as:\n    * `credentialStatus`, `type`, `credentialSchema`, `refreshService`, **and more**.\n    * These should be manually checked after validation, according to your requirements.\n    *\n    * ### Errors\n    * An error is returned whenever a validated condition is not satisfied.\n    * @param {Credential} credential\n    * @param {Document | ResolvedDocument} issuer\n    * @param {CredentialValidationOptions} options\n    * @param {number} fail_fast\n    */\n    static validate(credential, issuer, options, fail_fast) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(credential, Credential);\n            _assertClass(options, CredentialValidationOptions);\n            wasm.credentialvalidator_validate(retptr, credential.ptr, addBorrowedObject(issuer), options.ptr, fail_fast);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Validates the semantic structure of the `Credential`.\n    *\n    * ### Warning\n    * This does not validate against the credential's schema nor the structure of the subject claims.\n    * @param {Credential} credential\n    */\n    static checkStructure(credential) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(credential, Credential);\n            wasm.credentialvalidator_checkStructure(retptr, credential.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Validate that the credential expires on or after the specified timestamp.\n    * @param {Credential} credential\n    * @param {Timestamp} timestamp\n    */\n    static checkExpiresOnOrAfter(credential, timestamp) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(credential, Credential);\n            _assertClass(timestamp, Timestamp);\n            wasm.credentialvalidator_checkExpiresOnOrAfter(retptr, credential.ptr, timestamp.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Validate that the credential is issued on or before the specified timestamp.\n    * @param {Credential} credential\n    * @param {Timestamp} timestamp\n    */\n    static checkIssuedOnOrBefore(credential, timestamp) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(credential, Credential);\n            _assertClass(timestamp, Timestamp);\n            wasm.credentialvalidator_checkIssuedOnOrBefore(retptr, credential.ptr, timestamp.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Verify the signature using the DID Document of a trusted issuer.\n    *\n    * # Warning\n    * The caller must ensure that the DID Documents of the trusted issuers are up-to-date.\n    * ### Errors\n    * This method immediately returns an error if\n    * the credential issuer' url cannot be parsed to a DID belonging to one of the trusted issuers. Otherwise an attempt\n    * to verify the credential's signature will be made and an error is returned upon failure.\n    * @param {Credential} credential\n    * @param {Array<Document> | Array<ResolvedDocument>} trusted_issuers\n    * @param {VerifierOptions} options\n    */\n    static verifySignature(credential, trusted_issuers, options) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(credential, Credential);\n            _assertClass(options, VerifierOptions);\n            wasm.credentialvalidator_verifySignature(retptr, credential.ptr, addBorrowedObject(trusted_issuers), options.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Validate that the relationship between the `holder` and the credential subjects is in accordance with\n    * `relationship`. The `holder_url` parameter is expected to be the URL of the holder.\n    * @param {Credential} credential\n    * @param {string} holder_url\n    * @param {number} relationship\n    */\n    static check_subject_holder_relationship(credential, holder_url, relationship) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(credential, Credential);\n            const ptr0 = passStringToWasm0(holder_url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.credentialvalidator_check_subject_holder_relationship(retptr, credential.ptr, ptr0, len0, relationship);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Checks whether the credential status has been revoked.\n    *\n    * Only supports `BitmapRevocation2022`.\n    * @param {Credential} credential\n    * @param {Array<Document> | Array<ResolvedDocument>} trustedIssuers\n    * @param {number} statusCheck\n    */\n    static checkStatus(credential, trustedIssuers, statusCheck) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(credential, Credential);\n            wasm.credentialvalidator_checkStatus(retptr, credential.ptr, addBorrowedObject(trustedIssuers), statusCheck);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n}\nmodule.exports.CredentialValidator = CredentialValidator;\n\nconst DIDFinalization = new FinalizationRegistry(ptr => wasm.__wbg_did_free(ptr));\n/**\n* @typicalname did\n*/\nclass DID {\n\n    static __wrap(ptr) {\n        const obj = Object.create(DID.prototype);\n        obj.ptr = ptr;\n        DIDFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    toJSON() {\n        return {\n            networkName: this.networkName,\n        };\n    }\n\n    toString() {\n        return JSON.stringify(this);\n    }\n\n    [inspect.custom]() {\n        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        DIDFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_did_free(ptr);\n    }\n    /**\n    * Creates a new `DID` from a public key.\n    * @param {Uint8Array} public_key\n    * @param {string | undefined} network\n    */\n    constructor(public_key, network) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(public_key, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            var ptr1 = isLikeNone(network) ? 0 : passStringToWasm0(network, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len1 = WASM_VECTOR_LEN;\n            wasm.did_new(retptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return DID.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Parses a `DID` from the input string.\n    * @param {string} input\n    * @returns {DID}\n    */\n    static parse(input) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(input, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.did_parse(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return DID.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the IOTA tangle network of the `DID`.\n    * @returns {Network}\n    */\n    network() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.did_network(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Network.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the IOTA tangle network of the `DID`.\n    */\n    get networkName() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.did_network_name(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Returns a copy of the unique tag of the `DID`.\n    * @returns {string}\n    */\n    tag() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.did_tag(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Construct a new `DIDUrl` by joining with a relative DID Url string.\n    * @param {string} segment\n    * @returns {DIDUrl}\n    */\n    join(segment) {\n        try {\n            const ptr = this.__destroy_into_raw();\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(segment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.did_join(retptr, ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return DIDUrl.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Clones the `DID` into a `DIDUrl`.\n    * @returns {DIDUrl}\n    */\n    toUrl() {\n        const ret = wasm.did_toUrl(this.ptr);\n        return DIDUrl.__wrap(ret);\n    }\n    /**\n    * Converts the `DID` into a `DIDUrl`.\n    * @returns {DIDUrl}\n    */\n    intoUrl() {\n        const ptr = this.__destroy_into_raw();\n        const ret = wasm.did_intoUrl(ptr);\n        return DIDUrl.__wrap(ret);\n    }\n    /**\n    * Returns the `DID` as a string.\n    * @returns {string}\n    */\n    toString() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.did_toString(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Deserializes a JSON object as `DID`.\n    * @param {any} json_value\n    * @returns {DID}\n    */\n    static fromJSON(json_value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.did_fromJSON(retptr, addHeapObject(json_value));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return DID.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Serializes a `DID` as a JSON object.\n    * @returns {any}\n    */\n    toJSON() {\n        const ret = wasm.did_toJSON(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Deep clones the object.\n    * @returns {DID}\n    */\n    clone() {\n        const ret = wasm.did_clone(this.ptr);\n        return DID.__wrap(ret);\n    }\n}\nmodule.exports.DID = DID;\n\nconst DIDUrlFinalization = new FinalizationRegistry(ptr => wasm.__wbg_didurl_free(ptr));\n/**\n* @typicalname didUrl\n*/\nclass DIDUrl {\n\n    static __wrap(ptr) {\n        const obj = Object.create(DIDUrl.prototype);\n        obj.ptr = ptr;\n        DIDUrlFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    toJSON() {\n        return {\n        };\n    }\n\n    toString() {\n        return JSON.stringify(this);\n    }\n\n    [inspect.custom]() {\n        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        DIDUrlFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_didurl_free(ptr);\n    }\n    /**\n    * Parses a `DIDUrl` from the input string.\n    * @param {string} input\n    * @returns {DIDUrl}\n    */\n    static parse(input) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(input, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.didurl_parse(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return DIDUrl.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return a copy of the `DID` section of the `DIDUrl`.\n    * @returns {DID}\n    */\n    did() {\n        const ret = wasm.didurl_did(this.ptr);\n        return DID.__wrap(ret);\n    }\n    /**\n    * Return a copy of the relative DID Url as a string, including only the path, query, and fragment.\n    * @returns {string}\n    */\n    urlStr() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.didurl_urlStr(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Returns a copy of the `DIDUrl` method fragment, if any. Excludes the leading '#'.\n    * @returns {string | undefined}\n    */\n    fragment() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.didurl_fragment(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Sets the `fragment` component of the `DIDUrl`.\n    * @param {string | undefined} value\n    */\n    setFragment(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.didurl_setFragment(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns a copy of the `DIDUrl` path.\n    * @returns {string | undefined}\n    */\n    path() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.didurl_path(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Sets the `path` component of the `DIDUrl`.\n    * @param {string | undefined} value\n    */\n    setPath(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.didurl_setPath(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns a copy of the `DIDUrl` method query, if any. Excludes the leading '?'.\n    * @returns {string | undefined}\n    */\n    query() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.didurl_query(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Sets the `query` component of the `DIDUrl`.\n    * @param {string | undefined} value\n    */\n    setQuery(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(value) ? 0 : passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.didurl_setQuery(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Append a string representing a path, query, and/or fragment, returning a new `DIDUrl`.\n    *\n    * Must begin with a valid delimiter character: '/', '?', '#'. Overwrites the existing URL\n    * segment and any following segments in order of path, query, then fragment.\n    *\n    * I.e.\n    * - joining a path will clear the query and fragment.\n    * - joining a query will clear the fragment.\n    * - joining a fragment will only overwrite the fragment.\n    * @param {string} segment\n    * @returns {DIDUrl}\n    */\n    join(segment) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(segment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.didurl_join(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return DIDUrl.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the `DIDUrl` as a string.\n    * @returns {string}\n    */\n    toString() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.didurl_toString(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Serializes a `DIDUrl` as a JSON object.\n    * @returns {any}\n    */\n    toJSON() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.didurl_toJSON(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Deep clones the object.\n    * @returns {DIDUrl}\n    */\n    clone() {\n        const ret = wasm.didurl_clone(this.ptr);\n        return DIDUrl.__wrap(ret);\n    }\n}\nmodule.exports.DIDUrl = DIDUrl;\n\nconst DiffChainHistoryFinalization = new FinalizationRegistry(ptr => wasm.__wbg_diffchainhistory_free(ptr));\n/**\n* @deprecated since 0.5.0, diff chain features are slated for removal.\n*/\nclass DiffChainHistory {\n\n    static __wrap(ptr) {\n        const obj = Object.create(DiffChainHistory.prototype);\n        obj.ptr = ptr;\n        DiffChainHistoryFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    toJSON() {\n        return {\n        };\n    }\n\n    toString() {\n        return JSON.stringify(this);\n    }\n\n    [inspect.custom]() {\n        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        DiffChainHistoryFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_diffchainhistory_free(ptr);\n    }\n    /**\n    * Returns an `Array` of the diff chain `DiffMessages`.\n    *\n    * NOTE: this clones the field.\n    * @returns {Array<DiffMessage>}\n    */\n    chainData() {\n        const ret = wasm.diffchainhistory_chainData(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Returns an `Array` of `MessageIds` as strings.\n    *\n    * NOTE: this clones the field.\n    * @returns {Array<string>}\n    */\n    spam() {\n        const ret = wasm.diffchainhistory_spam(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Serializes as a JSON object.\n    * @returns {any}\n    */\n    toJSON() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.diffchainhistory_toJSON(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Deserializes from a JSON object.\n    * @param {any} json\n    * @returns {DiffChainHistory}\n    */\n    static fromJSON(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.diffchainhistory_fromJSON(retptr, addBorrowedObject(json));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return DiffChainHistory.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n}\nmodule.exports.DiffChainHistory = DiffChainHistory;\n\nconst DiffMessageFinalization = new FinalizationRegistry(ptr => wasm.__wbg_diffmessage_free(ptr));\n/**\n* Defines the difference between two DID `Document`s' JSON representations.\n*\n* @deprecated since 0.5.0, diff chain features are slated for removal.\n*/\nclass DiffMessage {\n\n    static __wrap(ptr) {\n        const obj = Object.create(DiffMessage.prototype);\n        obj.ptr = ptr;\n        DiffMessageFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    toJSON() {\n        return {\n        };\n    }\n\n    toString() {\n        return JSON.stringify(this);\n    }\n\n    [inspect.custom]() {\n        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        DiffMessageFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_diffmessage_free(ptr);\n    }\n    /**\n    * Returns the DID of the associated DID Document.\n    *\n    * NOTE: clones the data.\n    *\n    * @deprecated since 0.5.0, diff chain features are slated for removal.\n    * @returns {DID}\n    */\n    id() {\n        const ret = wasm.diffmessage_id(this.ptr);\n        return DID.__wrap(ret);\n    }\n    /**\n    * Returns a copy of the DID of the associated DID Document.\n    *\n    * @deprecated since 0.5.0, diff chain features are slated for removal.\n    * @returns {DID}\n    */\n    did() {\n        const ret = wasm.diffmessage_did(this.ptr);\n        return DID.__wrap(ret);\n    }\n    /**\n    * Returns a copy of the raw contents of the DID Document diff as a JSON string.\n    *\n    * @deprecated since 0.5.0, diff chain features are slated for removal.\n    * @returns {string}\n    */\n    diff() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.diffmessage_diff(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * Returns a copy of the message_id of the DID Document diff.\n    *\n    * @deprecated since 0.5.0, diff chain features are slated for removal.\n    * @returns {string}\n    */\n    messageId() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.diffmessage_messageId(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Sets the message_id of the DID Document diff.\n    *\n    * @deprecated since 0.5.0, diff chain features are slated for removal.\n    * @param {string} message_id\n    */\n    setMessageId(message_id) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(message_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.diffmessage_setMessageId(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns a copy of the Tangle message id of the previous DID Document diff.\n    *\n    * @deprecated since 0.5.0, diff chain features are slated for removal.\n    * @returns {string}\n    */\n    previousMessageId() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.diffmessage_previousMessageId(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Sets the Tangle message id of the previous DID Document diff.\n    *\n    * @deprecated since 0.5.0, diff chain features are slated for removal.\n    * @param {string} message_id\n    */\n    setPreviousMessageId(message_id) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(message_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.diffmessage_setPreviousMessageId(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns a copy of the proof.\n    *\n    * @deprecated since 0.5.0, diff chain features are slated for removal.\n    * @returns {Proof | undefined}\n    */\n    proof() {\n        const ret = wasm.diffmessage_proof(this.ptr);\n        return ret === 0 ? undefined : Proof.__wrap(ret);\n    }\n    /**\n    * Returns a new DID Document which is the result of merging `self`\n    * with the given Document.\n    *\n    * @deprecated since 0.5.0, diff chain features are slated for removal.\n    * @param {Document} document\n    * @returns {Document}\n    */\n    merge(document) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(document, Document);\n            wasm.diffmessage_merge(retptr, this.ptr, document.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Document.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Serializes a `DiffMessage` as a JSON object.\n    *\n    * @deprecated since 0.5.0, diff chain features are slated for removal.\n    * @returns {any}\n    */\n    toJSON() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.diffmessage_toJSON(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Deserializes a `DiffMessage` from a JSON object.\n    *\n    * @deprecated since 0.5.0, diff chain features are slated for removal.\n    * @param {any} json\n    * @returns {DiffMessage}\n    */\n    static fromJSON(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.diffmessage_fromJSON(retptr, addBorrowedObject(json));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return DiffMessage.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Deep clones the object.\n    * @returns {DiffMessage}\n    */\n    clone() {\n        const ret = wasm.diffmessage_clone(this.ptr);\n        return DiffMessage.__wrap(ret);\n    }\n}\nmodule.exports.DiffMessage = DiffMessage;\n\nconst DocumentFinalization = new FinalizationRegistry(ptr => wasm.__wbg_document_free(ptr));\n/**\n*/\nclass Document {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Document.prototype);\n        obj.ptr = ptr;\n        DocumentFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    toJSON() {\n        return {\n        };\n    }\n\n    toString() {\n        return JSON.stringify(this);\n    }\n\n    [inspect.custom]() {\n        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        DocumentFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_document_free(ptr);\n    }\n    /**\n    * Creates a new DID Document from the given `KeyPair`, network, and verification method\n    * fragment name.\n    *\n    * The DID Document will be pre-populated with a single verification method\n    * derived from the provided `KeyPair` embedded as a capability invocation\n    * verification relationship. This method will have the DID URL fragment\n    * `#sign-0` by default and can be easily retrieved with `Document::defaultSigningMethod`.\n    *\n    * NOTE: the generated document is unsigned, see `Document::signSelf`.\n    *\n    * Arguments:\n    *\n    * * keypair: the initial verification method is derived from the public key with this keypair.\n    * * network: Tangle network to use for the DID, default `Network::mainnet`.\n    * * fragment: name of the initial verification method, default \"sign-0\".\n    * @param {KeyPair} keypair\n    * @param {string | undefined} network\n    * @param {string | undefined} fragment\n    */\n    constructor(keypair, network, fragment) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(keypair, KeyPair);\n            var ptr0 = isLikeNone(network) ? 0 : passStringToWasm0(network, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            var ptr1 = isLikeNone(fragment) ? 0 : passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len1 = WASM_VECTOR_LEN;\n            wasm.document_new(retptr, keypair.ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Document.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Creates a new DID Document from the given `VerificationMethod`.\n    *\n    * NOTE: the generated document is unsigned, see `Document::signSelf`.\n    * @param {VerificationMethod} method\n    * @returns {Document}\n    */\n    static fromVerificationMethod(method) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(method, VerificationMethod);\n            wasm.document_fromVerificationMethod(retptr, method.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Document.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns whether the given {@link MethodType} can be used to sign document updates.\n    * @param {MethodType} method_type\n    * @returns {boolean}\n    */\n    static isSigningMethodType(method_type) {\n        _assertClass(method_type, MethodType);\n        const ret = wasm.document_isSigningMethodType(method_type.ptr);\n        return ret !== 0;\n    }\n    /**\n    * Returns a copy of the DID Document `id`.\n    * @returns {DID}\n    */\n    id() {\n        const ret = wasm.document_id(this.ptr);\n        return DID.__wrap(ret);\n    }\n    /**\n    * Sets the controllers of the DID Document.\n    *\n    * Note: Duplicates will be ignored.\n    * Use `null` to remove all controllers.\n    * @param {DID | DID[] | null} controllers\n    */\n    setController(controllers) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.document_setController(retptr, this.ptr, addBorrowedObject(controllers));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Returns a list of document controllers.\n    * @returns {DID[]}\n    */\n    controller() {\n        const ret = wasm.document_controller(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Sets the `alsoKnownAs` property in the DID document.\n    * @param {string | string[] | null} urls\n    */\n    setAlsoKnownAs(urls) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.document_setAlsoKnownAs(retptr, this.ptr, addBorrowedObject(urls));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Returns a set of the document's `alsoKnownAs`.\n    * @returns {Array<string>}\n    */\n    alsoKnownAs() {\n        const ret = wasm.document_alsoKnownAs(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Adds a custom property to the DID Document.\n    * If the value is set to `null`, the custom property will be removed.\n    *\n    * ### WARNING\n    * This method can overwrite existing properties like `id` and result in an invalid document.\n    * @param {string} key\n    * @param {any} value\n    */\n    setPropertyUnchecked(key, value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.document_setPropertyUnchecked(retptr, this.ptr, ptr0, len0, addBorrowedObject(value));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Returns a copy of the custom DID Document properties.\n    * @returns {Map<string, any>}\n    */\n    properties() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.document_properties(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return a set of all {@link Service Services} in the document.\n    * @returns {Service[]}\n    */\n    service() {\n        const ret = wasm.document_service(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Add a new {@link Service} to the document.\n    *\n    * Returns `true` if the service was added.\n    * @param {Service} service\n    * @returns {boolean}\n    */\n    insertService(service) {\n        _assertClass(service, Service);\n        const ret = wasm.document_insertService(this.ptr, service.ptr);\n        return ret !== 0;\n    }\n    /**\n    * Remove a {@link Service} identified by the given {@link DIDUrl} from the document.\n    *\n    * Returns `true` if a service was removed.\n    * @param {DIDUrl} did\n    * @returns {boolean}\n    */\n    removeService(did) {\n        _assertClass(did, DIDUrl);\n        const ret = wasm.document_removeService(this.ptr, did.ptr);\n        return ret !== 0;\n    }\n    /**\n    * Returns a list of all {@link VerificationMethod} in the DID Document.\n    * @returns {VerificationMethod[]}\n    */\n    methods() {\n        const ret = wasm.document_methods(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Adds a new Verification Method to the DID Document.\n    * @param {VerificationMethod} method\n    * @param {MethodScope} scope\n    */\n    insertMethod(method, scope) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(method, VerificationMethod);\n            _assertClass(scope, MethodScope);\n            wasm.document_insertMethod(retptr, this.ptr, method.ptr, scope.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Removes all references to the specified Verification Method.\n    * @param {DIDUrl} did\n    */\n    removeMethod(did) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(did, DIDUrl);\n            wasm.document_removeMethod(retptr, this.ptr, did.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns a copy of the first `VerificationMethod` with a capability invocation relationship\n    * capable of signing this DID document.\n    *\n    * Throws an error if no signing method is present.\n    * @returns {VerificationMethod}\n    */\n    defaultSigningMethod() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.document_defaultSigningMethod(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerificationMethod.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns a copy of the first `VerificationMethod` with an `id` property\n    * matching the provided `query`.\n    *\n    * Throws an error if the method is not found.\n    * @param {DIDUrl | string} query\n    * @param {MethodScope | undefined} scope\n    * @returns {VerificationMethod | undefined}\n    */\n    resolveMethod(query, scope) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.document_resolveMethod(retptr, this.ptr, addBorrowedObject(query), isLikeNone(scope) ? 0 : addHeapObject(scope));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : VerificationMethod.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Attempts to resolve the given method query into a method capable of signing a document update.\n    * @param {DIDUrl | string} query\n    * @returns {VerificationMethod}\n    */\n    resolveSigningMethod(query) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.document_resolveSigningMethod(retptr, this.ptr, addBorrowedObject(query));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerificationMethod.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Attaches the relationship to the given method, if the method exists.\n    *\n    * Note: The method needs to be in the set of verification methods,\n    * so it cannot be an embedded one.\n    * @param {DIDUrl} did_url\n    * @param {number} relationship\n    * @returns {boolean}\n    */\n    attachMethodRelationship(did_url, relationship) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(did_url, DIDUrl);\n            wasm.document_attachMethodRelationship(retptr, this.ptr, did_url.ptr, relationship);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Detaches the given relationship from the given method, if the method exists.\n    * @param {DIDUrl} did_url\n    * @param {number} relationship\n    * @returns {boolean}\n    */\n    detachMethodRelationship(did_url, relationship) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(did_url, DIDUrl);\n            wasm.document_detachMethodRelationship(retptr, this.ptr, did_url.ptr, relationship);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Signs the DID document with the verification method specified by `method_query`.\n    * The `method_query` may be the full `DIDUrl` of the method or just its fragment,\n    * e.g. \"#sign-0\".\n    *\n    * NOTE: does not validate whether the private key of the given `key_pair` corresponds to the\n    * verification method. See `Document::verifySelfSigned`.\n    * @param {KeyPair} key_pair\n    * @param {DIDUrl | string} method_query\n    */\n    signSelf(key_pair, method_query) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(key_pair, KeyPair);\n            wasm.document_signSelf(retptr, this.ptr, key_pair.ptr, addBorrowedObject(method_query));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Signs another DID document using the verification method specified by `method_query`.\n    * The `method_query` may be the full `DIDUrl` of the method or just its fragment,\n    * e.g. \"#sign-0\".\n    *\n    * `Document.signSelf` should be used in general, this throws an error if trying to operate\n    * on the same document. This is intended for signing updates to a document where a sole\n    * capability invocation method is rotated or replaced entirely.\n    *\n    * NOTE: does not validate whether the private key of the given `key_pair` corresponds to the\n    * verification method. See {@link Document.verifyDocument}.\n    * @param {Document} document\n    * @param {KeyPair} key_pair\n    * @param {DIDUrl | string} method_query\n    */\n    signDocument(document, key_pair, method_query) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(document, Document);\n            _assertClass(key_pair, KeyPair);\n            wasm.document_signDocument(retptr, this.ptr, document.ptr, key_pair.ptr, addBorrowedObject(method_query));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Creates a signature for the given `Credential` with the specified DID Document\n    * Verification Method.\n    * @param {Credential} credential\n    * @param {Uint8Array} privateKey\n    * @param {DIDUrl | string} methodQuery\n    * @param {ProofOptions} options\n    * @returns {Credential}\n    */\n    signCredential(credential, privateKey, methodQuery, options) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(credential, Credential);\n            const ptr0 = passArray8ToWasm0(privateKey, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _assertClass(options, ProofOptions);\n            wasm.document_signCredential(retptr, this.ptr, credential.ptr, ptr0, len0, addBorrowedObject(methodQuery), options.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Credential.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Creates a signature for the given `Presentation` with the specified DID Document\n    * Verification Method.\n    * @param {Presentation} presentation\n    * @param {Uint8Array} privateKey\n    * @param {DIDUrl | string} methodQuery\n    * @param {ProofOptions} options\n    * @returns {Presentation}\n    */\n    signPresentation(presentation, privateKey, methodQuery, options) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(presentation, Presentation);\n            const ptr0 = passArray8ToWasm0(privateKey, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _assertClass(options, ProofOptions);\n            wasm.document_signPresentation(retptr, this.ptr, presentation.ptr, ptr0, len0, addBorrowedObject(methodQuery), options.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Presentation.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Creates a signature for the given `data` with the specified DID Document\n    * Verification Method.\n    *\n    * NOTE: use `signSelf` or `signDocument` for DID Documents.\n    * @param {any} data\n    * @param {Uint8Array} privateKey\n    * @param {DIDUrl | string} methodQuery\n    * @param {ProofOptions} options\n    * @returns {any}\n    */\n    signData(data, privateKey, methodQuery, options) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(privateKey, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _assertClass(options, ProofOptions);\n            wasm.document_signData(retptr, this.ptr, addBorrowedObject(data), ptr0, len0, addBorrowedObject(methodQuery), options.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Verifies the authenticity of `data` using the target verification method.\n    * @param {any} data\n    * @param {VerifierOptions} options\n    * @returns {boolean}\n    */\n    verifyData(data, options) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(options, VerifierOptions);\n            wasm.document_verifyData(retptr, this.ptr, addBorrowedObject(data), options.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Verifies that the signature on the DID document `signed` was generated by a valid method from\n    * this DID document.\n    *\n    * # Errors\n    *\n    * Fails if:\n    * - The signature proof section is missing in the `signed` document.\n    * - The method is not found in this document.\n    * - An unsupported verification method is used.\n    * - The signature verification operation fails.\n    * @param {Document} signed\n    */\n    verifyDocument(signed) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(signed, Document);\n            wasm.document_verifyDocument(retptr, this.ptr, signed.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Verifies whether `document` is a valid root DID document according to the IOTA DID method\n    * specification.\n    *\n    * It must be signed using a verification method with a public key whose BLAKE2b-256 hash matches\n    * the DID tag.\n    * @param {Document} document\n    */\n    static verifyRootDocument(document) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(document, Document);\n            wasm.document_verifyRootDocument(retptr, document.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Generate a `DiffMessage` between two DID Documents and sign it using the specified\n    * `key` and `method`.\n    *\n    * @deprecated since 0.5.0, diff chain features are slated for removal.\n    * @param {Document} other\n    * @param {string} message_id\n    * @param {KeyPair} key\n    * @param {DIDUrl | string} method_query\n    * @returns {DiffMessage}\n    */\n    diff(other, message_id, key, method_query) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(other, Document);\n            const ptr0 = passStringToWasm0(message_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _assertClass(key, KeyPair);\n            wasm.document_diff(retptr, this.ptr, other.ptr, ptr0, len0, key.ptr, addBorrowedObject(method_query));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return DiffMessage.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Verifies the signature of the `diff` was created using a capability invocation method\n    * in this DID Document.\n    *\n    * # Errors\n    *\n    * Fails if an unsupported verification method is used or the verification operation fails.\n    *\n    * @deprecated since 0.5.0, diff chain features are slated for removal.\n    * @param {DiffMessage} diff\n    */\n    verifyDiff(diff) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(diff, DiffMessage);\n            wasm.document_verifyDiff(retptr, this.ptr, diff.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Verifies a `DiffMessage` signature and attempts to merge the changes into `self`.\n    *\n    * @deprecated since 0.5.0, diff chain features are slated for removal.\n    * @param {DiffMessage} diff\n    */\n    mergeDiff(diff) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(diff, DiffMessage);\n            wasm.document_mergeDiff(retptr, this.ptr, diff.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the Tangle index of the integration chain for this DID.\n    *\n    * This is simply the tag segment of the `DID`.\n    * E.g.\n    * For a document with DID: did:iota:1234567890abcdefghijklmnopqrstuvxyzABCDEFGHI,\n    * `doc.integration_index()` == \"1234567890abcdefghijklmnopqrstuvxyzABCDEFGHI\"\n    * @returns {string}\n    */\n    integrationIndex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.document_integrationIndex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Returns the Tangle index of the DID diff chain. This should only be called on documents\n    * published on the integration chain.\n    *\n    * This is the Base58-btc encoded SHA-256 digest of the hex-encoded message id.\n    *\n    * @deprecated since 0.5.0, diff chain features are slated for removal.\n    * @param {string} message_id\n    * @returns {string}\n    */\n    static diffIndex(message_id) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(message_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.document_diffIndex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0; len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n    * Returns a copy of the metadata associated with this document.\n    *\n    * NOTE: Copies all the metadata. See also `metadataCreated`, `metadataUpdated`,\n    * `metadataPreviousMessageId`, `metadataProof` if only a subset of the metadata required.\n    * @returns {DocumentMetadata}\n    */\n    metadata() {\n        const ret = wasm.document_metadata(this.ptr);\n        return DocumentMetadata.__wrap(ret);\n    }\n    /**\n    * Returns a copy of the timestamp of when the DID document was created.\n    * @returns {Timestamp | undefined}\n    */\n    metadataCreated() {\n        const ret = wasm.document_metadataCreated(this.ptr);\n        return ret === 0 ? undefined : Timestamp.__wrap(ret);\n    }\n    /**\n    * Sets the timestamp of when the DID document was created.\n    * @param {Timestamp | undefined} timestamp\n    */\n    setMetadataCreated(timestamp) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.document_setMetadataCreated(retptr, this.ptr, addHeapObject(timestamp));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns a copy of the timestamp of the last DID document update.\n    * @returns {Timestamp | undefined}\n    */\n    metadataUpdated() {\n        const ret = wasm.document_metadataUpdated(this.ptr);\n        return ret === 0 ? undefined : Timestamp.__wrap(ret);\n    }\n    /**\n    * Sets the timestamp of the last DID document update.\n    * @param {Timestamp | undefined} timestamp\n    */\n    setMetadataUpdated(timestamp) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.document_setMetadataUpdated(retptr, this.ptr, addHeapObject(timestamp));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns a copy of the previous integration chain message id.\n    * @returns {string}\n    */\n    metadataPreviousMessageId() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.document_metadataPreviousMessageId(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Sets the previous integration chain message id.\n    * @param {string} value\n    */\n    setMetadataPreviousMessageId(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.document_setMetadataPreviousMessageId(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns a copy of the proof.\n    * @returns {Proof | undefined}\n    */\n    proof() {\n        const ret = wasm.document_proof(this.ptr);\n        return ret === 0 ? undefined : Proof.__wrap(ret);\n    }\n    /**\n    * If the document has a `RevocationBitmap` service identified by `fragment`,\n    * revoke all credentials with a revocationBitmapIndex in `credentialIndices`.\n    * @param {string} fragment\n    * @param {number | number[]} credentialIndices\n    */\n    revokeCredentials(fragment, credentialIndices) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.document_revokeCredentials(retptr, this.ptr, ptr0, len0, addHeapObject(credentialIndices));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * If the document has a `RevocationBitmap` service identified by `fragment`,\n    * unrevoke all credentials with a revocationBitmapIndex in `credentialIndices`.\n    * @param {string} fragment\n    * @param {number | number[]} credentialIndices\n    */\n    unrevokeCredentials(fragment, credentialIndices) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.document_unrevokeCredentials(retptr, this.ptr, ptr0, len0, addHeapObject(credentialIndices));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Serializes a `Document` as a JSON object.\n    * @returns {any}\n    */\n    toJSON() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.document_toJSON(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Deserializes a `Document` from a JSON object.\n    * @param {any} json\n    * @returns {Document}\n    */\n    static fromJSON(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.document_fromJSON(retptr, addBorrowedObject(json));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Document.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Deep clones the object.\n    * @returns {Document}\n    */\n    clone() {\n        const ret = wasm.document_clone(this.ptr);\n        return Document.__wrap(ret);\n    }\n}\nmodule.exports.Document = Document;\n\nconst DocumentHistoryFinalization = new FinalizationRegistry(ptr => wasm.__wbg_documenthistory_free(ptr));\n/**\n* A DID Document's history and current state.\n*/\nclass DocumentHistory {\n\n    static __wrap(ptr) {\n        const obj = Object.create(DocumentHistory.prototype);\n        obj.ptr = ptr;\n        DocumentHistoryFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    toJSON() {\n        return {\n        };\n    }\n\n    toString() {\n        return JSON.stringify(this);\n    }\n\n    [inspect.custom]() {\n        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        DocumentHistoryFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_documenthistory_free(ptr);\n    }\n    /**\n    * Returns an `Array` of integration chain `Documents`.\n    *\n    * NOTE: clones the data.\n    * @returns {Array<ResolvedDocument>}\n    */\n    integrationChainData() {\n        const ret = wasm.documenthistory_integrationChainData(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Returns an `Array` of message id strings for \"spam\" messages on the same index\n    * as the integration chain.\n    *\n    * NOTE: clones the data.\n    * @returns {Array<string>}\n    */\n    integrationChainSpam() {\n        const ret = wasm.documenthistory_integrationChainSpam(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Returns an `Array` of diff chain `DiffMessages`.\n    *\n    * NOTE: clones the data.\n    *\n    * @deprecated since 0.5.0, diff chain features are slated for removal.\n    * @returns {Array<DiffMessage>}\n    */\n    diffChainData() {\n        const ret = wasm.documenthistory_diffChainData(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Returns an `Array` of message id strings for \"spam\" messages on the same index\n    * as the diff chain.\n    *\n    * NOTE: clones the data.\n    *\n    * @deprecated since 0.5.0, diff chain features are slated for removal.\n    * @returns {Array<string>}\n    */\n    diffChainSpam() {\n        const ret = wasm.documenthistory_diffChainSpam(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Serializes `DocumentHistory` as a JSON object.\n    * @returns {any}\n    */\n    toJSON() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.documenthistory_toJSON(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Deserializes `DocumentHistory` from a JSON object.\n    * @param {any} json\n    * @returns {DocumentHistory}\n    */\n    static fromJSON(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.documenthistory_fromJSON(retptr, addBorrowedObject(json));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return DocumentHistory.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Deep clones the object.\n    * @returns {DocumentHistory}\n    */\n    clone() {\n        const ret = wasm.documenthistory_clone(this.ptr);\n        return DocumentHistory.__wrap(ret);\n    }\n}\nmodule.exports.DocumentHistory = DocumentHistory;\n\nconst DocumentMetadataFinalization = new FinalizationRegistry(ptr => wasm.__wbg_documentmetadata_free(ptr));\n/**\n* Additional attributes related to an IOTA DID Document.\n*/\nclass DocumentMetadata {\n\n    static __wrap(ptr) {\n        const obj = Object.create(DocumentMetadata.prototype);\n        obj.ptr = ptr;\n        DocumentMetadataFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    toJSON() {\n        return {\n            previousMessageId: this.previousMessageId,\n        };\n    }\n\n    toString() {\n        return JSON.stringify(this);\n    }\n\n    [inspect.custom]() {\n        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        DocumentMetadataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_documentmetadata_free(ptr);\n    }\n    /**\n    * Returns a copy of the timestamp of when the DID document was created.\n    * @returns {Timestamp | undefined}\n    */\n    created() {\n        const ret = wasm.documentmetadata_created(this.ptr);\n        return ret === 0 ? undefined : Timestamp.__wrap(ret);\n    }\n    /**\n    * Returns a copy of the timestamp of the last DID document update.\n    * @returns {Timestamp | undefined}\n    */\n    updated() {\n        const ret = wasm.documentmetadata_updated(this.ptr);\n        return ret === 0 ? undefined : Timestamp.__wrap(ret);\n    }\n    /**\n    */\n    get previousMessageId() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.documentmetadata_previous_message_id(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Deep clones the object.\n    * @returns {DocumentMetadata}\n    */\n    clone() {\n        const ret = wasm.documentmetadata_clone(this.ptr);\n        return DocumentMetadata.__wrap(ret);\n    }\n}\nmodule.exports.DocumentMetadata = DocumentMetadata;\n\nconst DurationFinalization = new FinalizationRegistry(ptr => wasm.__wbg_duration_free(ptr));\n/**\n* A span of time.\n*/\nclass Duration {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Duration.prototype);\n        obj.ptr = ptr;\n        DurationFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    toJSON() {\n        return {\n        };\n    }\n\n    toString() {\n        return JSON.stringify(this);\n    }\n\n    [inspect.custom]() {\n        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        DurationFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_duration_free(ptr);\n    }\n    /**\n    * Create a new `Duration` with the given number of seconds.\n    * @param {number} seconds\n    * @returns {Duration}\n    */\n    static seconds(seconds) {\n        const ret = wasm.duration_seconds(seconds);\n        return Duration.__wrap(ret);\n    }\n    /**\n    * Create a new `Duration` with the given number of minutes.\n    * @param {number} minutes\n    * @returns {Duration}\n    */\n    static minutes(minutes) {\n        const ret = wasm.duration_minutes(minutes);\n        return Duration.__wrap(ret);\n    }\n    /**\n    * Create a new `Duration` with the given number of hours.\n    * @param {number} hours\n    * @returns {Duration}\n    */\n    static hours(hours) {\n        const ret = wasm.duration_hours(hours);\n        return Duration.__wrap(ret);\n    }\n    /**\n    * Create a new `Duration` with the given number of days.\n    * @param {number} days\n    * @returns {Duration}\n    */\n    static days(days) {\n        const ret = wasm.duration_days(days);\n        return Duration.__wrap(ret);\n    }\n    /**\n    * Create a new `Duration` with the given number of weeks.\n    * @param {number} weeks\n    * @returns {Duration}\n    */\n    static weeks(weeks) {\n        const ret = wasm.duration_weeks(weeks);\n        return Duration.__wrap(ret);\n    }\n    /**\n    * Serializes a `Duration` as a JSON object.\n    * @returns {any}\n    */\n    toJSON() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.duration_toJSON(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Deserializes a `Duration` from a JSON object.\n    * @param {any} json\n    * @returns {Duration}\n    */\n    static fromJSON(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.duration_fromJSON(retptr, addBorrowedObject(json));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Duration.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n}\nmodule.exports.Duration = Duration;\n\nconst Ed25519Finalization = new FinalizationRegistry(ptr => wasm.__wbg_ed25519_free(ptr));\n/**\n*/\nclass Ed25519 {\n\n    toJSON() {\n        return {\n        };\n    }\n\n    toString() {\n        return JSON.stringify(this);\n    }\n\n    [inspect.custom]() {\n        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        Ed25519Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ed25519_free(ptr);\n    }\n    /**\n    * Length in bytes of an Ed25519 private key.\n    * @returns {number}\n    */\n    static PRIVATE_KEY_LENGTH() {\n        const ret = wasm.ed25519_PRIVATE_KEY_LENGTH();\n        return ret >>> 0;\n    }\n    /**\n    * Length in bytes of an Ed25519 public key.\n    * @returns {number}\n    */\n    static PUBLIC_KEY_LENGTH() {\n        const ret = wasm.ed25519_PUBLIC_KEY_LENGTH();\n        return ret >>> 0;\n    }\n    /**\n    * Length in bytes of an Ed25519 signature.\n    * @returns {number}\n    */\n    static SIGNATURE_LENGTH() {\n        const ret = wasm.ed25519_SIGNATURE_LENGTH();\n        return ret >>> 0;\n    }\n    /**\n    * Computes an EdDSA signature using an Ed25519 private key.\n    *\n    * NOTE: this differs from {@link Document.signData} which uses JCS\n    * to canonicalize JSON messages.\n    *\n    * The private key must be a 32-byte seed in compliance with [RFC 8032](https://datatracker.ietf.org/doc/html/rfc8032#section-3.2).\n    * Other implementations often use another format. See [this blog post](https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/) for further explanation.\n    * @param {Uint8Array} message\n    * @param {Uint8Array} privateKey\n    * @returns {Uint8Array}\n    */\n    static sign(message, privateKey) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passArray8ToWasm0(privateKey, wasm.__wbindgen_malloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.ed25519_sign(retptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v2 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v2;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Verifies an EdDSA signature against an Ed25519 public key.\n    *\n    * NOTE: this differs from {@link Document.verifyData} which uses JCS\n    * to canonicalize JSON messages.\n    * @param {Uint8Array} message\n    * @param {Uint8Array} signature\n    * @param {Uint8Array} publicKey\n    */\n    static verify(message, signature, publicKey) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passArray8ToWasm0(signature, wasm.__wbindgen_malloc);\n            const len1 = WASM_VECTOR_LEN;\n            const ptr2 = passArray8ToWasm0(publicKey, wasm.__wbindgen_malloc);\n            const len2 = WASM_VECTOR_LEN;\n            wasm.ed25519_verify(retptr, ptr0, len0, ptr1, len1, ptr2, len2);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nmodule.exports.Ed25519 = Ed25519;\n\nconst EncryptedDataFinalization = new FinalizationRegistry(ptr => wasm.__wbg_encrypteddata_free(ptr));\n/**\n* The structure returned after encrypting data\n*/\nclass EncryptedData {\n\n    static __wrap(ptr) {\n        const obj = Object.create(EncryptedData.prototype);\n        obj.ptr = ptr;\n        EncryptedDataFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    toJSON() {\n        return {\n        };\n    }\n\n    toString() {\n        return JSON.stringify(this);\n    }\n\n    [inspect.custom]() {\n        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        EncryptedDataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_encrypteddata_free(ptr);\n    }\n    /**\n    * Returns a copy of the nonce\n    * @returns {Uint8Array}\n    */\n    nonce() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.encrypteddata_nonce(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns a copy of the associated data\n    * @returns {Uint8Array}\n    */\n    associatedData() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.encrypteddata_associatedData(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns a copy of the ciphertext\n    * @returns {Uint8Array}\n    */\n    ciphertext() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.encrypteddata_ciphertext(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns a copy of the tag\n    * @returns {Uint8Array}\n    */\n    tag() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.encrypteddata_tag(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Serializes `EncryptedData` as a JSON object.\n    * @returns {any}\n    */\n    toJSON() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.encrypteddata_toJSON(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Deserializes `EncryptedData` from a JSON object.\n    * @param {any} json_value\n    * @returns {EncryptedData}\n    */\n    static fromJSON(json_value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.encrypteddata_fromJSON(retptr, addHeapObject(json_value));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return EncryptedData.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nmodule.exports.EncryptedData = EncryptedData;\n\nconst EncryptionAlgorithmFinalization = new FinalizationRegistry(ptr => wasm.__wbg_encryptionalgorithm_free(ptr));\n/**\n* Supported content encryption algorithms.\n*/\nclass EncryptionAlgorithm {\n\n    static __wrap(ptr) {\n        const obj = Object.create(EncryptionAlgorithm.prototype);\n        obj.ptr = ptr;\n        EncryptionAlgorithmFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    toJSON() {\n        return {\n        };\n    }\n\n    toString() {\n        return JSON.stringify(this);\n    }\n\n    [inspect.custom]() {\n        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        EncryptionAlgorithmFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_encryptionalgorithm_free(ptr);\n    }\n    /**\n    * AES GCM using 256-bit key.\n    * @returns {EncryptionAlgorithm}\n    */\n    static A256GCM() {\n        const ret = wasm.encryptionalgorithm_A256GCM();\n        return EncryptionAlgorithm.__wrap(ret);\n    }\n    /**\n    * Returns the length of the cipher's key.\n    * @returns {number}\n    */\n    keyLength() {\n        const ret = wasm.encryptionalgorithm_keyLength(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * Serializes `EncryptionAlgorithm` as a JSON object.\n    * @returns {any}\n    */\n    toJSON() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.encryptionalgorithm_toJSON(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Deserializes `EncryptionAlgorithm` from a JSON object.\n    * @param {any} json_value\n    * @returns {EncryptionAlgorithm}\n    */\n    static fromJSON(json_value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.encryptionalgorithm_fromJSON(retptr, addHeapObject(json_value));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return EncryptionAlgorithm.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nmodule.exports.EncryptionAlgorithm = EncryptionAlgorithm;\n\nconst ExplorerUrlFinalization = new FinalizationRegistry(ptr => wasm.__wbg_explorerurl_free(ptr));\n/**\n*/\nclass ExplorerUrl {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ExplorerUrl.prototype);\n        obj.ptr = ptr;\n        ExplorerUrlFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        ExplorerUrlFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_explorerurl_free(ptr);\n    }\n    /**\n    * Constructs a new Tangle explorer URL from a string.\n    *\n    * Use `ExplorerUrl::mainnet` or `ExplorerUrl::devnet` unless using a private Tangle\n    * or local explorer.\n    * @param {string} url\n    * @returns {ExplorerUrl}\n    */\n    static parse(url) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.explorerurl_parse(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ExplorerUrl.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the Tangle explorer URL for the mainnet.\n    * @returns {ExplorerUrl}\n    */\n    static mainnet() {\n        const ret = wasm.explorerurl_mainnet();\n        return ExplorerUrl.__wrap(ret);\n    }\n    /**\n    * Returns the Tangle explorer URL for the devnet.\n    * @returns {ExplorerUrl}\n    */\n    static devnet() {\n        const ret = wasm.explorerurl_devnet();\n        return ExplorerUrl.__wrap(ret);\n    }\n    /**\n    * Returns the web explorer URL of the given `message_id`.\n    *\n    * E.g. https://explorer.iota.org/mainnet/message/{message_id}\n    * @param {string} message_id\n    * @returns {string}\n    */\n    messageUrl(message_id) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(message_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.explorerurl_messageUrl(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0; len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n    * Returns the web identity resolver URL for the given DID.\n    *\n    * E.g. https://explorer.iota.org/mainnet/identity-resolver/{did}\n    * @param {DID | string} did\n    * @returns {string}\n    */\n    resolverUrl(did) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.explorerurl_resolverUrl(retptr, this.ptr, addHeapObject(did));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    toString() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.explorerurl_toString(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\nmodule.exports.ExplorerUrl = ExplorerUrl;\n\nconst IntegrationChainHistoryFinalization = new FinalizationRegistry(ptr => wasm.__wbg_integrationchainhistory_free(ptr));\n/**\n*/\nclass IntegrationChainHistory {\n\n    static __wrap(ptr) {\n        const obj = Object.create(IntegrationChainHistory.prototype);\n        obj.ptr = ptr;\n        IntegrationChainHistoryFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    toJSON() {\n        return {\n        };\n    }\n\n    toString() {\n        return JSON.stringify(this);\n    }\n\n    [inspect.custom]() {\n        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        IntegrationChainHistoryFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_integrationchainhistory_free(ptr);\n    }\n    /**\n    * Returns an `Array` of the integration chain `Documents`.\n    *\n    * NOTE: this clones the field.\n    * @returns {Array<ResolvedDocument>}\n    */\n    chainData() {\n        const ret = wasm.integrationchainhistory_chainData(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Returns an `Array` of `MessageIds` as strings.\n    *\n    * NOTE: this clones the field.\n    * @returns {Array<string>}\n    */\n    spam() {\n        const ret = wasm.integrationchainhistory_spam(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Serializes as a JSON object.\n    * @returns {any}\n    */\n    toJSON() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.integrationchainhistory_toJSON(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Deserializes from a JSON object.\n    * @param {any} json\n    * @returns {IntegrationChainHistory}\n    */\n    static fromJSON(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.integrationchainhistory_fromJSON(retptr, addBorrowedObject(json));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return IntegrationChainHistory.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n}\nmodule.exports.IntegrationChainHistory = IntegrationChainHistory;\n\nconst KeyLocationFinalization = new FinalizationRegistry(ptr => wasm.__wbg_keylocation_free(ptr));\n/**\n* The storage location of a verification method key.\n*\n* A key is uniquely identified by the fragment and a hash of its public key.\n* Importantly, the fragment alone is insufficient to represent the storage location.\n* For example, when rotating a key, there will be two keys in storage for the\n* same identity with the same fragment. The `key_hash` disambiguates the keys in\n* situations like these.\n*\n* The string representation of that location can be obtained via `canonicalRepr`.\n*/\nclass KeyLocation {\n\n    static __wrap(ptr) {\n        const obj = Object.create(KeyLocation.prototype);\n        obj.ptr = ptr;\n        KeyLocationFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    toJSON() {\n        return {\n        };\n    }\n\n    toString() {\n        return JSON.stringify(this);\n    }\n\n    [inspect.custom]() {\n        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        KeyLocationFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keylocation_free(ptr);\n    }\n    /**\n    * Create a location from a `KeyType`, the fragment of a verification method\n    * and the bytes of a public key.\n    * @param {number} keyType\n    * @param {string} fragment\n    * @param {Uint8Array} publicKey\n    */\n    constructor(keyType, fragment, publicKey) {\n        const ptr0 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(publicKey, wasm.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.keylocation_new(keyType, ptr0, len0, ptr1, len1);\n        return KeyLocation.__wrap(ret);\n    }\n    /**\n    * Obtain the location of a verification method's key in storage.\n    * @param {VerificationMethod} method\n    * @returns {KeyLocation}\n    */\n    static fromVerificationMethod(method) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(method, VerificationMethod);\n            wasm.keylocation_fromVerificationMethod(retptr, method.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return KeyLocation.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the canonical string representation of the location.\n    *\n    * This should be used as the representation for storage keys.\n    * @returns {string}\n    */\n    canonical() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.keylocation_canonical(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Returns a copy of the key type of the key location.\n    * @returns {number}\n    */\n    keyType() {\n        const ret = wasm.keylocation_keyType(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * Serializes `KeyLocation` as a JSON object.\n    * @returns {any}\n    */\n    toJSON() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.keylocation_toJSON(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Deserializes a JSON object into a `KeyLocation`.\n    * @param {any} json_value\n    * @returns {KeyLocation}\n    */\n    static fromJSON(json_value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.keylocation_fromJSON(retptr, addHeapObject(json_value));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return KeyLocation.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    toString() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.keylocation_toString(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\nmodule.exports.KeyLocation = KeyLocation;\n\nconst KeyPairFinalization = new FinalizationRegistry(ptr => wasm.__wbg_keypair_free(ptr));\n/**\n*/\nclass KeyPair {\n\n    static __wrap(ptr) {\n        const obj = Object.create(KeyPair.prototype);\n        obj.ptr = ptr;\n        KeyPairFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    toJSON() {\n        return {\n        };\n    }\n\n    toString() {\n        return JSON.stringify(this);\n    }\n\n    [inspect.custom]() {\n        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        KeyPairFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keypair_free(ptr);\n    }\n    /**\n    * Generates a new `KeyPair` object.\n    * @param {number} type_\n    */\n    constructor(type_) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.keypair_new(retptr, type_);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return KeyPair.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Parses a `KeyPair` object from the public/private keys.\n    * @param {number} type_\n    * @param {Uint8Array} public_key\n    * @param {Uint8Array} private_key\n    * @returns {KeyPair}\n    */\n    static fromKeys(type_, public_key, private_key) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(public_key, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passArray8ToWasm0(private_key, wasm.__wbindgen_malloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.keypair_fromKeys(retptr, type_, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return KeyPair.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Reconstructs a `KeyPair` from the bytes of a private key.\n    *\n    * The private key for `Ed25519` must be a 32-byte seed in compliance\n    * with [RFC 8032](https://datatracker.ietf.org/doc/html/rfc8032#section-3.2).\n    * Other implementations often use another format. See [this blog post](https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/) for further explanation.\n    * @param {number} keyType\n    * @param {Uint8Array} privateKeyBytes\n    * @returns {KeyPair}\n    */\n    static tryFromPrivateKeyBytes(keyType, privateKeyBytes) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(privateKeyBytes, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.keypair_tryFromPrivateKeyBytes(retptr, keyType, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return KeyPair.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the `KeyType` of the `KeyPair` object.\n    * @returns {number}\n    */\n    type() {\n        const ret = wasm.keypair_type(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * Returns a copy of the public key as a `Uint8Array`.\n    * @returns {Uint8Array}\n    */\n    public() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.keypair_public(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns a copy of the private key as a `Uint8Array`.\n    * @returns {Uint8Array}\n    */\n    private() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.keypair_private(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Serializes a `KeyPair` object as a JSON object.\n    * @returns {any}\n    */\n    toJSON() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.keypair_toJSON(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Deserializes a `KeyPair` object from a JSON object.\n    * @param {any} json\n    * @returns {KeyPair}\n    */\n    static fromJSON(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.keypair_fromJSON(retptr, addBorrowedObject(json));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return KeyPair.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Deep clones the object.\n    * @returns {KeyPair}\n    */\n    clone() {\n        const ret = wasm.keypair_clone(this.ptr);\n        return KeyPair.__wrap(ret);\n    }\n}\nmodule.exports.KeyPair = KeyPair;\n\nconst MethodContentFinalization = new FinalizationRegistry(ptr => wasm.__wbg_methodcontent_free(ptr));\n/**\n*/\nclass MethodContent {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MethodContent.prototype);\n        obj.ptr = ptr;\n        MethodContentFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    toJSON() {\n        return {\n        };\n    }\n\n    toString() {\n        return JSON.stringify(this);\n    }\n\n    [inspect.custom]() {\n        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        MethodContentFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_methodcontent_free(ptr);\n    }\n    /**\n    * Generate and store a new Ed25519 keypair for a new `Ed25519VerificationKey2018` method.\n    * @returns {MethodContent}\n    */\n    static GenerateEd25519() {\n        const ret = wasm.methodcontent_GenerateEd25519();\n        return MethodContent.__wrap(ret);\n    }\n    /**\n    * Store an existing Ed25519 private key and derive a public key from it for a new\n    * `Ed25519VerificationKey2018` method.\n    * @param {Uint8Array} privateKey\n    * @returns {MethodContent}\n    */\n    static PrivateEd25519(privateKey) {\n        const ptr0 = passArray8ToWasm0(privateKey, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.methodcontent_PrivateEd25519(ptr0, len0);\n        return MethodContent.__wrap(ret);\n    }\n    /**\n    * Insert an existing Ed25519 public key into a new `Ed25519VerificationKey2018` method,\n    * without generating or storing a private key.\n    *\n    * NOTE: the method will be unable to be used to sign anything without a private key.\n    * @param {Uint8Array} publicKey\n    * @returns {MethodContent}\n    */\n    static PublicEd25519(publicKey) {\n        const ptr0 = passArray8ToWasm0(publicKey, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.methodcontent_PublicEd25519(ptr0, len0);\n        return MethodContent.__wrap(ret);\n    }\n    /**\n    * Generate and store a new X25519 keypair for a new `X25519KeyAgreementKey2019` method.\n    * @returns {MethodContent}\n    */\n    static GenerateX25519() {\n        const ret = wasm.methodcontent_GenerateX25519();\n        return MethodContent.__wrap(ret);\n    }\n    /**\n    * Store an existing X25519 private key and derive a public key from it for a new\n    * `X25519KeyAgreementKey2019` method.\n    * @param {Uint8Array} privateKey\n    * @returns {MethodContent}\n    */\n    static PrivateX25519(privateKey) {\n        const ptr0 = passArray8ToWasm0(privateKey, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.methodcontent_PrivateX25519(ptr0, len0);\n        return MethodContent.__wrap(ret);\n    }\n    /**\n    * Insert an existing X25519 public key into a new `X25519KeyAgreementKey2019` method,\n    * without generating or storing a private key.\n    *\n    * NOTE: the method will be unable to be used for key exchange without a private key.\n    * @param {Uint8Array} publicKey\n    * @returns {MethodContent}\n    */\n    static PublicX25519(publicKey) {\n        const ptr0 = passArray8ToWasm0(publicKey, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.methodcontent_PublicX25519(ptr0, len0);\n        return MethodContent.__wrap(ret);\n    }\n    /**\n    * Serializes `MethodContent` as a JSON object.\n    * @returns {any}\n    */\n    toJSON() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.methodcontent_toJSON(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Deserializes `MethodContent` from a JSON object.\n    * @param {any} json_value\n    * @returns {MethodContent}\n    */\n    static fromJSON(json_value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.methodcontent_fromJSON(retptr, addHeapObject(json_value));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MethodContent.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nmodule.exports.MethodContent = MethodContent;\n\nconst MethodDataFinalization = new FinalizationRegistry(ptr => wasm.__wbg_methoddata_free(ptr));\n/**\n* Supported verification method data formats.\n*/\nclass MethodData {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MethodData.prototype);\n        obj.ptr = ptr;\n        MethodDataFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    toJSON() {\n        return {\n        };\n    }\n\n    toString() {\n        return JSON.stringify(this);\n    }\n\n    [inspect.custom]() {\n        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        MethodDataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_methoddata_free(ptr);\n    }\n    /**\n    * Creates a new `MethodData` variant with Base58-BTC encoded content.\n    * @param {Uint8Array} data\n    * @returns {MethodData}\n    */\n    static newBase58(data) {\n        const ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.methoddata_newBase58(ptr0, len0);\n        return MethodData.__wrap(ret);\n    }\n    /**\n    * Creates a new `MethodData` variant with Multibase-encoded content.\n    * @param {Uint8Array} data\n    * @returns {MethodData}\n    */\n    static newMultibase(data) {\n        const ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.methoddata_newMultibase(ptr0, len0);\n        return MethodData.__wrap(ret);\n    }\n    /**\n    * Returns a `Uint8Array` containing the decoded bytes of the `MethodData`.\n    *\n    * This is generally a public key identified by a `MethodData` value.\n    *\n    * ### Errors\n    * Decoding can fail if `MethodData` has invalid content or cannot be\n    * represented as a vector of bytes.\n    * @returns {Uint8Array}\n    */\n    tryDecode() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.methoddata_tryDecode(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Serializes a `MethodData` object as a JSON object.\n    * @returns {any}\n    */\n    toJSON() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.methoddata_toJSON(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Deserializes a `MethodData` object from a JSON object.\n    * @param {any} json\n    * @returns {MethodData}\n    */\n    static fromJSON(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.methoddata_fromJSON(retptr, addBorrowedObject(json));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MethodData.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Deep clones the object.\n    * @returns {MethodData}\n    */\n    clone() {\n        const ret = wasm.methoddata_clone(this.ptr);\n        return MethodData.__wrap(ret);\n    }\n}\nmodule.exports.MethodData = MethodData;\n\nconst MethodScopeFinalization = new FinalizationRegistry(ptr => wasm.__wbg_methodscope_free(ptr));\n/**\n* Supported verification method types.\n*/\nclass MethodScope {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MethodScope.prototype);\n        obj.ptr = ptr;\n        MethodScopeFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    toJSON() {\n        return {\n        };\n    }\n\n    toString() {\n        return JSON.stringify(this);\n    }\n\n    [inspect.custom]() {\n        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        MethodScopeFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_methodscope_free(ptr);\n    }\n    /**\n    * @returns {MethodScope}\n    */\n    static VerificationMethod() {\n        const ret = wasm.methodscope_VerificationMethod();\n        return MethodScope.__wrap(ret);\n    }\n    /**\n    * @returns {MethodScope}\n    */\n    static Authentication() {\n        const ret = wasm.methodscope_Authentication();\n        return MethodScope.__wrap(ret);\n    }\n    /**\n    * @returns {MethodScope}\n    */\n    static AssertionMethod() {\n        const ret = wasm.methodscope_AssertionMethod();\n        return MethodScope.__wrap(ret);\n    }\n    /**\n    * @returns {MethodScope}\n    */\n    static KeyAgreement() {\n        const ret = wasm.methodscope_KeyAgreement();\n        return MethodScope.__wrap(ret);\n    }\n    /**\n    * @returns {MethodScope}\n    */\n    static CapabilityDelegation() {\n        const ret = wasm.methodscope_CapabilityDelegation();\n        return MethodScope.__wrap(ret);\n    }\n    /**\n    * @returns {MethodScope}\n    */\n    static CapabilityInvocation() {\n        const ret = wasm.methodscope_CapabilityInvocation();\n        return MethodScope.__wrap(ret);\n    }\n    /**\n    * Returns the `MethodScope` as a string.\n    * @returns {string}\n    */\n    toString() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.methodscope_toString(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Serializes a `MethodScope` object as a JSON object.\n    * @returns {any}\n    */\n    toJSON() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.methodscope_toJSON(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Deserializes a `MethodScope` object from a JSON object.\n    * @param {any} json\n    * @returns {MethodScope}\n    */\n    static fromJSON(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.methodscope_fromJSON(retptr, addBorrowedObject(json));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MethodScope.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Deep clones the object.\n    * @returns {MethodScope}\n    */\n    clone() {\n        const ret = wasm.methodscope_clone(this.ptr);\n        return MethodScope.__wrap(ret);\n    }\n}\nmodule.exports.MethodScope = MethodScope;\n\nconst MethodTypeFinalization = new FinalizationRegistry(ptr => wasm.__wbg_methodtype_free(ptr));\n/**\n* Supported verification method types.\n*/\nclass MethodType {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MethodType.prototype);\n        obj.ptr = ptr;\n        MethodTypeFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    toJSON() {\n        return {\n        };\n    }\n\n    toString() {\n        return JSON.stringify(this);\n    }\n\n    [inspect.custom]() {\n        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        MethodTypeFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_methodtype_free(ptr);\n    }\n    /**\n    * @returns {MethodType}\n    */\n    static Ed25519VerificationKey2018() {\n        const ret = wasm.methodtype_Ed25519VerificationKey2018();\n        return MethodType.__wrap(ret);\n    }\n    /**\n    * @returns {MethodType}\n    */\n    static X25519KeyAgreementKey2019() {\n        const ret = wasm.methodtype_X25519KeyAgreementKey2019();\n        return MethodType.__wrap(ret);\n    }\n    /**\n    * Serializes a `MethodType` object as a JSON object.\n    * @returns {any}\n    */\n    toJSON() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.methodtype_toJSON(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Deserializes a `MethodType` object from a JSON object.\n    * @param {any} json\n    * @returns {MethodType}\n    */\n    static fromJSON(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.methodtype_fromJSON(retptr, addBorrowedObject(json));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MethodType.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Returns the `MethodType` as a string.\n    * @returns {string}\n    */\n    toString() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.methodtype_toString(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Deep clones the object.\n    * @returns {MethodType}\n    */\n    clone() {\n        const ret = wasm.methodtype_clone(this.ptr);\n        return MethodType.__wrap(ret);\n    }\n}\nmodule.exports.MethodType = MethodType;\n\nconst NetworkFinalization = new FinalizationRegistry(ptr => wasm.__wbg_network_free(ptr));\n/**\n*/\nclass Network {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Network.prototype);\n        obj.ptr = ptr;\n        NetworkFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        NetworkFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_network_free(ptr);\n    }\n    /**\n    * Parses the provided string to a `Network`.\n    *\n    * Errors if the name is invalid.\n    * @param {string} name\n    * @returns {Network}\n    */\n    static tryFromName(name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.network_tryFromName(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Network.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Network}\n    */\n    static mainnet() {\n        const ret = wasm.network_mainnet();\n        return Network.__wrap(ret);\n    }\n    /**\n    * @returns {Network}\n    */\n    static devnet() {\n        const ret = wasm.network_devnet();\n        return Network.__wrap(ret);\n    }\n    /**\n    * Returns a copy of the network name.\n    * @returns {string}\n    */\n    name() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.network_name(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Returns a copy of the node URL of the Tangle network.\n    * @returns {string | undefined}\n    */\n    defaultNodeURL() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.network_defaultNodeURL(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    toString() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.network_toString(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Serializes a `Network` as a JSON object.\n    * @returns {any}\n    */\n    toJSON() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.network_toJSON(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Deserializes a `Network` from a JSON object.\n    * @param {any} json\n    * @returns {Network}\n    */\n    static fromJSON(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.network_fromJSON(retptr, addBorrowedObject(json));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Network.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Deep clones the object.\n    * @returns {Network}\n    */\n    clone() {\n        const ret = wasm.network_clone(this.ptr);\n        return Network.__wrap(ret);\n    }\n}\nmodule.exports.Network = Network;\n\nconst PresentationFinalization = new FinalizationRegistry(ptr => wasm.__wbg_presentation_free(ptr));\n/**\n*/\nclass Presentation {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Presentation.prototype);\n        obj.ptr = ptr;\n        PresentationFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    toJSON() {\n        return {\n        };\n    }\n\n    toString() {\n        return JSON.stringify(this);\n    }\n\n    [inspect.custom]() {\n        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        PresentationFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_presentation_free(ptr);\n    }\n    /**\n    * Returns the base JSON-LD context.\n    * @returns {string}\n    */\n    static BaseContext() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.presentation_BaseContext(retptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * Returns the base type.\n    * @returns {string}\n    */\n    static BaseType() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.presentation_BaseType(retptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Constructs a new `Presentation`.\n    * @param {IPresentation} values\n    */\n    constructor(values) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.presentation_new(retptr, addHeapObject(values));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Presentation.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns a copy of the JSON-LD context(s) applicable to the `Presentation`.\n    * @returns {Array<string | Record<string, any>>}\n    */\n    context() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.presentation_context(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns a copy of the unique `URI` identifying the `Presentation`.\n    * @returns {string | undefined}\n    */\n    id() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.presentation_id(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns a copy of the URIs defining the type of the `Presentation`.\n    * @returns {Array<string>}\n    */\n    type() {\n        const ret = wasm.presentation_type(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Returns a copy of the {@link Credential}(s) expressing the claims of the `Presentation`.\n    * @returns {Array<Credential>}\n    */\n    verifiableCredential() {\n        const ret = wasm.presentation_verifiableCredential(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Returns a copy of the URI of the entity that generated the `Presentation`.\n    * @returns {string | undefined}\n    */\n    holder() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.presentation_holder(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns a copy of the service(s) used to refresh an expired {@link Credential} in the `Presentation`.\n    * @returns {Array<RefreshService>}\n    */\n    refreshService() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.presentation_refreshService(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns a copy of the terms-of-use specified by the `Presentation` holder\n    * @returns {Array<Policy>}\n    */\n    termsOfUse() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.presentation_termsOfUse(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns a copy of the proof used to verify the `Presentation`.\n    * @returns {Proof | undefined}\n    */\n    proof() {\n        const ret = wasm.presentation_proof(this.ptr);\n        return ret === 0 ? undefined : Proof.__wrap(ret);\n    }\n    /**\n    * Returns a copy of the miscellaneous properties on the `Presentation`.\n    * @returns {Map<string, any>}\n    */\n    properties() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.presentation_properties(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Serializes a `Presentation` as a JSON object.\n    * @returns {any}\n    */\n    toJSON() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.presentation_toJSON(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Deserializes a `Presentation` from a JSON object.\n    * @param {any} json\n    * @returns {Presentation}\n    */\n    static fromJSON(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.presentation_fromJSON(retptr, addBorrowedObject(json));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Presentation.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Deep clones the object.\n    * @returns {Presentation}\n    */\n    clone() {\n        const ret = wasm.presentation_clone(this.ptr);\n        return Presentation.__wrap(ret);\n    }\n}\nmodule.exports.Presentation = Presentation;\n\nconst PresentationValidationOptionsFinalization = new FinalizationRegistry(ptr => wasm.__wbg_presentationvalidationoptions_free(ptr));\n/**\n* Options to declare validation criteria when validating presentation.\n*/\nclass PresentationValidationOptions {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PresentationValidationOptions.prototype);\n        obj.ptr = ptr;\n        PresentationValidationOptionsFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        PresentationValidationOptionsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_presentationvalidationoptions_free(ptr);\n    }\n    /**\n    * Creates a new `PresentationValidationOptions` from the given fields.\n    *\n    * Throws an error if any of the options are invalid.\n    * @param {IPresentationValidationOptions} options\n    */\n    constructor(options) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.presentationvalidationoptions_new(retptr, addHeapObject(options));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PresentationValidationOptions.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Creates a new `PresentationValidationOptions` with defaults.\n    * @returns {PresentationValidationOptions}\n    */\n    static default() {\n        const ret = wasm.presentationvalidationoptions_default();\n        return PresentationValidationOptions.__wrap(ret);\n    }\n    /**\n    * Serializes a `PresentationValidationOptions` as a JSON object.\n    * @returns {any}\n    */\n    toJSON() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.presentationvalidationoptions_toJSON(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Deserializes a `PresentationValidationOptions` from a JSON object.\n    * @param {any} json\n    * @returns {PresentationValidationOptions}\n    */\n    static fromJSON(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.presentationvalidationoptions_fromJSON(retptr, addBorrowedObject(json));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PresentationValidationOptions.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Deep clones the object.\n    * @returns {PresentationValidationOptions}\n    */\n    clone() {\n        const ret = wasm.presentationvalidationoptions_clone(this.ptr);\n        return PresentationValidationOptions.__wrap(ret);\n    }\n}\nmodule.exports.PresentationValidationOptions = PresentationValidationOptions;\n\nconst PresentationValidatorFinalization = new FinalizationRegistry(ptr => wasm.__wbg_presentationvalidator_free(ptr));\n/**\n*/\nclass PresentationValidator {\n\n    toJSON() {\n        return {\n        };\n    }\n\n    toString() {\n        return JSON.stringify(this);\n    }\n\n    [inspect.custom]() {\n        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        PresentationValidatorFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_presentationvalidator_free(ptr);\n    }\n    /**\n    * Validate a `Presentation`.\n    *\n    * The following properties are validated according to `options`:\n    * - the semantic structure of the presentation,\n    * - the holder's signature,\n    * - the relationship between the holder and the credential subjects,\n    * - the signatures and some properties of the constituent credentials (see\n    * `CredentialValidator::validate`).\n    *\n    * ### Warning\n    * The lack of an error returned from this method is in of itself not enough to conclude that the presentation can be\n    * trusted. This section contains more information on additional checks that should be carried out before and after\n    * calling this method.\n    *\n    * #### The state of the supplied DID Documents.\n    * The caller must ensure that the DID Documents in `holder` and `issuers` are up-to-date. The convenience methods\n    * `Resolver::resolve_presentation_holder` and `Resolver::resolve_presentation_issuers`\n    * can help extract the latest available states of these DID Documents.\n    *\n    * #### Properties that are not validated\n    *  There are many properties defined in [The Verifiable Credentials Data Model](https://www.w3.org/TR/vc-data-model/) that are **not** validated, such as:\n    * `credentialStatus`, `type`, `credentialSchema`, `refreshService`, **and more**.\n    * These should be manually checked after validation, according to your requirements.\n    *\n    * ### Errors\n    * An error is returned whenever a validated condition is not satisfied.\n    * @param {Presentation} presentation\n    * @param {Document | ResolvedDocument} holder\n    * @param {Array<Document> | Array<ResolvedDocument>} issuers\n    * @param {PresentationValidationOptions} options\n    * @param {number} fail_fast\n    */\n    static validate(presentation, holder, issuers, options, fail_fast) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(presentation, Presentation);\n            _assertClass(options, PresentationValidationOptions);\n            wasm.presentationvalidator_validate(retptr, presentation.ptr, addBorrowedObject(holder), addBorrowedObject(issuers), options.ptr, fail_fast);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Verify the presentation's signature using the resolved document of the holder.\n    *\n    * ### Warning\n    * The caller must ensure that the DID Document of the holder is up-to-date.\n    *\n    * ### Errors\n    * Fails if the `holder` does not match the `presentation`'s holder property.\n    * Fails if signature verification against the holder document fails.\n    * @param {Presentation} presentation\n    * @param {Document | ResolvedDocument} holder\n    * @param {VerifierOptions} options\n    */\n    static verifyPresentationSignature(presentation, holder, options) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(presentation, Presentation);\n            _assertClass(options, VerifierOptions);\n            wasm.presentationvalidator_verifyPresentationSignature(retptr, presentation.ptr, addBorrowedObject(holder), options.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Validates the semantic structure of the `Presentation`.\n    * @param {Presentation} presentation\n    */\n    static checkStructure(presentation) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(presentation, Presentation);\n            wasm.presentationvalidator_checkStructure(retptr, presentation.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nmodule.exports.PresentationValidator = PresentationValidator;\n\nconst ProofFinalization = new FinalizationRegistry(ptr => wasm.__wbg_proof_free(ptr));\n/**\n* A digital signature.\n*\n* For field definitions see: https://w3c-ccg.github.io/security-vocab/\n*/\nclass Proof {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Proof.prototype);\n        obj.ptr = ptr;\n        ProofFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    toJSON() {\n        return {\n        };\n    }\n\n    toString() {\n        return JSON.stringify(this);\n    }\n\n    [inspect.custom]() {\n        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        ProofFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_proof_free(ptr);\n    }\n    /**\n    * Returns a copy of the proof type.\n    * @returns {string}\n    */\n    type() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.proof_type(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Returns a copy of the proof value string.\n    * @returns {string}\n    */\n    value() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.proof_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Returns a copy of the identifier of the DID method used to create this proof.\n    * @returns {string}\n    */\n    verificationMethod() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.proof_verificationMethod(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * When the proof was generated.\n    * @returns {Timestamp | undefined}\n    */\n    created() {\n        const ret = wasm.proof_created(this.ptr);\n        return ret === 0 ? undefined : Timestamp.__wrap(ret);\n    }\n    /**\n    * When the proof expires.\n    * @returns {Timestamp | undefined}\n    */\n    expires() {\n        const ret = wasm.proof_expires(this.ptr);\n        return ret === 0 ? undefined : Timestamp.__wrap(ret);\n    }\n    /**\n    * Challenge from a proof requester to mitigate replay attacks.\n    * @returns {string | undefined}\n    */\n    challenge() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.proof_challenge(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Domain for which a proof is valid to mitigate replay attacks.\n    * @returns {string | undefined}\n    */\n    domain() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.proof_domain(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Purpose for which the proof was generated.\n    * @returns {ProofPurpose | undefined}\n    */\n    purpose() {\n        const ret = wasm.proof_purpose(this.ptr);\n        return ret === 0 ? undefined : ProofPurpose.__wrap(ret);\n    }\n    /**\n    * Serializes a `Proof` to a JSON object.\n    * @returns {any}\n    */\n    toJSON() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.proof_toJSON(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Deserializes a `Proof` from a JSON object.\n    * @param {any} json\n    * @returns {Proof}\n    */\n    static fromJSON(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.proof_fromJSON(retptr, addBorrowedObject(json));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Proof.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Deep clones the object.\n    * @returns {Proof}\n    */\n    clone() {\n        const ret = wasm.proof_clone(this.ptr);\n        return Proof.__wrap(ret);\n    }\n}\nmodule.exports.Proof = Proof;\n\nconst ProofOptionsFinalization = new FinalizationRegistry(ptr => wasm.__wbg_proofoptions_free(ptr));\n/**\n* Holds additional options for creating signatures.\n* See `IProofOptions`.\n*/\nclass ProofOptions {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ProofOptions.prototype);\n        obj.ptr = ptr;\n        ProofOptionsFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        ProofOptionsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_proofoptions_free(ptr);\n    }\n    /**\n    * Creates a new `ProofOptions` from the given fields.\n    *\n    * Throws an error if any of the options are invalid.\n    * @param {IProofOptions} options\n    */\n    constructor(options) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.proofoptions_new(retptr, addHeapObject(options));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProofOptions.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Creates a new `ProofOptions` with default options.\n    * @returns {ProofOptions}\n    */\n    static default() {\n        const ret = wasm.proofoptions_default();\n        return ProofOptions.__wrap(ret);\n    }\n    /**\n    * Deep clones the object.\n    * @returns {ProofOptions}\n    */\n    clone() {\n        const ret = wasm.proofoptions_clone(this.ptr);\n        return ProofOptions.__wrap(ret);\n    }\n}\nmodule.exports.ProofOptions = ProofOptions;\n\nconst ProofPurposeFinalization = new FinalizationRegistry(ptr => wasm.__wbg_proofpurpose_free(ptr));\n/**\n* Associates a purpose with a {@link Proof}.\n*\n* See https://w3c-ccg.github.io/security-vocab/#proofPurpose\n*/\nclass ProofPurpose {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ProofPurpose.prototype);\n        obj.ptr = ptr;\n        ProofPurposeFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    toJSON() {\n        return {\n        };\n    }\n\n    toString() {\n        return JSON.stringify(this);\n    }\n\n    [inspect.custom]() {\n        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        ProofPurposeFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_proofpurpose_free(ptr);\n    }\n    /**\n    * Purpose is to assert a claim.\n    * See https://www.w3.org/TR/did-core/#assertion\n    * @returns {ProofPurpose}\n    */\n    static assertionMethod() {\n        const ret = wasm.proofpurpose_assertionMethod();\n        return ProofPurpose.__wrap(ret);\n    }\n    /**\n    * Purpose is to authenticate the signer.\n    * See https://www.w3.org/TR/did-core/#authentication\n    * @returns {ProofPurpose}\n    */\n    static authentication() {\n        const ret = wasm.proofpurpose_authentication();\n        return ProofPurpose.__wrap(ret);\n    }\n    /**\n    * Serializes a `ProofPurpose` to a JSON object.\n    * @returns {any}\n    */\n    toJSON() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.proofpurpose_toJSON(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Deserializes a `ProofPurpose` from a JSON object.\n    * @param {any} json\n    * @returns {ProofPurpose}\n    */\n    static fromJSON(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.proofpurpose_fromJSON(retptr, addBorrowedObject(json));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProofPurpose.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Deep clones the object.\n    * @returns {ProofPurpose}\n    */\n    clone() {\n        const ret = wasm.proofpurpose_clone(this.ptr);\n        return ProofPurpose.__wrap(ret);\n    }\n}\nmodule.exports.ProofPurpose = ProofPurpose;\n\nconst ReceiptFinalization = new FinalizationRegistry(ptr => wasm.__wbg_receipt_free(ptr));\n/**\n*/\nclass Receipt {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Receipt.prototype);\n        obj.ptr = ptr;\n        ReceiptFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    toJSON() {\n        return {\n        };\n    }\n\n    toString() {\n        return JSON.stringify(this);\n    }\n\n    [inspect.custom]() {\n        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        ReceiptFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_receipt_free(ptr);\n    }\n    /**\n    * Returns a copy of the associated IOTA Tangle `Network`.\n    * @returns {Network}\n    */\n    network() {\n        const ret = wasm.receipt_network(this.ptr);\n        return Network.__wrap(ret);\n    }\n    /**\n    * Returns a copy of the message `id`.\n    * @returns {string}\n    */\n    messageId() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.receipt_messageId(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Returns a copy of the message `network_id`.\n    * @returns {string}\n    */\n    networkId() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.receipt_networkId(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Returns a copy of the message `nonce`.\n    * @returns {string}\n    */\n    nonce() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.receipt_nonce(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Serializes a `Receipt` as a JSON object.\n    * @returns {any}\n    */\n    toJSON() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.receipt_toJSON(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Deserializes a `Receipt` from a JSON object.\n    * @param {any} json\n    * @returns {Receipt}\n    */\n    static fromJSON(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.receipt_fromJSON(retptr, addBorrowedObject(json));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Receipt.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Deep clones the object.\n    * @returns {Receipt}\n    */\n    clone() {\n        const ret = wasm.receipt_clone(this.ptr);\n        return Receipt.__wrap(ret);\n    }\n}\nmodule.exports.Receipt = Receipt;\n\nconst ResolvedDocumentFinalization = new FinalizationRegistry(ptr => wasm.__wbg_resolveddocument_free(ptr));\n/**\n* An IOTA DID document resolved from the Tangle. Represents an integration chain message possibly\n* merged with one or more `DiffMessages`.\n*/\nclass ResolvedDocument {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ResolvedDocument.prototype);\n        obj.ptr = ptr;\n        ResolvedDocumentFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    toJSON() {\n        return {\n        };\n    }\n\n    toString() {\n        return JSON.stringify(this);\n    }\n\n    [inspect.custom]() {\n        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        ResolvedDocumentFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_resolveddocument_free(ptr);\n    }\n    /**\n    * Attempts to merge changes from a `DiffMessage` into this document and\n    * updates the `ResolvedDocument::diffMessageId`.\n    *\n    * If merging fails the document remains unmodified, otherwise this represents\n    * the merged document state.\n    *\n    * See `Document::mergeDiff`.\n    *\n    * # Errors\n    *\n    * Fails if the merge operation or signature verification on the diff fails.\n    *\n    * @deprecated since 0.5.0, diff chain features are slated for removal.\n    * @param {DiffMessage} diff_message\n    */\n    mergeDiffMessage(diff_message) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(diff_message, DiffMessage);\n            wasm.resolveddocument_mergeDiffMessage(retptr, this.ptr, diff_message.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns a copy of the inner DID document.\n    *\n    * NOTE: If the `ResolvedDocument` is no longer needed after calling this method\n    * then consider using `intoDocument()` for efficiency.\n    * @returns {Document}\n    */\n    document() {\n        const ret = wasm.resolveddocument_document(this.ptr);\n        return Document.__wrap(ret);\n    }\n    /**\n    * Consumes this object and returns the inner DID document.\n    *\n    * NOTE: trying to use the `ResolvedDocument` after calling this will throw an error.\n    * @returns {Document}\n    */\n    intoDocument() {\n        const ptr = this.__destroy_into_raw();\n        const ret = wasm.resolveddocument_intoDocument(ptr);\n        return Document.__wrap(ret);\n    }\n    /**\n    * Returns a copy of the diff chain message id.\n    *\n    * @deprecated since 0.5.0, diff chain features are slated for removal.\n    * @returns {string}\n    */\n    diffMessageId() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.resolveddocument_diffMessageId(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Sets the diff chain message id.\n    *\n    * @deprecated since 0.5.0, diff chain features are slated for removal.\n    * @param {string} value\n    */\n    setDiffMessageId(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.resolveddocument_setDiffMessageId(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns a copy of the integration chain message id.\n    * @returns {string}\n    */\n    integrationMessageId() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.resolveddocument_integrationMessageId(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Sets the integration chain message id.\n    * @param {string} value\n    */\n    setIntegrationMessageId(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.resolveddocument_setIntegrationMessageId(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Serializes a `Document` object as a JSON object.\n    * @returns {any}\n    */\n    toJSON() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.resolveddocument_toJSON(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Deserializes a `Document` object from a JSON object.\n    * @param {any} json\n    * @returns {ResolvedDocument}\n    */\n    static fromJSON(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.resolveddocument_fromJSON(retptr, addBorrowedObject(json));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ResolvedDocument.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Deep clones the object.\n    * @returns {ResolvedDocument}\n    */\n    clone() {\n        const ret = wasm.resolveddocument_clone(this.ptr);\n        return ResolvedDocument.__wrap(ret);\n    }\n}\nmodule.exports.ResolvedDocument = ResolvedDocument;\n\nconst ResolverFinalization = new FinalizationRegistry(ptr => wasm.__wbg_resolver_free(ptr));\n/**\n*/\nclass Resolver {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Resolver.prototype);\n        obj.ptr = ptr;\n        ResolverFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        ResolverFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_resolver_free(ptr);\n    }\n    /**\n    * Constructs a new `Resolver` with a default `Client` for\n    * the `Mainnet`.\n    */\n    constructor() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.resolver_new(retptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Resolver.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns a {@link ResolverBuilder} to construct a new `Resolver`.\n    * @returns {ResolverBuilder}\n    */\n    static builder() {\n        const ret = wasm.resolver_builder();\n        return ResolverBuilder.__wrap(ret);\n    }\n    /**\n    * Returns the `Client` corresponding to the given network name if one exists.\n    * @param {string} network_name\n    * @returns {Client | undefined}\n    */\n    getClient(network_name) {\n        const ptr0 = passStringToWasm0(network_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.resolver_getClient(this.ptr, ptr0, len0);\n        return ret === 0 ? undefined : Client.__wrap(ret);\n    }\n    /**\n    * Fetches the `Document` of the given `DID`.\n    * @param {DID | string} did\n    * @returns {Promise<ResolvedDocument>}\n    */\n    resolve(did) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.resolver_resolve(retptr, this.ptr, addHeapObject(did));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Fetches the `DocumentHistory` of the given `DID`.\n    * @param {DID | string} did\n    * @returns {Promise<DocumentHistory>}\n    */\n    resolveHistory(did) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.resolver_resolveHistory(retptr, this.ptr, addHeapObject(did));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the `DiffChainHistory` of a diff chain starting from a `Document` on the\n    * integration chain.\n    *\n    * NOTE: the document must have been published to the Tangle and have a valid message id.\n    *\n    * @deprecated since 0.5.0, diff chain features are slated for removal.\n    * @param {ResolvedDocument} document\n    * @returns {Promise<DiffChainHistory>}\n    */\n    resolveDiffHistory(document) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(document, ResolvedDocument);\n            wasm.resolver_resolveDiffHistory(retptr, this.ptr, document.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Fetches the DID Document of the issuer on a `Credential`.\n    *\n    * ### Errors\n    *\n    * Errors if the issuer URL is not a valid `DID` or document resolution fails.\n    * @param {Credential} credential\n    * @returns {Promise<ResolvedDocument>}\n    */\n    resolveCredentialIssuer(credential) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(credential, Credential);\n            wasm.resolver_resolveCredentialIssuer(retptr, this.ptr, credential.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Fetches all DID Documents of `Credential` issuers contained in a `Presentation`.\n    * Issuer documents are returned in arbitrary order.\n    *\n    * ### Errors\n    *\n    * Errors if any issuer URL is not a valid `DID` or document resolution fails.\n    * @param {Presentation} presentation\n    * @returns {Promise<Array<ResolvedDocument>>}\n    */\n    resolvePresentationIssuers(presentation) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(presentation, Presentation);\n            wasm.resolver_resolvePresentationIssuers(retptr, this.ptr, presentation.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Fetches the DID Document of the holder of a `Presentation`.\n    *\n    * ### Errors\n    *\n    * Errors if the holder URL is missing, is not a valid `DID`, or document resolution fails.\n    * @param {Presentation} presentation\n    * @returns {Promise<ResolvedDocument>}\n    */\n    resolvePresentationHolder(presentation) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(presentation, Presentation);\n            wasm.resolver_resolvePresentationHolder(retptr, this.ptr, presentation.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Verifies a `Presentation`.\n    *\n    * ### Important\n    * See `PresentationValidator::validate` for information about which properties get\n    * validated and what is expected of the optional arguments `holder` and `issuer`.\n    *\n    * ### Resolution\n    * The DID Documents for the `holder` and `issuers` are optionally resolved if not given.\n    * If you already have up-to-date versions of these DID Documents, you may want\n    * to use `PresentationValidator::validate`.\n    * See also `Resolver::resolvePresentationIssuers` and `Resolver::resolvePresentationHolder`.\n    *\n    * ### Errors\n    * Errors from resolving the holder and issuer DID Documents, if not provided, will be returned immediately.\n    * Otherwise, errors from validating the presentation and its credentials will be returned\n    * according to the `fail_fast` parameter.\n    * @param {Presentation} presentation\n    * @param {PresentationValidationOptions} options\n    * @param {number} fail_fast\n    * @param {ResolvedDocument | undefined} holder\n    * @param {Array<ResolvedDocument> | undefined} issuers\n    * @returns {Promise<void>}\n    */\n    verifyPresentation(presentation, options, fail_fast, holder, issuers) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(presentation, Presentation);\n            _assertClass(options, PresentationValidationOptions);\n            wasm.resolver_verifyPresentation(retptr, this.ptr, presentation.ptr, options.ptr, fail_fast, isLikeNone(holder) ? 0 : addHeapObject(holder), isLikeNone(issuers) ? 0 : addHeapObject(issuers));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nmodule.exports.Resolver = Resolver;\n\nconst ResolverBuilderFinalization = new FinalizationRegistry(ptr => wasm.__wbg_resolverbuilder_free(ptr));\n/**\n* Builder for configuring [`Clients`][Client] when constructing a [`Resolver`].\n*/\nclass ResolverBuilder {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ResolverBuilder.prototype);\n        obj.ptr = ptr;\n        ResolverBuilderFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        ResolverBuilderFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_resolverbuilder_free(ptr);\n    }\n    /**\n    * Constructs a new `ResolverBuilder` with no `Clients` configured.\n    */\n    constructor() {\n        const ret = wasm.resolverbuilder_new();\n        return ResolverBuilder.__wrap(ret);\n    }\n    /**\n    * Inserts a `Client`.\n    *\n    * NOTE: replaces any previous `Client` or `Config` with the same network name.\n    * @param {Client} client\n    * @returns {ResolverBuilder}\n    */\n    client(client) {\n        const ptr = this.__destroy_into_raw();\n        _assertClass(client, Client);\n        const ret = wasm.resolverbuilder_client(ptr, client.ptr);\n        return ResolverBuilder.__wrap(ret);\n    }\n    /**\n    * Inserts a `Config` used to create a `Client`.\n    *\n    * NOTE: replaces any previous `Client` or `Config` with the same network name.\n    * @param {IClientConfig} config\n    * @returns {ResolverBuilder}\n    */\n    clientConfig(config) {\n        try {\n            const ptr = this.__destroy_into_raw();\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.resolverbuilder_clientConfig(retptr, ptr, addHeapObject(config));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ResolverBuilder.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Constructs a new [`Resolver`] based on the builder configuration.\n    * @returns {Promise<Resolver>}\n    */\n    build() {\n        const ptr = this.__destroy_into_raw();\n        const ret = wasm.resolverbuilder_build(ptr);\n        return takeObject(ret);\n    }\n}\nmodule.exports.ResolverBuilder = ResolverBuilder;\n\nconst RevocationBitmapFinalization = new FinalizationRegistry(ptr => wasm.__wbg_revocationbitmap_free(ptr));\n/**\n* A compressed bitmap for managing credential revocation.\n*/\nclass RevocationBitmap {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RevocationBitmap.prototype);\n        obj.ptr = ptr;\n        RevocationBitmapFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    toJSON() {\n        return {\n        };\n    }\n\n    toString() {\n        return JSON.stringify(this);\n    }\n\n    [inspect.custom]() {\n        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        RevocationBitmapFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_revocationbitmap_free(ptr);\n    }\n    /**\n    * Creates a new `RevocationBitmap` instance.\n    */\n    constructor() {\n        const ret = wasm.revocationbitmap_new();\n        return RevocationBitmap.__wrap(ret);\n    }\n    /**\n    * The name of the service type.\n    * @returns {string}\n    */\n    static type() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.revocationbitmap_type(retptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Returns `true` if the credential at the given `index` is revoked.\n    * @param {number} index\n    * @returns {boolean}\n    */\n    isRevoked(index) {\n        const ret = wasm.revocationbitmap_isRevoked(this.ptr, index);\n        return ret !== 0;\n    }\n    /**\n    * Mark the given index as revoked.\n    *\n    * Returns true if the index was absent from the set.\n    * @param {number} index\n    * @returns {boolean}\n    */\n    revoke(index) {\n        const ret = wasm.revocationbitmap_revoke(this.ptr, index);\n        return ret !== 0;\n    }\n    /**\n    * Mark the index as not revoked.\n    *\n    * Returns true if the index was present in the set.\n    * @param {number} index\n    * @returns {boolean}\n    */\n    unrevoke(index) {\n        const ret = wasm.revocationbitmap_unrevoke(this.ptr, index);\n        return ret !== 0;\n    }\n    /**\n    * Returns the number of revoked credentials.\n    * @returns {number}\n    */\n    len() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.revocationbitmap_len(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 >>> 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return the bitmap as a data url embedded in a service endpoint.\n    * @returns {string | string[] | Map<string, string[]>}\n    */\n    toEndpoint() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.revocationbitmap_toEndpoint(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Construct a `RevocationBitmap` from a data `url`.\n    * @param {string | string[] | Map<string, string[]>} endpoint\n    * @returns {RevocationBitmap}\n    */\n    static fromEndpoint(endpoint) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.revocationbitmap_fromEndpoint(retptr, addHeapObject(endpoint));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RevocationBitmap.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nmodule.exports.RevocationBitmap = RevocationBitmap;\n\nconst ServiceFinalization = new FinalizationRegistry(ptr => wasm.__wbg_service_free(ptr));\n/**\n* A DID Document Service used to enable trusted interactions associated\n* with a DID subject.\n*\n* See: https://www.w3.org/TR/did-core/#services\n*/\nclass Service {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Service.prototype);\n        obj.ptr = ptr;\n        ServiceFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    toJSON() {\n        return {\n        };\n    }\n\n    toString() {\n        return JSON.stringify(this);\n    }\n\n    [inspect.custom]() {\n        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        ServiceFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_service_free(ptr);\n    }\n    /**\n    * @param {IService} service\n    */\n    constructor(service) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.service_new(retptr, addHeapObject(service));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Service.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns a copy of the `Service` id.\n    * @returns {DIDUrl}\n    */\n    id() {\n        const ret = wasm.service_id(this.ptr);\n        return DIDUrl.__wrap(ret);\n    }\n    /**\n    * Returns a copy of the `Service` type.\n    * @returns {string}\n    */\n    type() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.service_type(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Returns a copy of the `Service` endpoint.\n    * @returns {string | string[] | Map<string, string[]>}\n    */\n    serviceEndpoint() {\n        const ret = wasm.service_serviceEndpoint(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Returns a copy of the custom properties on the `Service`.\n    * @returns {Map<string, any>}\n    */\n    properties() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.service_properties(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Serializes a `Service` object as a JSON object.\n    * @returns {any}\n    */\n    toJSON() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.service_toJSON(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Deserializes a `Service` object from a JSON object.\n    * @param {any} value\n    * @returns {Service}\n    */\n    static fromJSON(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.service_fromJSON(retptr, addBorrowedObject(value));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Service.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Deep clones the object.\n    * @returns {Service}\n    */\n    clone() {\n        const ret = wasm.service_clone(this.ptr);\n        return Service.__wrap(ret);\n    }\n}\nmodule.exports.Service = Service;\n\nconst SignatureFinalization = new FinalizationRegistry(ptr => wasm.__wbg_signature_free(ptr));\n/**\n*/\nclass Signature {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Signature.prototype);\n        obj.ptr = ptr;\n        SignatureFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    toJSON() {\n        return {\n        };\n    }\n\n    toString() {\n        return JSON.stringify(this);\n    }\n\n    [inspect.custom]() {\n        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        SignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signature_free(ptr);\n    }\n    /**\n    * Creates a new `Signature`.\n    * @param {Uint8Array} data\n    */\n    constructor(data) {\n        const ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.signature_new(ptr0, len0);\n        return Signature.__wrap(ret);\n    }\n    /**\n    * Returns a copy of the signature as a `UInt8Array`.\n    * @returns {Uint8Array}\n    */\n    asBytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signature_asBytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Serializes a `Signature` as a JSON object.\n    * @returns {any}\n    */\n    toJSON() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signature_toJSON(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Deserializes a JSON object as `Signature`.\n    * @param {any} json_value\n    * @returns {Signature}\n    */\n    static fromJSON(json_value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signature_fromJSON(retptr, addHeapObject(json_value));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Signature.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nmodule.exports.Signature = Signature;\n\nconst StorageTestSuiteFinalization = new FinalizationRegistry(ptr => wasm.__wbg_storagetestsuite_free(ptr));\n/**\n* A test suite for the `Storage` interface.\n*\n* This module contains a set of tests that a correct storage implementation\n* should pass. Note that not every edge case is tested.\n*\n* Tests usually rely on multiple interface methods being implemented, so they should only\n* be run on a fully implemented version. That's why there is not a single test case for every\n* interface method.\n*/\nclass StorageTestSuite {\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        StorageTestSuiteFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_storagetestsuite_free(ptr);\n    }\n    /**\n    * @param {Storage} storage\n    * @returns {Promise<void>}\n    */\n    static didCreateGenerateKeyTest(storage) {\n        const ret = wasm.storagetestsuite_didCreateGenerateKeyTest(addHeapObject(storage));\n        return takeObject(ret);\n    }\n    /**\n    * @param {Storage} storage\n    * @returns {Promise<void>}\n    */\n    static didCreatePrivateKeyTest(storage) {\n        const ret = wasm.storagetestsuite_didCreatePrivateKeyTest(addHeapObject(storage));\n        return takeObject(ret);\n    }\n    /**\n    * @param {Storage} storage\n    * @returns {Promise<void>}\n    */\n    static didListTest(storage) {\n        const ret = wasm.storagetestsuite_didListTest(addHeapObject(storage));\n        return takeObject(ret);\n    }\n    /**\n    * @param {Storage} storage\n    * @returns {Promise<void>}\n    */\n    static didPurgeTest(storage) {\n        const ret = wasm.storagetestsuite_didPurgeTest(addHeapObject(storage));\n        return takeObject(ret);\n    }\n    /**\n    * @param {Storage} storage\n    * @returns {Promise<void>}\n    */\n    static keyGenerateTest(storage) {\n        const ret = wasm.storagetestsuite_keyGenerateTest(addHeapObject(storage));\n        return takeObject(ret);\n    }\n    /**\n    * @param {Storage} storage\n    * @returns {Promise<void>}\n    */\n    static keyDeleteTest(storage) {\n        const ret = wasm.storagetestsuite_keyDeleteTest(addHeapObject(storage));\n        return takeObject(ret);\n    }\n    /**\n    * @param {Storage} storage\n    * @returns {Promise<void>}\n    */\n    static keyInsertTest(storage) {\n        const ret = wasm.storagetestsuite_keyInsertTest(addHeapObject(storage));\n        return takeObject(ret);\n    }\n    /**\n    * @param {Storage} storage\n    * @returns {Promise<void>}\n    */\n    static keySignEd25519Test(storage) {\n        const ret = wasm.storagetestsuite_keySignEd25519Test(addHeapObject(storage));\n        return takeObject(ret);\n    }\n    /**\n    * @param {Storage} alice_storage\n    * @param {Storage} bob_storage\n    * @returns {Promise<void>}\n    */\n    static encryptionTest(alice_storage, bob_storage) {\n        const ret = wasm.storagetestsuite_encryptionTest(addHeapObject(alice_storage), addHeapObject(bob_storage));\n        return takeObject(ret);\n    }\n}\nmodule.exports.StorageTestSuite = StorageTestSuite;\n\nconst TimestampFinalization = new FinalizationRegistry(ptr => wasm.__wbg_timestamp_free(ptr));\n/**\n*/\nclass Timestamp {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Timestamp.prototype);\n        obj.ptr = ptr;\n        TimestampFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    toJSON() {\n        return {\n        };\n    }\n\n    toString() {\n        return JSON.stringify(this);\n    }\n\n    [inspect.custom]() {\n        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        TimestampFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_timestamp_free(ptr);\n    }\n    /**\n    * Parses a `Timestamp` from the provided input string.\n    * @param {string} input\n    * @returns {Timestamp}\n    */\n    static parse(input) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(input, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.timestamp_parse(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Timestamp.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Creates a new `Timestamp` with the current date and time.\n    * @returns {Timestamp}\n    */\n    static nowUTC() {\n        const ret = wasm.timestamp_nowUTC();\n        return Timestamp.__wrap(ret);\n    }\n    /**\n    * Returns the `Timestamp` as an RFC 3339 `String`.\n    * @returns {string}\n    */\n    toRFC3339() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.timestamp_toRFC3339(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Computes `self + duration`\n    *\n    * Returns `null` if the operation leads to a timestamp not in the valid range for [RFC 3339](https://tools.ietf.org/html/rfc3339).\n    * @param {Duration} duration\n    * @returns {Timestamp | undefined}\n    */\n    checkedAdd(duration) {\n        _assertClass(duration, Duration);\n        const ret = wasm.timestamp_checkedAdd(this.ptr, duration.ptr);\n        return ret === 0 ? undefined : Timestamp.__wrap(ret);\n    }\n    /**\n    * Computes `self - duration`\n    *\n    * Returns `null` if the operation leads to a timestamp not in the valid range for [RFC 3339](https://tools.ietf.org/html/rfc3339).\n    * @param {Duration} duration\n    * @returns {Timestamp | undefined}\n    */\n    checkedSub(duration) {\n        _assertClass(duration, Duration);\n        const ret = wasm.timestamp_checkedSub(this.ptr, duration.ptr);\n        return ret === 0 ? undefined : Timestamp.__wrap(ret);\n    }\n    /**\n    * Serializes a `Timestamp` as a JSON object.\n    * @returns {any}\n    */\n    toJSON() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.timestamp_toJSON(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Deserializes a `Timestamp` from a JSON object.\n    * @param {any} json\n    * @returns {Timestamp}\n    */\n    static fromJSON(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.timestamp_fromJSON(retptr, addBorrowedObject(json));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Timestamp.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n}\nmodule.exports.Timestamp = Timestamp;\n\nconst VerificationMethodFinalization = new FinalizationRegistry(ptr => wasm.__wbg_verificationmethod_free(ptr));\n/**\n*/\nclass VerificationMethod {\n\n    static __wrap(ptr) {\n        const obj = Object.create(VerificationMethod.prototype);\n        obj.ptr = ptr;\n        VerificationMethodFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    toJSON() {\n        return {\n        };\n    }\n\n    toString() {\n        return JSON.stringify(this);\n    }\n\n    [inspect.custom]() {\n        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        VerificationMethodFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_verificationmethod_free(ptr);\n    }\n    /**\n    * Creates a new `VerificationMethod` object from the given `did` and public key.\n    * @param {DID} did\n    * @param {number} key_type\n    * @param {Uint8Array} public_key\n    * @param {string} fragment\n    */\n    constructor(did, key_type, public_key, fragment) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(did, DID);\n            const ptr0 = passArray8ToWasm0(public_key, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(fragment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.verificationmethod_new(retptr, did.ptr, key_type, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerificationMethod.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns a copy of the `id` `DIDUrl` of the `VerificationMethod` object.\n    * @returns {DIDUrl}\n    */\n    id() {\n        const ret = wasm.verificationmethod_id(this.ptr);\n        return DIDUrl.__wrap(ret);\n    }\n    /**\n    * Returns a copy of the `controller` `DID` of the `VerificationMethod` object.\n    * @returns {DID}\n    */\n    controller() {\n        const ret = wasm.verificationmethod_controller(this.ptr);\n        return DID.__wrap(ret);\n    }\n    /**\n    * Sets the `controller` `DID` of the `VerificationMethod` object.\n    * @param {DID} did\n    */\n    SetController(did) {\n        _assertClass(did, DID);\n        wasm.verificationmethod_SetController(this.ptr, did.ptr);\n    }\n    /**\n    * Returns a copy of the `VerificationMethod` type.\n    * @returns {MethodType}\n    */\n    type() {\n        const ret = wasm.verificationmethod_type(this.ptr);\n        return MethodType.__wrap(ret);\n    }\n    /**\n    * Returns a copy of the `VerificationMethod` public key data.\n    * @returns {MethodData}\n    */\n    data() {\n        const ret = wasm.verificationmethod_data(this.ptr);\n        return MethodData.__wrap(ret);\n    }\n    /**\n    * Serializes a `VerificationMethod` object as a JSON object.\n    * @returns {any}\n    */\n    toJSON() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verificationmethod_toJSON(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Deserializes a `VerificationMethod` object from a JSON object.\n    * @param {any} value\n    * @returns {VerificationMethod}\n    */\n    static fromJSON(value) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verificationmethod_fromJSON(retptr, addBorrowedObject(value));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerificationMethod.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Deep clones the object.\n    * @returns {VerificationMethod}\n    */\n    clone() {\n        const ret = wasm.verificationmethod_clone(this.ptr);\n        return VerificationMethod.__wrap(ret);\n    }\n}\nmodule.exports.VerificationMethod = VerificationMethod;\n\nconst VerifierOptionsFinalization = new FinalizationRegistry(ptr => wasm.__wbg_verifieroptions_free(ptr));\n/**\n* Holds additional proof verification options.\n* See `IVerifierOptions`.\n*/\nclass VerifierOptions {\n\n    static __wrap(ptr) {\n        const obj = Object.create(VerifierOptions.prototype);\n        obj.ptr = ptr;\n        VerifierOptionsFinalization.register(obj, obj.ptr, obj);\n        return obj;\n    }\n\n    toJSON() {\n        return {\n        };\n    }\n\n    toString() {\n        return JSON.stringify(this);\n    }\n\n    [inspect.custom]() {\n        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        VerifierOptionsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_verifieroptions_free(ptr);\n    }\n    /**\n    * Creates a new `VerifierOptions` from the given fields.\n    *\n    * Throws an error if any of the options are invalid.\n    * @param {IVerifierOptions} options\n    */\n    constructor(options) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verifieroptions_new(retptr, addHeapObject(options));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifierOptions.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Creates a new `VerifierOptions` with default options.\n    * @returns {VerifierOptions}\n    */\n    static default() {\n        const ret = wasm.verifieroptions_default();\n        return VerifierOptions.__wrap(ret);\n    }\n    /**\n    * Serializes a `VerifierOptions` as a JSON object.\n    * @returns {any}\n    */\n    toJSON() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verifieroptions_toJSON(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Deserializes a `VerifierOptions` from a JSON object.\n    * @param {any} json\n    * @returns {VerifierOptions}\n    */\n    static fromJSON(json) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.verifieroptions_fromJSON(retptr, addBorrowedObject(json));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VerifierOptions.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Deep clones the object.\n    * @returns {VerifierOptions}\n    */\n    clone() {\n        const ret = wasm.verifieroptions_clone(this.ptr);\n        return VerifierOptions.__wrap(ret);\n    }\n}\nmodule.exports.VerifierOptions = VerifierOptions;\n\nconst X25519Finalization = new FinalizationRegistry(ptr => wasm.__wbg_x25519_free(ptr));\n/**\n* An implementation of `X25519` Elliptic-curve Diffie-Hellman (ECDH) cryptographic key exchange.\n*/\nclass X25519 {\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        X25519Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_x25519_free(ptr);\n    }\n    /**\n    * Length in bytes of an X25519 private key.\n    * @returns {number}\n    */\n    static PRIVATE_KEY_LENGTH() {\n        const ret = wasm.x25519_PRIVATE_KEY_LENGTH();\n        return ret >>> 0;\n    }\n    /**\n    * Length in bytes of an X25519 public key.\n    * @returns {number}\n    */\n    static PUBLIC_KEY_LENGTH() {\n        const ret = wasm.x25519_PUBLIC_KEY_LENGTH();\n        return ret >>> 0;\n    }\n    /**\n    * Performs Diffie-Hellman key exchange using the private key of the first party with the\n    * public key of the second party, resulting in a shared secret.\n    * @param {Uint8Array} privateKey\n    * @param {Uint8Array} publicKey\n    * @returns {Uint8Array}\n    */\n    static keyExchange(privateKey, publicKey) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(privateKey, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passArray8ToWasm0(publicKey, wasm.__wbindgen_malloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.x25519_keyExchange(retptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v2 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v2;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Transforms an `Ed25519` private key to an `X25519` private key.\n    *\n    * This is possible because Ed25519 is birationally equivalent to Curve25519 used by X25519.\n    * @param {Uint8Array} privateKey\n    * @returns {Uint8Array}\n    */\n    static Ed25519toX25519Private(privateKey) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(privateKey, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.x25519_Ed25519toX25519Private(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Transforms an `Ed25519` public key to an `X25519` public key.\n    *\n    * This is possible because Ed25519 is birationally equivalent to Curve25519 used by X25519.\n    * @param {Uint8Array} publicKey\n    * @returns {Uint8Array}\n    */\n    static Ed25519toX25519Public(publicKey) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(publicKey, wasm.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.x25519_Ed25519toX25519Public(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nmodule.exports.X25519 = X25519;\n\nmodule.exports.__wbg_forceIntegrationUpdate_641fd7b976adff69 = function(arg0) {\n    const ret = getObject(arg0).forceIntegrationUpdate;\n    return isLikeNone(ret) ? 0xFFFFFF : ret ? 1 : 0;\n};\n\nmodule.exports.__wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n};\n\nmodule.exports.__wbg_fragment_25296ef0b74e471c = function(arg0, arg1) {\n    const ret = getObject(arg1).fragment;\n    var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nmodule.exports.__wbg_relationships_c7202aa83d5786f9 = function(arg0) {\n    const ret = getObject(arg0).relationships;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_fragment_e12c852962da3c2f = function(arg0, arg1) {\n    const ret = getObject(arg1).fragment;\n    var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nmodule.exports.__wbg_scope_5601b30729b55bad = function(arg0) {\n    const ret = getObject(arg0).scope;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_content_f0d524fd72f59620 = function(arg0) {\n    const ret = getObject(arg0).content;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_fragment_a25c44360edfc7ab = function(arg0, arg1) {\n    const ret = getObject(arg1).fragment;\n    var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nmodule.exports.__wbg_relationships_1bf1dd48031307c9 = function(arg0) {\n    const ret = getObject(arg0).relationships;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_documenthistory_new = function(arg0) {\n    const ret = DocumentHistory.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_diffchainhistory_new = function(arg0) {\n    const ret = DiffChainHistory.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_account_new = function(arg0) {\n    const ret = Account.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_resolver_new = function(arg0) {\n    const ret = Resolver.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_signWith_26510522782c9743 = function(arg0, arg1) {\n    const ret = getObject(arg1).signWith;\n    var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nmodule.exports.__wbg_endpoint_89ffe3f61253a70c = function(arg0) {\n    const ret = getObject(arg0).endpoint;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_properties_b83a47dc5145e6b1 = function(arg0) {\n    const ret = getObject(arg0).properties;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_urls_2b5b5612ab9e9967 = function(arg0) {\n    const ret = getObject(arg0).urls;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_controllers_4399724802a69314 = function(arg0) {\n    const ret = getObject(arg0).controllers;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_credential_new = function(arg0) {\n    const ret = Credential.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_resolveddocument_new = function(arg0) {\n    const ret = ResolvedDocument.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_service_new = function(arg0) {\n    const ret = Service.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_string_new = function(arg0, arg1) {\n    const ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_diffmessage_new = function(arg0) {\n    const ret = DiffMessage.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_did_new = function(arg0) {\n    const ret = DID.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_verificationmethod_new = function(arg0) {\n    const ret = VerificationMethod.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_privateKey_f7e2aae190433242 = function(arg0, arg1) {\n    const ret = getObject(arg1).privateKey;\n    var ptr0 = isLikeNone(ret) ? 0 : passArray8ToWasm0(ret, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nmodule.exports.__wbg_autopublish_9d92161d27e897c1 = function(arg0) {\n    const ret = getObject(arg0).autopublish;\n    return isLikeNone(ret) ? 0xFFFFFF : ret ? 1 : 0;\n};\n\nmodule.exports.__wbg_autosave_b8db1c486313174b = function(arg0) {\n    const ret = getObject(arg0).autosave;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_clientConfig_3c2dd50a526ba96a = function(arg0) {\n    const ret = getObject(arg0).clientConfig;\n    return isLikeNone(ret) ? 0 : addHeapObject(ret);\n};\n\nmodule.exports.__wbg_storage_74384a6249104eeb = function(arg0) {\n    const ret = getObject(arg0).storage;\n    return isLikeNone(ret) ? 0 : addHeapObject(ret);\n};\n\nmodule.exports.__wbg_fragment_c8587d74bb1b41dd = function(arg0, arg1) {\n    const ret = getObject(arg1).fragment;\n    var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nmodule.exports.__wbg_fragment_e50e6d708e6d988c = function(arg0, arg1) {\n    const ret = getObject(arg1).fragment;\n    var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nmodule.exports.__wbg_client_new = function(arg0) {\n    const ret = Client.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_error_new = function(arg0, arg1) {\n    const ret = new Error(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_receipt_new = function(arg0) {\n    const ret = Receipt.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_id_3dc663ab7a361b11 = function(arg0) {\n    const ret = getObject(arg0).id;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_serviceEndpoint_d0df0dca54fd1088 = function(arg0) {\n    const ret = getObject(arg0).serviceEndpoint;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_properties_7a9978c87641ff8d = function(arg0) {\n    const ret = getObject(arg0).properties;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_type_61d3194948f52780 = function(arg0, arg1) {\n    const ret = getObject(arg1).type;\n    const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nmodule.exports.__wbg_presentation_new = function(arg0) {\n    const ret = Presentation.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_is_null = function(arg0) {\n    const ret = getObject(arg0) === null;\n    return ret;\n};\n\nmodule.exports.__wbindgen_is_undefined = function(arg0) {\n    const ret = getObject(arg0) === undefined;\n    return ret;\n};\n\nmodule.exports.__wbg_document_new = function(arg0) {\n    const ret = Document.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_encrypteddata_new = function(arg0) {\n    const ret = EncryptedData.__wrap(arg0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_flushChanges_1b3e7070edebd3c7 = function(arg0) {\n    const ret = getObject(arg0).flushChanges();\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_didList_837aa54393a8ecef = function(arg0) {\n    const ret = getObject(arg0).didList();\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_json_parse = function(arg0, arg1) {\n    const ret = JSON.parse(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_json_serialize = function(arg0, arg1) {\n    const obj = getObject(arg1);\n    const ret = JSON.stringify(obj === undefined ? null : obj);\n    const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nmodule.exports.__wbg_fragment_2a56fdc975987578 = function(arg0, arg1) {\n    const ret = getObject(arg1).fragment;\n    var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nmodule.exports.__wbg_type_fea5cfdd0db34544 = function(arg0, arg1) {\n    const ret = getObject(arg1).type;\n    var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nmodule.exports.__wbg_didCreate_564518ce4160d06e = function(arg0, arg1, arg2, arg3, arg4, arg5, arg6) {\n    let v0;\n    if (arg5 !== 0) {\n        v0 = getArrayU8FromWasm0(arg5, arg6).slice();\n        wasm.__wbindgen_free(arg5, arg6 * 1);\n    }\n    const ret = getObject(arg0).didCreate(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4), v0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_didPurge_14c8f1f02cf5a5b5 = function(arg0, arg1) {\n    const ret = getObject(arg0).didPurge(DID.__wrap(arg1));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_didExists_f3e119d2efa95097 = function(arg0, arg1) {\n    const ret = getObject(arg0).didExists(DID.__wrap(arg1));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_keyGenerate_b15d8eba573d7ff9 = function(arg0, arg1, arg2, arg3, arg4) {\n    try {\n        const ret = getObject(arg0).keyGenerate(DID.__wrap(arg1), arg2 >>> 0, getStringFromWasm0(arg3, arg4));\n        return addHeapObject(ret);\n    } finally {\n        wasm.__wbindgen_free(arg3, arg4);\n    }\n};\n\nmodule.exports.__wbg_keyInsert_8a0e701b351551b6 = function(arg0, arg1, arg2, arg3, arg4) {\n    var v0 = getArrayU8FromWasm0(arg3, arg4).slice();\n    wasm.__wbindgen_free(arg3, arg4 * 1);\n    const ret = getObject(arg0).keyInsert(DID.__wrap(arg1), KeyLocation.__wrap(arg2), v0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_keyPublic_11a79e1b5f708b41 = function(arg0, arg1, arg2) {\n    const ret = getObject(arg0).keyPublic(DID.__wrap(arg1), KeyLocation.__wrap(arg2));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_keyDelete_f01483f265a4e273 = function(arg0, arg1, arg2) {\n    const ret = getObject(arg0).keyDelete(DID.__wrap(arg1), KeyLocation.__wrap(arg2));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_keySign_65f2fbbe5dee6f08 = function(arg0, arg1, arg2, arg3, arg4) {\n    var v0 = getArrayU8FromWasm0(arg3, arg4).slice();\n    wasm.__wbindgen_free(arg3, arg4 * 1);\n    const ret = getObject(arg0).keySign(DID.__wrap(arg1), KeyLocation.__wrap(arg2), v0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_keyExists_9f0e24a0dc921a0f = function(arg0, arg1, arg2) {\n    const ret = getObject(arg0).keyExists(DID.__wrap(arg1), KeyLocation.__wrap(arg2));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_dataEncrypt_d3fdd1572872900e = function(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) {\n    var v0 = getArrayU8FromWasm0(arg2, arg3).slice();\n    wasm.__wbindgen_free(arg2, arg3 * 1);\n    var v1 = getArrayU8FromWasm0(arg4, arg5).slice();\n    wasm.__wbindgen_free(arg4, arg5 * 1);\n    var v2 = getArrayU8FromWasm0(arg8, arg9).slice();\n    wasm.__wbindgen_free(arg8, arg9 * 1);\n    const ret = getObject(arg0).dataEncrypt(DID.__wrap(arg1), v0, v1, EncryptionAlgorithm.__wrap(arg6), CekAlgorithm.__wrap(arg7), v2);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_dataDecrypt_77871e9915a5d30e = function(arg0, arg1, arg2, arg3, arg4, arg5) {\n    const ret = getObject(arg0).dataDecrypt(DID.__wrap(arg1), EncryptedData.__wrap(arg2), EncryptionAlgorithm.__wrap(arg3), CekAlgorithm.__wrap(arg4), KeyLocation.__wrap(arg5));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_chainStateGet_6e79198c588db9e7 = function(arg0, arg1) {\n    const ret = getObject(arg0).chainStateGet(DID.__wrap(arg1));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_chainStateSet_da53cea6c2166f4e = function(arg0, arg1, arg2) {\n    const ret = getObject(arg0).chainStateSet(DID.__wrap(arg1), ChainState.__wrap(arg2));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_documentGet_f0d797c335fedd28 = function(arg0, arg1) {\n    const ret = getObject(arg0).documentGet(DID.__wrap(arg1));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_documentSet_f41fdfb8cb62830e = function(arg0, arg1, arg2) {\n    const ret = getObject(arg0).documentSet(DID.__wrap(arg1), Document.__wrap(arg2));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_new_693216e109162396 = function() {\n    const ret = new Error();\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_stack_0ddaca5d1abfb52f = function(arg0, arg1) {\n    const ret = getObject(arg1).stack;\n    const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nmodule.exports.__wbg_error_09919627ac0992f5 = function(arg0, arg1) {\n    try {\n        console.error(getStringFromWasm0(arg0, arg1));\n    } finally {\n        wasm.__wbindgen_free(arg0, arg1);\n    }\n};\n\nmodule.exports.__wbindgen_string_get = function(arg0, arg1) {\n    const obj = getObject(arg1);\n    const ret = typeof(obj) === 'string' ? obj : undefined;\n    var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nmodule.exports.__wbg_fetch_b1379d93c1e2b015 = function(arg0) {\n    const ret = fetch(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_object_clone_ref = function(arg0) {\n    const ret = getObject(arg0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_cb_drop = function(arg0) {\n    const obj = takeObject(arg0).original;\n    if (obj.cnt-- == 1) {\n        obj.a = 0;\n        return true;\n    }\n    const ret = false;\n    return ret;\n};\n\nmodule.exports.__wbg_fetch_8c28485eb2d6317d = function(arg0, arg1) {\n    const ret = getObject(arg0).fetch(getObject(arg1));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_instanceof_Response_e928c54c1025470c = function(arg0) {\n    const ret = getObject(arg0) instanceof Response;\n    return ret;\n};\n\nmodule.exports.__wbg_url_0f82030e7245954c = function(arg0, arg1) {\n    const ret = getObject(arg1).url;\n    const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nmodule.exports.__wbg_status_5b4a574de7c5bbfe = function(arg0) {\n    const ret = getObject(arg0).status;\n    return ret;\n};\n\nmodule.exports.__wbg_headers_1dc1ef92ba3d32b1 = function(arg0) {\n    const ret = getObject(arg0).headers;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_text_5cb78830c1a11c5b = function() { return handleError(function (arg0) {\n    const ret = getObject(arg0).text();\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_now_9c64828adecad05e = function(arg0) {\n    const ret = getObject(arg0).now();\n    return ret;\n};\n\nmodule.exports.__wbg_newwithstrandinit_41c86e821f771b24 = function() { return handleError(function (arg0, arg1, arg2) {\n    const ret = new Request(getStringFromWasm0(arg0, arg1), getObject(arg2));\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_new_483f23f84dfd2751 = function() { return handleError(function () {\n    const ret = new Headers();\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_append_fcf64231455390c4 = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n    getObject(arg0).append(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4));\n}, arguments) };\n\nmodule.exports.__wbg_clearTimeout_65417660fe82f08d = typeof clearTimeout == 'function' ? clearTimeout : notDefined('clearTimeout');\n\nmodule.exports.__wbg_setTimeout_131fc254e1bd5624 = function() { return handleError(function (arg0, arg1) {\n    const ret = setTimeout(getObject(arg0), arg1);\n    return ret;\n}, arguments) };\n\nmodule.exports.__wbg_process_e56fd54cf6319b6c = function(arg0) {\n    const ret = getObject(arg0).process;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_is_object = function(arg0) {\n    const val = getObject(arg0);\n    const ret = typeof(val) === 'object' && val !== null;\n    return ret;\n};\n\nmodule.exports.__wbg_versions_77e21455908dad33 = function(arg0) {\n    const ret = getObject(arg0).versions;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_node_0dd25d832e4785d5 = function(arg0) {\n    const ret = getObject(arg0).node;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_is_string = function(arg0) {\n    const ret = typeof(getObject(arg0)) === 'string';\n    return ret;\n};\n\nmodule.exports.__wbg_require_0db1598d9ccecb30 = function() { return handleError(function (arg0, arg1, arg2) {\n    const ret = getObject(arg0).require(getStringFromWasm0(arg1, arg2));\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_crypto_b95d7173266618a9 = function(arg0) {\n    const ret = getObject(arg0).crypto;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_msCrypto_5a86d77a66230f81 = function(arg0) {\n    const ret = getObject(arg0).msCrypto;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_getRandomValues_b14734aa289bc356 = function() { return handleError(function (arg0, arg1) {\n    getObject(arg0).getRandomValues(getObject(arg1));\n}, arguments) };\n\nmodule.exports.__wbg_static_accessor_NODE_MODULE_26b231378c1be7dd = function() {\n    const ret = module;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_randomFillSync_91e2b39becca6147 = function() { return handleError(function (arg0, arg1, arg2) {\n    getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));\n}, arguments) };\n\nmodule.exports.__wbg_get_f0f4f1608ebf633e = function(arg0, arg1) {\n    const ret = getObject(arg0)[arg1 >>> 0];\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_length_93debb0e2e184ab6 = function(arg0) {\n    const ret = getObject(arg0).length;\n    return ret;\n};\n\nmodule.exports.__wbg_new_2ab697f1555e0dbc = function() {\n    const ret = new Array();\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_is_function = function(arg0) {\n    const ret = typeof(getObject(arg0)) === 'function';\n    return ret;\n};\n\nmodule.exports.__wbg_newnoargs_fc5356289219b93b = function(arg0, arg1) {\n    const ret = new Function(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_new_f0540490a24a79bb = function() {\n    const ret = new Map();\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_next_0e1ee6203bc0f8ed = function(arg0) {\n    const ret = getObject(arg0).next;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_next_9ef803116340cdc1 = function() { return handleError(function (arg0) {\n    const ret = getObject(arg0).next();\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_done_2a1e30464aae6a4d = function(arg0) {\n    const ret = getObject(arg0).done;\n    return ret;\n};\n\nmodule.exports.__wbg_value_a495c29471c31da6 = function(arg0) {\n    const ret = getObject(arg0).value;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_iterator_6ac6eb1e020f18e3 = function() {\n    const ret = Symbol.iterator;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_get_89247d3aeaa38cc5 = function() { return handleError(function (arg0, arg1) {\n    const ret = Reflect.get(getObject(arg0), getObject(arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_call_4573f605ca4b5f10 = function() { return handleError(function (arg0, arg1) {\n    const ret = getObject(arg0).call(getObject(arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_new_306ce8d57919e6ae = function() {\n    const ret = new Object();\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_self_ba1ddafe9ea7a3a2 = function() { return handleError(function () {\n    const ret = self.self;\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_window_be3cc430364fd32c = function() { return handleError(function () {\n    const ret = window.window;\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_globalThis_56d9c9f814daeeee = function() { return handleError(function () {\n    const ret = globalThis.globalThis;\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_global_8c35aeee4ac77f2b = function() { return handleError(function () {\n    const ret = global.global;\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_from_7ff9036e9b5c3ccb = function(arg0) {\n    const ret = Array.from(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_push_811c8b08bf4ff9d5 = function(arg0, arg1) {\n    const ret = getObject(arg0).push(getObject(arg1));\n    return ret;\n};\n\nmodule.exports.__wbg_instanceof_Error_53fd3b982f19be06 = function(arg0) {\n    const ret = getObject(arg0) instanceof Error;\n    return ret;\n};\n\nmodule.exports.__wbg_new_651776e932b7e9c7 = function(arg0, arg1) {\n    const ret = new Error(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_setname_c41f156664cf0ab9 = function(arg0, arg1, arg2) {\n    getObject(arg0).name = getStringFromWasm0(arg1, arg2);\n};\n\nmodule.exports.__wbg_toString_ef76a2af8f5bb98a = function(arg0) {\n    const ret = getObject(arg0).toString();\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_call_9855a4612eb496cb = function() { return handleError(function (arg0, arg1, arg2) {\n    const ret = getObject(arg0).call(getObject(arg1), getObject(arg2));\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_instanceof_Map_9e1310ea011d1721 = function(arg0) {\n    const ret = getObject(arg0) instanceof Map;\n    return ret;\n};\n\nmodule.exports.__wbg_set_e44d2fe94a18567f = function(arg0, arg1, arg2) {\n    const ret = getObject(arg0).set(getObject(arg1), getObject(arg2));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_now_513c8208bd94c09b = function() {\n    const ret = Date.now();\n    return ret;\n};\n\nmodule.exports.__wbg_fromEntries_06150f1d39e0a856 = function() { return handleError(function (arg0) {\n    const ret = Object.fromEntries(getObject(arg0));\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_new_78403b138428b684 = function(arg0, arg1) {\n    try {\n        var state0 = {a: arg0, b: arg1};\n        var cb0 = (arg0, arg1) => {\n            const a = state0.a;\n            state0.a = 0;\n            try {\n                return __wbg_adapter_655(a, state0.b, arg0, arg1);\n            } finally {\n                state0.a = a;\n            }\n        };\n        const ret = new Promise(cb0);\n        return addHeapObject(ret);\n    } finally {\n        state0.a = state0.b = 0;\n    }\n};\n\nmodule.exports.__wbg_resolve_f269ce174f88b294 = function(arg0) {\n    const ret = Promise.resolve(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_then_1c698eedca15eed6 = function(arg0, arg1) {\n    const ret = getObject(arg0).then(getObject(arg1));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_then_4debc41d4fc92ce5 = function(arg0, arg1, arg2) {\n    const ret = getObject(arg0).then(getObject(arg1), getObject(arg2));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_buffer_de1150f91b23aa89 = function(arg0) {\n    const ret = getObject(arg0).buffer;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_newwithbyteoffsetandlength_9ca61320599a2c84 = function(arg0, arg1, arg2) {\n    const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_new_97cf52648830a70d = function(arg0) {\n    const ret = new Uint8Array(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_set_a0172b213e2469e9 = function(arg0, arg1, arg2) {\n    getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n};\n\nmodule.exports.__wbg_length_e09c0b925ab8de5d = function(arg0) {\n    const ret = getObject(arg0).length;\n    return ret;\n};\n\nmodule.exports.__wbg_instanceof_Uint8Array_fd17ec67c77de602 = function(arg0) {\n    const ret = getObject(arg0) instanceof Uint8Array;\n    return ret;\n};\n\nmodule.exports.__wbg_newwithlength_e833b89f9db02732 = function(arg0) {\n    const ret = new Uint8Array(arg0 >>> 0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_subarray_9482ae5cd5cd99d3 = function(arg0, arg1, arg2) {\n    const ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_has_ded5f0e31f1ff6ad = function() { return handleError(function (arg0, arg1) {\n    const ret = Reflect.has(getObject(arg0), getObject(arg1));\n    return ret;\n}, arguments) };\n\nmodule.exports.__wbg_set_b12cd0ab82903c2f = function() { return handleError(function (arg0, arg1, arg2) {\n    const ret = Reflect.set(getObject(arg0), getObject(arg1), getObject(arg2));\n    return ret;\n}, arguments) };\n\nmodule.exports.__wbg_stringify_cf20dc96bee34a66 = function() { return handleError(function (arg0) {\n    const ret = JSON.stringify(getObject(arg0));\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbindgen_debug_string = function(arg0, arg1) {\n    const ret = debugString(getObject(arg1));\n    const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nmodule.exports.__wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nmodule.exports.__wbindgen_memory = function() {\n    const ret = wasm.memory;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_closure_wrapper8805 = function(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 1515, __wbg_adapter_34);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_closure_wrapper10366 = function(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 1752, __wbg_adapter_37);\n    return addHeapObject(ret);\n};\n\nconst path = require('path').join(__dirname, 'identity_wasm_bg.wasm');\nconst bytes = require('fs').readFileSync(path);\n\nconst wasmModule = new WebAssembly.Module(bytes);\nconst wasmInstance = new WebAssembly.Instance(wasmModule, imports);\nwasm = wasmInstance.exports;\nmodule.exports.__wasm = wasm;\n\ncachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\ncachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n\nwasm.__wbindgen_start();\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}